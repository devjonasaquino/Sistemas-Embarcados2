
Projeto6_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084d4  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800876c  0800876c  0000976c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080087a4  080087a4  000097a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080087ac  080087ac  000097ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080087b0  080087b0  000097b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000014  24000000  080087b4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000014  080087c8  0000a014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000074  08008828  0000a074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000694  240000d4  08008888  0000a0d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000768  08008888  0000a768  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000a0d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019382  00000000  00000000  0000a102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bcc  00000000  00000000  00023484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001000  00000000  00000000  00026050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c65  00000000  00000000  00027050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00037c33  00000000  00000000  00027cb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001845b  00000000  00000000  0005f8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001610eb  00000000  00000000  00077d43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001d8e2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004410  00000000  00000000  001d8e74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  001dd284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d4 	.word	0x240000d4
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08008754 	.word	0x08008754

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d8 	.word	0x240000d8
 80002d4:	08008754 	.word	0x08008754

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005cc:	f000 fd1a 	bl	8001004 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d0:	f000 f814 	bl	80005fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d4:	f000 f95c 	bl	8000890 <MX_GPIO_Init>
  MX_ETH_Init();
 80005d8:	f000 f890 	bl	80006fc <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005dc:	f000 f8da 	bl	8000794 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005e0:	f000 f924 	bl	800082c <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
	  HAL_UART_Receive_IT(&huart3, rx_buffer, sizeof(rx_buffer));
 80005e4:	220a      	movs	r2, #10
 80005e6:	4903      	ldr	r1, [pc, #12]	@ (80005f4 <main+0x2c>)
 80005e8:	4803      	ldr	r0, [pc, #12]	@ (80005f8 <main+0x30>)
 80005ea:	f005 fa2f 	bl	8005a4c <HAL_UART_Receive_IT>

	  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ee:	bf00      	nop
 80005f0:	e7fd      	b.n	80005ee <main+0x26>
 80005f2:	bf00      	nop
 80005f4:	24000750 	.word	0x24000750
 80005f8:	240001d8 	.word	0x240001d8

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b09c      	sub	sp, #112	@ 0x70
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000606:	224c      	movs	r2, #76	@ 0x4c
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f008 f875 	bl	80086fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	2220      	movs	r2, #32
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f008 f86f 	bl	80086fa <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800061c:	2002      	movs	r0, #2
 800061e:	f002 fb69 	bl	8002cf4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000622:	2300      	movs	r3, #0
 8000624:	603b      	str	r3, [r7, #0]
 8000626:	4b33      	ldr	r3, [pc, #204]	@ (80006f4 <SystemClock_Config+0xf8>)
 8000628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800062a:	4a32      	ldr	r2, [pc, #200]	@ (80006f4 <SystemClock_Config+0xf8>)
 800062c:	f023 0301 	bic.w	r3, r3, #1
 8000630:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000632:	4b30      	ldr	r3, [pc, #192]	@ (80006f4 <SystemClock_Config+0xf8>)
 8000634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000636:	f003 0301 	and.w	r3, r3, #1
 800063a:	603b      	str	r3, [r7, #0]
 800063c:	4b2e      	ldr	r3, [pc, #184]	@ (80006f8 <SystemClock_Config+0xfc>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000644:	4a2c      	ldr	r2, [pc, #176]	@ (80006f8 <SystemClock_Config+0xfc>)
 8000646:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800064a:	6193      	str	r3, [r2, #24]
 800064c:	4b2a      	ldr	r3, [pc, #168]	@ (80006f8 <SystemClock_Config+0xfc>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000654:	603b      	str	r3, [r7, #0]
 8000656:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000658:	bf00      	nop
 800065a:	4b27      	ldr	r3, [pc, #156]	@ (80006f8 <SystemClock_Config+0xfc>)
 800065c:	699b      	ldr	r3, [r3, #24]
 800065e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000662:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000666:	d1f8      	bne.n	800065a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000668:	2303      	movs	r3, #3
 800066a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800066c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000670:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000672:	2301      	movs	r3, #1
 8000674:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000676:	2340      	movs	r3, #64	@ 0x40
 8000678:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067a:	2302      	movs	r3, #2
 800067c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067e:	2302      	movs	r3, #2
 8000680:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000682:	2301      	movs	r3, #1
 8000684:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000686:	2318      	movs	r3, #24
 8000688:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800068a:	2302      	movs	r3, #2
 800068c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800068e:	2304      	movs	r3, #4
 8000690:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000692:	2302      	movs	r3, #2
 8000694:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000696:	230c      	movs	r3, #12
 8000698:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800069a:	2300      	movs	r3, #0
 800069c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800069e:	2300      	movs	r3, #0
 80006a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006a6:	4618      	mov	r0, r3
 80006a8:	f002 fb6e 	bl	8002d88 <HAL_RCC_OscConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80006b2:	f000 f9df 	bl	8000a74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b6:	233f      	movs	r3, #63	@ 0x3f
 80006b8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006ba:	2300      	movs	r3, #0
 80006bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	2101      	movs	r1, #1
 80006da:	4618      	mov	r0, r3
 80006dc:	f002 ffae 	bl	800363c <HAL_RCC_ClockConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0xee>
  {
    Error_Handler();
 80006e6:	f000 f9c5 	bl	8000a74 <Error_Handler>
  }
}
 80006ea:	bf00      	nop
 80006ec:	3770      	adds	r7, #112	@ 0x70
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	58000400 	.word	0x58000400
 80006f8:	58024800 	.word	0x58024800

080006fc <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000700:	4b1e      	ldr	r3, [pc, #120]	@ (800077c <MX_ETH_Init+0x80>)
 8000702:	4a1f      	ldr	r2, [pc, #124]	@ (8000780 <MX_ETH_Init+0x84>)
 8000704:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000706:	4b1f      	ldr	r3, [pc, #124]	@ (8000784 <MX_ETH_Init+0x88>)
 8000708:	2200      	movs	r2, #0
 800070a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800070c:	4b1d      	ldr	r3, [pc, #116]	@ (8000784 <MX_ETH_Init+0x88>)
 800070e:	2280      	movs	r2, #128	@ 0x80
 8000710:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000712:	4b1c      	ldr	r3, [pc, #112]	@ (8000784 <MX_ETH_Init+0x88>)
 8000714:	22e1      	movs	r2, #225	@ 0xe1
 8000716:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000718:	4b1a      	ldr	r3, [pc, #104]	@ (8000784 <MX_ETH_Init+0x88>)
 800071a:	2200      	movs	r2, #0
 800071c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800071e:	4b19      	ldr	r3, [pc, #100]	@ (8000784 <MX_ETH_Init+0x88>)
 8000720:	2200      	movs	r2, #0
 8000722:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000724:	4b17      	ldr	r3, [pc, #92]	@ (8000784 <MX_ETH_Init+0x88>)
 8000726:	2200      	movs	r2, #0
 8000728:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800072a:	4b14      	ldr	r3, [pc, #80]	@ (800077c <MX_ETH_Init+0x80>)
 800072c:	4a15      	ldr	r2, [pc, #84]	@ (8000784 <MX_ETH_Init+0x88>)
 800072e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000730:	4b12      	ldr	r3, [pc, #72]	@ (800077c <MX_ETH_Init+0x80>)
 8000732:	2201      	movs	r2, #1
 8000734:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000736:	4b11      	ldr	r3, [pc, #68]	@ (800077c <MX_ETH_Init+0x80>)
 8000738:	4a13      	ldr	r2, [pc, #76]	@ (8000788 <MX_ETH_Init+0x8c>)
 800073a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800073c:	4b0f      	ldr	r3, [pc, #60]	@ (800077c <MX_ETH_Init+0x80>)
 800073e:	4a13      	ldr	r2, [pc, #76]	@ (800078c <MX_ETH_Init+0x90>)
 8000740:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000742:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <MX_ETH_Init+0x80>)
 8000744:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000748:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800074a:	480c      	ldr	r0, [pc, #48]	@ (800077c <MX_ETH_Init+0x80>)
 800074c:	f001 fba4 	bl	8001e98 <HAL_ETH_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000756:	f000 f98d 	bl	8000a74 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800075a:	2238      	movs	r2, #56	@ 0x38
 800075c:	2100      	movs	r1, #0
 800075e:	480c      	ldr	r0, [pc, #48]	@ (8000790 <MX_ETH_Init+0x94>)
 8000760:	f007 ffcb 	bl	80086fa <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000764:	4b0a      	ldr	r3, [pc, #40]	@ (8000790 <MX_ETH_Init+0x94>)
 8000766:	2221      	movs	r2, #33	@ 0x21
 8000768:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800076a:	4b09      	ldr	r3, [pc, #36]	@ (8000790 <MX_ETH_Init+0x94>)
 800076c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000770:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000772:	4b07      	ldr	r3, [pc, #28]	@ (8000790 <MX_ETH_Init+0x94>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}
 800077c:	24000128 	.word	0x24000128
 8000780:	40028000 	.word	0x40028000
 8000784:	2400075c 	.word	0x2400075c
 8000788:	24000074 	.word	0x24000074
 800078c:	24000014 	.word	0x24000014
 8000790:	240000f0 	.word	0x240000f0

08000794 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000798:	4b22      	ldr	r3, [pc, #136]	@ (8000824 <MX_USART3_UART_Init+0x90>)
 800079a:	4a23      	ldr	r2, [pc, #140]	@ (8000828 <MX_USART3_UART_Init+0x94>)
 800079c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800079e:	4b21      	ldr	r3, [pc, #132]	@ (8000824 <MX_USART3_UART_Init+0x90>)
 80007a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007a6:	4b1f      	ldr	r3, [pc, #124]	@ (8000824 <MX_USART3_UART_Init+0x90>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007ac:	4b1d      	ldr	r3, [pc, #116]	@ (8000824 <MX_USART3_UART_Init+0x90>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000824 <MX_USART3_UART_Init+0x90>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007b8:	4b1a      	ldr	r3, [pc, #104]	@ (8000824 <MX_USART3_UART_Init+0x90>)
 80007ba:	220c      	movs	r2, #12
 80007bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007be:	4b19      	ldr	r3, [pc, #100]	@ (8000824 <MX_USART3_UART_Init+0x90>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c4:	4b17      	ldr	r3, [pc, #92]	@ (8000824 <MX_USART3_UART_Init+0x90>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ca:	4b16      	ldr	r3, [pc, #88]	@ (8000824 <MX_USART3_UART_Init+0x90>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007d0:	4b14      	ldr	r3, [pc, #80]	@ (8000824 <MX_USART3_UART_Init+0x90>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007d6:	4b13      	ldr	r3, [pc, #76]	@ (8000824 <MX_USART3_UART_Init+0x90>)
 80007d8:	2200      	movs	r2, #0
 80007da:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007dc:	4811      	ldr	r0, [pc, #68]	@ (8000824 <MX_USART3_UART_Init+0x90>)
 80007de:	f005 f8e5 	bl	80059ac <HAL_UART_Init>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80007e8:	f000 f944 	bl	8000a74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007ec:	2100      	movs	r1, #0
 80007ee:	480d      	ldr	r0, [pc, #52]	@ (8000824 <MX_USART3_UART_Init+0x90>)
 80007f0:	f007 fbb1 	bl	8007f56 <HAL_UARTEx_SetTxFifoThreshold>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80007fa:	f000 f93b 	bl	8000a74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007fe:	2100      	movs	r1, #0
 8000800:	4808      	ldr	r0, [pc, #32]	@ (8000824 <MX_USART3_UART_Init+0x90>)
 8000802:	f007 fbe6 	bl	8007fd2 <HAL_UARTEx_SetRxFifoThreshold>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800080c:	f000 f932 	bl	8000a74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000810:	4804      	ldr	r0, [pc, #16]	@ (8000824 <MX_USART3_UART_Init+0x90>)
 8000812:	f007 fb67 	bl	8007ee4 <HAL_UARTEx_DisableFifoMode>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800081c:	f000 f92a 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}
 8000824:	240001d8 	.word	0x240001d8
 8000828:	40004800 	.word	0x40004800

0800082c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000830:	4b15      	ldr	r3, [pc, #84]	@ (8000888 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000832:	4a16      	ldr	r2, [pc, #88]	@ (800088c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000834:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000836:	4b14      	ldr	r3, [pc, #80]	@ (8000888 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000838:	2209      	movs	r2, #9
 800083a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800083c:	4b12      	ldr	r3, [pc, #72]	@ (8000888 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800083e:	2202      	movs	r2, #2
 8000840:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000842:	4b11      	ldr	r3, [pc, #68]	@ (8000888 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000844:	2200      	movs	r2, #0
 8000846:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000848:	4b0f      	ldr	r3, [pc, #60]	@ (8000888 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800084a:	2202      	movs	r2, #2
 800084c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800084e:	4b0e      	ldr	r3, [pc, #56]	@ (8000888 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000850:	2201      	movs	r2, #1
 8000852:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000854:	4b0c      	ldr	r3, [pc, #48]	@ (8000888 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000856:	2200      	movs	r2, #0
 8000858:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800085a:	4b0b      	ldr	r3, [pc, #44]	@ (8000888 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800085c:	2200      	movs	r2, #0
 800085e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000860:	4b09      	ldr	r3, [pc, #36]	@ (8000888 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000862:	2201      	movs	r2, #1
 8000864:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000866:	4b08      	ldr	r3, [pc, #32]	@ (8000888 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000868:	2201      	movs	r2, #1
 800086a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800086c:	4b06      	ldr	r3, [pc, #24]	@ (8000888 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800086e:	2200      	movs	r2, #0
 8000870:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000872:	4805      	ldr	r0, [pc, #20]	@ (8000888 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000874:	f002 f90d 	bl	8002a92 <HAL_PCD_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800087e:	f000 f8f9 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	2400026c 	.word	0x2400026c
 800088c:	40080000 	.word	0x40080000

08000890 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b08c      	sub	sp, #48	@ 0x30
 8000894:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]
 80008a0:	609a      	str	r2, [r3, #8]
 80008a2:	60da      	str	r2, [r3, #12]
 80008a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a6:	4b62      	ldr	r3, [pc, #392]	@ (8000a30 <MX_GPIO_Init+0x1a0>)
 80008a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008ac:	4a60      	ldr	r2, [pc, #384]	@ (8000a30 <MX_GPIO_Init+0x1a0>)
 80008ae:	f043 0304 	orr.w	r3, r3, #4
 80008b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008b6:	4b5e      	ldr	r3, [pc, #376]	@ (8000a30 <MX_GPIO_Init+0x1a0>)
 80008b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008bc:	f003 0304 	and.w	r3, r3, #4
 80008c0:	61bb      	str	r3, [r7, #24]
 80008c2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008c4:	4b5a      	ldr	r3, [pc, #360]	@ (8000a30 <MX_GPIO_Init+0x1a0>)
 80008c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008ca:	4a59      	ldr	r2, [pc, #356]	@ (8000a30 <MX_GPIO_Init+0x1a0>)
 80008cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008d4:	4b56      	ldr	r3, [pc, #344]	@ (8000a30 <MX_GPIO_Init+0x1a0>)
 80008d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008de:	617b      	str	r3, [r7, #20]
 80008e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e2:	4b53      	ldr	r3, [pc, #332]	@ (8000a30 <MX_GPIO_Init+0x1a0>)
 80008e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008e8:	4a51      	ldr	r2, [pc, #324]	@ (8000a30 <MX_GPIO_Init+0x1a0>)
 80008ea:	f043 0301 	orr.w	r3, r3, #1
 80008ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008f2:	4b4f      	ldr	r3, [pc, #316]	@ (8000a30 <MX_GPIO_Init+0x1a0>)
 80008f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008f8:	f003 0301 	and.w	r3, r3, #1
 80008fc:	613b      	str	r3, [r7, #16]
 80008fe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000900:	4b4b      	ldr	r3, [pc, #300]	@ (8000a30 <MX_GPIO_Init+0x1a0>)
 8000902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000906:	4a4a      	ldr	r2, [pc, #296]	@ (8000a30 <MX_GPIO_Init+0x1a0>)
 8000908:	f043 0302 	orr.w	r3, r3, #2
 800090c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000910:	4b47      	ldr	r3, [pc, #284]	@ (8000a30 <MX_GPIO_Init+0x1a0>)
 8000912:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000916:	f003 0302 	and.w	r3, r3, #2
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800091e:	4b44      	ldr	r3, [pc, #272]	@ (8000a30 <MX_GPIO_Init+0x1a0>)
 8000920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000924:	4a42      	ldr	r2, [pc, #264]	@ (8000a30 <MX_GPIO_Init+0x1a0>)
 8000926:	f043 0308 	orr.w	r3, r3, #8
 800092a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800092e:	4b40      	ldr	r3, [pc, #256]	@ (8000a30 <MX_GPIO_Init+0x1a0>)
 8000930:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000934:	f003 0308 	and.w	r3, r3, #8
 8000938:	60bb      	str	r3, [r7, #8]
 800093a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800093c:	4b3c      	ldr	r3, [pc, #240]	@ (8000a30 <MX_GPIO_Init+0x1a0>)
 800093e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000942:	4a3b      	ldr	r2, [pc, #236]	@ (8000a30 <MX_GPIO_Init+0x1a0>)
 8000944:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000948:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800094c:	4b38      	ldr	r3, [pc, #224]	@ (8000a30 <MX_GPIO_Init+0x1a0>)
 800094e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000952:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800095a:	4b35      	ldr	r3, [pc, #212]	@ (8000a30 <MX_GPIO_Init+0x1a0>)
 800095c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000960:	4a33      	ldr	r2, [pc, #204]	@ (8000a30 <MX_GPIO_Init+0x1a0>)
 8000962:	f043 0310 	orr.w	r3, r3, #16
 8000966:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800096a:	4b31      	ldr	r3, [pc, #196]	@ (8000a30 <MX_GPIO_Init+0x1a0>)
 800096c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000970:	f003 0310 	and.w	r3, r3, #16
 8000974:	603b      	str	r3, [r7, #0]
 8000976:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000978:	2200      	movs	r2, #0
 800097a:	f244 0101 	movw	r1, #16385	@ 0x4001
 800097e:	482d      	ldr	r0, [pc, #180]	@ (8000a34 <MX_GPIO_Init+0x1a4>)
 8000980:	f002 f86e 	bl	8002a60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000984:	2200      	movs	r2, #0
 8000986:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800098a:	482b      	ldr	r0, [pc, #172]	@ (8000a38 <MX_GPIO_Init+0x1a8>)
 800098c:	f002 f868 	bl	8002a60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000990:	2200      	movs	r2, #0
 8000992:	2102      	movs	r1, #2
 8000994:	4829      	ldr	r0, [pc, #164]	@ (8000a3c <MX_GPIO_Init+0x1ac>)
 8000996:	f002 f863 	bl	8002a60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800099a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800099e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a0:	2300      	movs	r3, #0
 80009a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009a8:	f107 031c 	add.w	r3, r7, #28
 80009ac:	4619      	mov	r1, r3
 80009ae:	4824      	ldr	r0, [pc, #144]	@ (8000a40 <MX_GPIO_Init+0x1b0>)
 80009b0:	f001 fea6 	bl	8002700 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80009b4:	f244 0301 	movw	r3, #16385	@ 0x4001
 80009b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ba:	2301      	movs	r3, #1
 80009bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	2300      	movs	r3, #0
 80009c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	4619      	mov	r1, r3
 80009cc:	4819      	ldr	r0, [pc, #100]	@ (8000a34 <MX_GPIO_Init+0x1a4>)
 80009ce:	f001 fe97 	bl	8002700 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80009d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d8:	2301      	movs	r3, #1
 80009da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e0:	2300      	movs	r3, #0
 80009e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80009e4:	f107 031c 	add.w	r3, r7, #28
 80009e8:	4619      	mov	r1, r3
 80009ea:	4813      	ldr	r0, [pc, #76]	@ (8000a38 <MX_GPIO_Init+0x1a8>)
 80009ec:	f001 fe88 	bl	8002700 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 80009f0:	2380      	movs	r3, #128	@ 0x80
 80009f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009f4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80009f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4619      	mov	r1, r3
 8000a04:	480f      	ldr	r0, [pc, #60]	@ (8000a44 <MX_GPIO_Init+0x1b4>)
 8000a06:	f001 fe7b 	bl	8002700 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a16:	2300      	movs	r3, #0
 8000a18:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4806      	ldr	r0, [pc, #24]	@ (8000a3c <MX_GPIO_Init+0x1ac>)
 8000a22:	f001 fe6d 	bl	8002700 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a26:	bf00      	nop
 8000a28:	3730      	adds	r7, #48	@ 0x30
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	58024400 	.word	0x58024400
 8000a34:	58020400 	.word	0x58020400
 8000a38:	58020c00 	.word	0x58020c00
 8000a3c:	58021000 	.word	0x58021000
 8000a40:	58020800 	.word	0x58020800
 8000a44:	58021800 	.word	0x58021800

08000a48 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

	void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
	{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
	Rx_flag = '1';
 8000a50:	4b05      	ldr	r3, [pc, #20]	@ (8000a68 <HAL_UART_RxCpltCallback+0x20>)
 8000a52:	2231      	movs	r2, #49	@ 0x31
 8000a54:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart3, rx_buffer, sizeof(rx_buffer));
 8000a56:	220a      	movs	r2, #10
 8000a58:	4904      	ldr	r1, [pc, #16]	@ (8000a6c <HAL_UART_RxCpltCallback+0x24>)
 8000a5a:	4805      	ldr	r0, [pc, #20]	@ (8000a70 <HAL_UART_RxCpltCallback+0x28>)
 8000a5c:	f004 fff6 	bl	8005a4c <HAL_UART_Receive_IT>
	}
 8000a60:	bf00      	nop
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	24000000 	.word	0x24000000
 8000a6c:	24000750 	.word	0x24000750
 8000a70:	240001d8 	.word	0x240001d8

08000a74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a78:	b672      	cpsid	i
}
 8000a7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a7c:	bf00      	nop
 8000a7e:	e7fd      	b.n	8000a7c <Error_Handler+0x8>

08000a80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a86:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab0 <HAL_MspInit+0x30>)
 8000a88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a8c:	4a08      	ldr	r2, [pc, #32]	@ (8000ab0 <HAL_MspInit+0x30>)
 8000a8e:	f043 0302 	orr.w	r3, r3, #2
 8000a92:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000a96:	4b06      	ldr	r3, [pc, #24]	@ (8000ab0 <HAL_MspInit+0x30>)
 8000a98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a9c:	f003 0302 	and.w	r3, r3, #2
 8000aa0:	607b      	str	r3, [r7, #4]
 8000aa2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa4:	bf00      	nop
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	58024400 	.word	0x58024400

08000ab4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08e      	sub	sp, #56	@ 0x38
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a59      	ldr	r2, [pc, #356]	@ (8000c38 <HAL_ETH_MspInit+0x184>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	f040 80ab 	bne.w	8000c2e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000ad8:	4b58      	ldr	r3, [pc, #352]	@ (8000c3c <HAL_ETH_MspInit+0x188>)
 8000ada:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ade:	4a57      	ldr	r2, [pc, #348]	@ (8000c3c <HAL_ETH_MspInit+0x188>)
 8000ae0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ae4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000ae8:	4b54      	ldr	r3, [pc, #336]	@ (8000c3c <HAL_ETH_MspInit+0x188>)
 8000aea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000aee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000af2:	623b      	str	r3, [r7, #32]
 8000af4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000af6:	4b51      	ldr	r3, [pc, #324]	@ (8000c3c <HAL_ETH_MspInit+0x188>)
 8000af8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000afc:	4a4f      	ldr	r2, [pc, #316]	@ (8000c3c <HAL_ETH_MspInit+0x188>)
 8000afe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b02:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000b06:	4b4d      	ldr	r3, [pc, #308]	@ (8000c3c <HAL_ETH_MspInit+0x188>)
 8000b08:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b10:	61fb      	str	r3, [r7, #28]
 8000b12:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000b14:	4b49      	ldr	r3, [pc, #292]	@ (8000c3c <HAL_ETH_MspInit+0x188>)
 8000b16:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b1a:	4a48      	ldr	r2, [pc, #288]	@ (8000c3c <HAL_ETH_MspInit+0x188>)
 8000b1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b20:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000b24:	4b45      	ldr	r3, [pc, #276]	@ (8000c3c <HAL_ETH_MspInit+0x188>)
 8000b26:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b2e:	61bb      	str	r3, [r7, #24]
 8000b30:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b32:	4b42      	ldr	r3, [pc, #264]	@ (8000c3c <HAL_ETH_MspInit+0x188>)
 8000b34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b38:	4a40      	ldr	r2, [pc, #256]	@ (8000c3c <HAL_ETH_MspInit+0x188>)
 8000b3a:	f043 0304 	orr.w	r3, r3, #4
 8000b3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b42:	4b3e      	ldr	r3, [pc, #248]	@ (8000c3c <HAL_ETH_MspInit+0x188>)
 8000b44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b48:	f003 0304 	and.w	r3, r3, #4
 8000b4c:	617b      	str	r3, [r7, #20]
 8000b4e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b50:	4b3a      	ldr	r3, [pc, #232]	@ (8000c3c <HAL_ETH_MspInit+0x188>)
 8000b52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b56:	4a39      	ldr	r2, [pc, #228]	@ (8000c3c <HAL_ETH_MspInit+0x188>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b60:	4b36      	ldr	r3, [pc, #216]	@ (8000c3c <HAL_ETH_MspInit+0x188>)
 8000b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	613b      	str	r3, [r7, #16]
 8000b6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6e:	4b33      	ldr	r3, [pc, #204]	@ (8000c3c <HAL_ETH_MspInit+0x188>)
 8000b70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b74:	4a31      	ldr	r2, [pc, #196]	@ (8000c3c <HAL_ETH_MspInit+0x188>)
 8000b76:	f043 0302 	orr.w	r3, r3, #2
 8000b7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b7e:	4b2f      	ldr	r3, [pc, #188]	@ (8000c3c <HAL_ETH_MspInit+0x188>)
 8000b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b84:	f003 0302 	and.w	r3, r3, #2
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b8c:	4b2b      	ldr	r3, [pc, #172]	@ (8000c3c <HAL_ETH_MspInit+0x188>)
 8000b8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b92:	4a2a      	ldr	r2, [pc, #168]	@ (8000c3c <HAL_ETH_MspInit+0x188>)
 8000b94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b9c:	4b27      	ldr	r3, [pc, #156]	@ (8000c3c <HAL_ETH_MspInit+0x188>)
 8000b9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ba2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ba6:	60bb      	str	r3, [r7, #8]
 8000ba8:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000baa:	2332      	movs	r3, #50	@ 0x32
 8000bac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bba:	230b      	movs	r3, #11
 8000bbc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	481e      	ldr	r0, [pc, #120]	@ (8000c40 <HAL_ETH_MspInit+0x18c>)
 8000bc6:	f001 fd9b 	bl	8002700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000bca:	2386      	movs	r3, #134	@ 0x86
 8000bcc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bda:	230b      	movs	r3, #11
 8000bdc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000be2:	4619      	mov	r1, r3
 8000be4:	4817      	ldr	r0, [pc, #92]	@ (8000c44 <HAL_ETH_MspInit+0x190>)
 8000be6:	f001 fd8b 	bl	8002700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000bea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bfc:	230b      	movs	r3, #11
 8000bfe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c04:	4619      	mov	r1, r3
 8000c06:	4810      	ldr	r0, [pc, #64]	@ (8000c48 <HAL_ETH_MspInit+0x194>)
 8000c08:	f001 fd7a 	bl	8002700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000c0c:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000c10:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c12:	2302      	movs	r3, #2
 8000c14:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c1e:	230b      	movs	r3, #11
 8000c20:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c26:	4619      	mov	r1, r3
 8000c28:	4808      	ldr	r0, [pc, #32]	@ (8000c4c <HAL_ETH_MspInit+0x198>)
 8000c2a:	f001 fd69 	bl	8002700 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000c2e:	bf00      	nop
 8000c30:	3738      	adds	r7, #56	@ 0x38
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40028000 	.word	0x40028000
 8000c3c:	58024400 	.word	0x58024400
 8000c40:	58020800 	.word	0x58020800
 8000c44:	58020000 	.word	0x58020000
 8000c48:	58020400 	.word	0x58020400
 8000c4c:	58021800 	.word	0x58021800

08000c50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b0ba      	sub	sp, #232	@ 0xe8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c68:	f107 0310 	add.w	r3, r7, #16
 8000c6c:	22c0      	movs	r2, #192	@ 0xc0
 8000c6e:	2100      	movs	r1, #0
 8000c70:	4618      	mov	r0, r3
 8000c72:	f007 fd42 	bl	80086fa <memset>
  if(huart->Instance==USART3)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a2b      	ldr	r2, [pc, #172]	@ (8000d28 <HAL_UART_MspInit+0xd8>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d14e      	bne.n	8000d1e <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c80:	f04f 0202 	mov.w	r2, #2
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c92:	f107 0310 	add.w	r3, r7, #16
 8000c96:	4618      	mov	r0, r3
 8000c98:	f003 f85c 	bl	8003d54 <HAL_RCCEx_PeriphCLKConfig>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000ca2:	f7ff fee7 	bl	8000a74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ca6:	4b21      	ldr	r3, [pc, #132]	@ (8000d2c <HAL_UART_MspInit+0xdc>)
 8000ca8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000cac:	4a1f      	ldr	r2, [pc, #124]	@ (8000d2c <HAL_UART_MspInit+0xdc>)
 8000cae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000cb2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000cb6:	4b1d      	ldr	r3, [pc, #116]	@ (8000d2c <HAL_UART_MspInit+0xdc>)
 8000cb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000cbc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cc4:	4b19      	ldr	r3, [pc, #100]	@ (8000d2c <HAL_UART_MspInit+0xdc>)
 8000cc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cca:	4a18      	ldr	r2, [pc, #96]	@ (8000d2c <HAL_UART_MspInit+0xdc>)
 8000ccc:	f043 0308 	orr.w	r3, r3, #8
 8000cd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cd4:	4b15      	ldr	r3, [pc, #84]	@ (8000d2c <HAL_UART_MspInit+0xdc>)
 8000cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cda:	f003 0308 	and.w	r3, r3, #8
 8000cde:	60bb      	str	r3, [r7, #8]
 8000ce0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ce2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ce6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cea:	2302      	movs	r3, #2
 8000cec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cfc:	2307      	movs	r3, #7
 8000cfe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d02:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d06:	4619      	mov	r1, r3
 8000d08:	4809      	ldr	r0, [pc, #36]	@ (8000d30 <HAL_UART_MspInit+0xe0>)
 8000d0a:	f001 fcf9 	bl	8002700 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2100      	movs	r1, #0
 8000d12:	2027      	movs	r0, #39	@ 0x27
 8000d14:	f000 fb27 	bl	8001366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000d18:	2027      	movs	r0, #39	@ 0x27
 8000d1a:	f000 fb3e 	bl	800139a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000d1e:	bf00      	nop
 8000d20:	37e8      	adds	r7, #232	@ 0xe8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40004800 	.word	0x40004800
 8000d2c:	58024400 	.word	0x58024400
 8000d30:	58020c00 	.word	0x58020c00

08000d34 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b0ba      	sub	sp, #232	@ 0xe8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d4c:	f107 0310 	add.w	r3, r7, #16
 8000d50:	22c0      	movs	r2, #192	@ 0xc0
 8000d52:	2100      	movs	r1, #0
 8000d54:	4618      	mov	r0, r3
 8000d56:	f007 fcd0 	bl	80086fa <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a30      	ldr	r2, [pc, #192]	@ (8000e20 <HAL_PCD_MspInit+0xec>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d159      	bne.n	8000e18 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000d64:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000d68:	f04f 0300 	mov.w	r3, #0
 8000d6c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000d70:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000d74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d78:	f107 0310 	add.w	r3, r7, #16
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f002 ffe9 	bl	8003d54 <HAL_RCCEx_PeriphCLKConfig>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8000d88:	f7ff fe74 	bl	8000a74 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000d8c:	f001 ffec 	bl	8002d68 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d90:	4b24      	ldr	r3, [pc, #144]	@ (8000e24 <HAL_PCD_MspInit+0xf0>)
 8000d92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d96:	4a23      	ldr	r2, [pc, #140]	@ (8000e24 <HAL_PCD_MspInit+0xf0>)
 8000d98:	f043 0301 	orr.w	r3, r3, #1
 8000d9c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000da0:	4b20      	ldr	r3, [pc, #128]	@ (8000e24 <HAL_PCD_MspInit+0xf0>)
 8000da2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000dae:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000db2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db6:	2302      	movs	r3, #2
 8000db8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000dc8:	230a      	movs	r3, #10
 8000dca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dce:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4814      	ldr	r0, [pc, #80]	@ (8000e28 <HAL_PCD_MspInit+0xf4>)
 8000dd6:	f001 fc93 	bl	8002700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000dda:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000dde:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000de2:	2300      	movs	r3, #0
 8000de4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dee:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000df2:	4619      	mov	r1, r3
 8000df4:	480c      	ldr	r0, [pc, #48]	@ (8000e28 <HAL_PCD_MspInit+0xf4>)
 8000df6:	f001 fc83 	bl	8002700 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8000e24 <HAL_PCD_MspInit+0xf0>)
 8000dfc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e00:	4a08      	ldr	r2, [pc, #32]	@ (8000e24 <HAL_PCD_MspInit+0xf0>)
 8000e02:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000e06:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e0a:	4b06      	ldr	r3, [pc, #24]	@ (8000e24 <HAL_PCD_MspInit+0xf0>)
 8000e0c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000e14:	60bb      	str	r3, [r7, #8]
 8000e16:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000e18:	bf00      	nop
 8000e1a:	37e8      	adds	r7, #232	@ 0xe8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40080000 	.word	0x40080000
 8000e24:	58024400 	.word	0x58024400
 8000e28:	58020000 	.word	0x58020000

08000e2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e30:	bf00      	nop
 8000e32:	e7fd      	b.n	8000e30 <NMI_Handler+0x4>

08000e34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e38:	bf00      	nop
 8000e3a:	e7fd      	b.n	8000e38 <HardFault_Handler+0x4>

08000e3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e40:	bf00      	nop
 8000e42:	e7fd      	b.n	8000e40 <MemManage_Handler+0x4>

08000e44 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e48:	bf00      	nop
 8000e4a:	e7fd      	b.n	8000e48 <BusFault_Handler+0x4>

08000e4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e50:	bf00      	nop
 8000e52:	e7fd      	b.n	8000e50 <UsageFault_Handler+0x4>

08000e54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr

08000e62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr

08000e7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e82:	f000 f931 	bl	80010e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
	...

08000e8c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000e90:	4802      	ldr	r0, [pc, #8]	@ (8000e9c <USART3_IRQHandler+0x10>)
 8000e92:	f004 fe27 	bl	8005ae4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	240001d8 	.word	0x240001d8

08000ea0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000ea0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ed8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ea4:	f000 f826 	bl	8000ef4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ea8:	480c      	ldr	r0, [pc, #48]	@ (8000edc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000eaa:	490d      	ldr	r1, [pc, #52]	@ (8000ee0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000eac:	4a0d      	ldr	r2, [pc, #52]	@ (8000ee4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000eae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eb0:	e002      	b.n	8000eb8 <LoopCopyDataInit>

08000eb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eb6:	3304      	adds	r3, #4

08000eb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ebc:	d3f9      	bcc.n	8000eb2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ebe:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ec0:	4c0a      	ldr	r4, [pc, #40]	@ (8000eec <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ec2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec4:	e001      	b.n	8000eca <LoopFillZerobss>

08000ec6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ec6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec8:	3204      	adds	r2, #4

08000eca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ecc:	d3fb      	bcc.n	8000ec6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ece:	f007 fc1d 	bl	800870c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ed2:	f7ff fb79 	bl	80005c8 <main>
  bx  lr
 8000ed6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ed8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000edc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000ee0:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8000ee4:	080087b4 	.word	0x080087b4
  ldr r2, =_sbss
 8000ee8:	240000d4 	.word	0x240000d4
  ldr r4, =_ebss
 8000eec:	24000768 	.word	0x24000768

08000ef0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ef0:	e7fe      	b.n	8000ef0 <ADC3_IRQHandler>
	...

08000ef4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ef8:	4b37      	ldr	r3, [pc, #220]	@ (8000fd8 <SystemInit+0xe4>)
 8000efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000efe:	4a36      	ldr	r2, [pc, #216]	@ (8000fd8 <SystemInit+0xe4>)
 8000f00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f08:	4b34      	ldr	r3, [pc, #208]	@ (8000fdc <SystemInit+0xe8>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f003 030f 	and.w	r3, r3, #15
 8000f10:	2b06      	cmp	r3, #6
 8000f12:	d807      	bhi.n	8000f24 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f14:	4b31      	ldr	r3, [pc, #196]	@ (8000fdc <SystemInit+0xe8>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f023 030f 	bic.w	r3, r3, #15
 8000f1c:	4a2f      	ldr	r2, [pc, #188]	@ (8000fdc <SystemInit+0xe8>)
 8000f1e:	f043 0307 	orr.w	r3, r3, #7
 8000f22:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000f24:	4b2e      	ldr	r3, [pc, #184]	@ (8000fe0 <SystemInit+0xec>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a2d      	ldr	r2, [pc, #180]	@ (8000fe0 <SystemInit+0xec>)
 8000f2a:	f043 0301 	orr.w	r3, r3, #1
 8000f2e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f30:	4b2b      	ldr	r3, [pc, #172]	@ (8000fe0 <SystemInit+0xec>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f36:	4b2a      	ldr	r3, [pc, #168]	@ (8000fe0 <SystemInit+0xec>)
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	4929      	ldr	r1, [pc, #164]	@ (8000fe0 <SystemInit+0xec>)
 8000f3c:	4b29      	ldr	r3, [pc, #164]	@ (8000fe4 <SystemInit+0xf0>)
 8000f3e:	4013      	ands	r3, r2
 8000f40:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f42:	4b26      	ldr	r3, [pc, #152]	@ (8000fdc <SystemInit+0xe8>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f003 0308 	and.w	r3, r3, #8
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d007      	beq.n	8000f5e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f4e:	4b23      	ldr	r3, [pc, #140]	@ (8000fdc <SystemInit+0xe8>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f023 030f 	bic.w	r3, r3, #15
 8000f56:	4a21      	ldr	r2, [pc, #132]	@ (8000fdc <SystemInit+0xe8>)
 8000f58:	f043 0307 	orr.w	r3, r3, #7
 8000f5c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000f5e:	4b20      	ldr	r3, [pc, #128]	@ (8000fe0 <SystemInit+0xec>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000f64:	4b1e      	ldr	r3, [pc, #120]	@ (8000fe0 <SystemInit+0xec>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000f6a:	4b1d      	ldr	r3, [pc, #116]	@ (8000fe0 <SystemInit+0xec>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000f70:	4b1b      	ldr	r3, [pc, #108]	@ (8000fe0 <SystemInit+0xec>)
 8000f72:	4a1d      	ldr	r2, [pc, #116]	@ (8000fe8 <SystemInit+0xf4>)
 8000f74:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000f76:	4b1a      	ldr	r3, [pc, #104]	@ (8000fe0 <SystemInit+0xec>)
 8000f78:	4a1c      	ldr	r2, [pc, #112]	@ (8000fec <SystemInit+0xf8>)
 8000f7a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000f7c:	4b18      	ldr	r3, [pc, #96]	@ (8000fe0 <SystemInit+0xec>)
 8000f7e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ff0 <SystemInit+0xfc>)
 8000f80:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000f82:	4b17      	ldr	r3, [pc, #92]	@ (8000fe0 <SystemInit+0xec>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000f88:	4b15      	ldr	r3, [pc, #84]	@ (8000fe0 <SystemInit+0xec>)
 8000f8a:	4a19      	ldr	r2, [pc, #100]	@ (8000ff0 <SystemInit+0xfc>)
 8000f8c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000f8e:	4b14      	ldr	r3, [pc, #80]	@ (8000fe0 <SystemInit+0xec>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000f94:	4b12      	ldr	r3, [pc, #72]	@ (8000fe0 <SystemInit+0xec>)
 8000f96:	4a16      	ldr	r2, [pc, #88]	@ (8000ff0 <SystemInit+0xfc>)
 8000f98:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000f9a:	4b11      	ldr	r3, [pc, #68]	@ (8000fe0 <SystemInit+0xec>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000fa0:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe0 <SystemInit+0xec>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a0e      	ldr	r2, [pc, #56]	@ (8000fe0 <SystemInit+0xec>)
 8000fa6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000faa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000fac:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe0 <SystemInit+0xec>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000fb2:	4b10      	ldr	r3, [pc, #64]	@ (8000ff4 <SystemInit+0x100>)
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	4b10      	ldr	r3, [pc, #64]	@ (8000ff8 <SystemInit+0x104>)
 8000fb8:	4013      	ands	r3, r2
 8000fba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000fbe:	d202      	bcs.n	8000fc6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000fc0:	4b0e      	ldr	r3, [pc, #56]	@ (8000ffc <SystemInit+0x108>)
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000fc6:	4b0e      	ldr	r3, [pc, #56]	@ (8001000 <SystemInit+0x10c>)
 8000fc8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000fcc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000fce:	bf00      	nop
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	e000ed00 	.word	0xe000ed00
 8000fdc:	52002000 	.word	0x52002000
 8000fe0:	58024400 	.word	0x58024400
 8000fe4:	eaf6ed7f 	.word	0xeaf6ed7f
 8000fe8:	02020200 	.word	0x02020200
 8000fec:	01ff0000 	.word	0x01ff0000
 8000ff0:	01010280 	.word	0x01010280
 8000ff4:	5c001000 	.word	0x5c001000
 8000ff8:	ffff0000 	.word	0xffff0000
 8000ffc:	51008108 	.word	0x51008108
 8001000:	52004000 	.word	0x52004000

08001004 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800100a:	2003      	movs	r0, #3
 800100c:	f000 f9a0 	bl	8001350 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001010:	f002 fcca 	bl	80039a8 <HAL_RCC_GetSysClockFreq>
 8001014:	4602      	mov	r2, r0
 8001016:	4b15      	ldr	r3, [pc, #84]	@ (800106c <HAL_Init+0x68>)
 8001018:	699b      	ldr	r3, [r3, #24]
 800101a:	0a1b      	lsrs	r3, r3, #8
 800101c:	f003 030f 	and.w	r3, r3, #15
 8001020:	4913      	ldr	r1, [pc, #76]	@ (8001070 <HAL_Init+0x6c>)
 8001022:	5ccb      	ldrb	r3, [r1, r3]
 8001024:	f003 031f 	and.w	r3, r3, #31
 8001028:	fa22 f303 	lsr.w	r3, r2, r3
 800102c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800102e:	4b0f      	ldr	r3, [pc, #60]	@ (800106c <HAL_Init+0x68>)
 8001030:	699b      	ldr	r3, [r3, #24]
 8001032:	f003 030f 	and.w	r3, r3, #15
 8001036:	4a0e      	ldr	r2, [pc, #56]	@ (8001070 <HAL_Init+0x6c>)
 8001038:	5cd3      	ldrb	r3, [r2, r3]
 800103a:	f003 031f 	and.w	r3, r3, #31
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	fa22 f303 	lsr.w	r3, r2, r3
 8001044:	4a0b      	ldr	r2, [pc, #44]	@ (8001074 <HAL_Init+0x70>)
 8001046:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001048:	4a0b      	ldr	r2, [pc, #44]	@ (8001078 <HAL_Init+0x74>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800104e:	2000      	movs	r0, #0
 8001050:	f000 f814 	bl	800107c <HAL_InitTick>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e002      	b.n	8001064 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800105e:	f7ff fd0f 	bl	8000a80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001062:	2300      	movs	r3, #0
}
 8001064:	4618      	mov	r0, r3
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	58024400 	.word	0x58024400
 8001070:	0800876c 	.word	0x0800876c
 8001074:	24000008 	.word	0x24000008
 8001078:	24000004 	.word	0x24000004

0800107c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001084:	4b15      	ldr	r3, [pc, #84]	@ (80010dc <HAL_InitTick+0x60>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d101      	bne.n	8001090 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	e021      	b.n	80010d4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001090:	4b13      	ldr	r3, [pc, #76]	@ (80010e0 <HAL_InitTick+0x64>)
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	4b11      	ldr	r3, [pc, #68]	@ (80010dc <HAL_InitTick+0x60>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	4619      	mov	r1, r3
 800109a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800109e:	fbb3 f3f1 	udiv	r3, r3, r1
 80010a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010a6:	4618      	mov	r0, r3
 80010a8:	f000 f985 	bl	80013b6 <HAL_SYSTICK_Config>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e00e      	b.n	80010d4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2b0f      	cmp	r3, #15
 80010ba:	d80a      	bhi.n	80010d2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010bc:	2200      	movs	r2, #0
 80010be:	6879      	ldr	r1, [r7, #4]
 80010c0:	f04f 30ff 	mov.w	r0, #4294967295
 80010c4:	f000 f94f 	bl	8001366 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010c8:	4a06      	ldr	r2, [pc, #24]	@ (80010e4 <HAL_InitTick+0x68>)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ce:	2300      	movs	r3, #0
 80010d0:	e000      	b.n	80010d4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	24000010 	.word	0x24000010
 80010e0:	24000004 	.word	0x24000004
 80010e4:	2400000c 	.word	0x2400000c

080010e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010ec:	4b06      	ldr	r3, [pc, #24]	@ (8001108 <HAL_IncTick+0x20>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	461a      	mov	r2, r3
 80010f2:	4b06      	ldr	r3, [pc, #24]	@ (800110c <HAL_IncTick+0x24>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4413      	add	r3, r2
 80010f8:	4a04      	ldr	r2, [pc, #16]	@ (800110c <HAL_IncTick+0x24>)
 80010fa:	6013      	str	r3, [r2, #0]
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	24000010 	.word	0x24000010
 800110c:	24000764 	.word	0x24000764

08001110 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  return uwTick;
 8001114:	4b03      	ldr	r3, [pc, #12]	@ (8001124 <HAL_GetTick+0x14>)
 8001116:	681b      	ldr	r3, [r3, #0]
}
 8001118:	4618      	mov	r0, r3
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	24000764 	.word	0x24000764

08001128 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001130:	f7ff ffee 	bl	8001110 <HAL_GetTick>
 8001134:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001140:	d005      	beq.n	800114e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001142:	4b0a      	ldr	r3, [pc, #40]	@ (800116c <HAL_Delay+0x44>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	461a      	mov	r2, r3
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	4413      	add	r3, r2
 800114c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800114e:	bf00      	nop
 8001150:	f7ff ffde 	bl	8001110 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	68fa      	ldr	r2, [r7, #12]
 800115c:	429a      	cmp	r2, r3
 800115e:	d8f7      	bhi.n	8001150 <HAL_Delay+0x28>
  {
  }
}
 8001160:	bf00      	nop
 8001162:	bf00      	nop
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	24000010 	.word	0x24000010

08001170 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001174:	4b03      	ldr	r3, [pc, #12]	@ (8001184 <HAL_GetREVID+0x14>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	0c1b      	lsrs	r3, r3, #16
}
 800117a:	4618      	mov	r0, r3
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	5c001000 	.word	0x5c001000

08001188 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001190:	4b06      	ldr	r3, [pc, #24]	@ (80011ac <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001198:	4904      	ldr	r1, [pc, #16]	@ (80011ac <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4313      	orrs	r3, r2
 800119e:	604b      	str	r3, [r1, #4]
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	58000400 	.word	0x58000400

080011b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011c0:	4b0b      	ldr	r3, [pc, #44]	@ (80011f0 <__NVIC_SetPriorityGrouping+0x40>)
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011c6:	68ba      	ldr	r2, [r7, #8]
 80011c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011cc:	4013      	ands	r3, r2
 80011ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011d8:	4b06      	ldr	r3, [pc, #24]	@ (80011f4 <__NVIC_SetPriorityGrouping+0x44>)
 80011da:	4313      	orrs	r3, r2
 80011dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011de:	4a04      	ldr	r2, [pc, #16]	@ (80011f0 <__NVIC_SetPriorityGrouping+0x40>)
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	60d3      	str	r3, [r2, #12]
}
 80011e4:	bf00      	nop
 80011e6:	3714      	adds	r7, #20
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	e000ed00 	.word	0xe000ed00
 80011f4:	05fa0000 	.word	0x05fa0000

080011f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011fc:	4b04      	ldr	r3, [pc, #16]	@ (8001210 <__NVIC_GetPriorityGrouping+0x18>)
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	0a1b      	lsrs	r3, r3, #8
 8001202:	f003 0307 	and.w	r3, r3, #7
}
 8001206:	4618      	mov	r0, r3
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800121e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001222:	2b00      	cmp	r3, #0
 8001224:	db0b      	blt.n	800123e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001226:	88fb      	ldrh	r3, [r7, #6]
 8001228:	f003 021f 	and.w	r2, r3, #31
 800122c:	4907      	ldr	r1, [pc, #28]	@ (800124c <__NVIC_EnableIRQ+0x38>)
 800122e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001232:	095b      	lsrs	r3, r3, #5
 8001234:	2001      	movs	r0, #1
 8001236:	fa00 f202 	lsl.w	r2, r0, r2
 800123a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	e000e100 	.word	0xe000e100

08001250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	6039      	str	r1, [r7, #0]
 800125a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800125c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001260:	2b00      	cmp	r3, #0
 8001262:	db0a      	blt.n	800127a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	b2da      	uxtb	r2, r3
 8001268:	490c      	ldr	r1, [pc, #48]	@ (800129c <__NVIC_SetPriority+0x4c>)
 800126a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800126e:	0112      	lsls	r2, r2, #4
 8001270:	b2d2      	uxtb	r2, r2
 8001272:	440b      	add	r3, r1
 8001274:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001278:	e00a      	b.n	8001290 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	b2da      	uxtb	r2, r3
 800127e:	4908      	ldr	r1, [pc, #32]	@ (80012a0 <__NVIC_SetPriority+0x50>)
 8001280:	88fb      	ldrh	r3, [r7, #6]
 8001282:	f003 030f 	and.w	r3, r3, #15
 8001286:	3b04      	subs	r3, #4
 8001288:	0112      	lsls	r2, r2, #4
 800128a:	b2d2      	uxtb	r2, r2
 800128c:	440b      	add	r3, r1
 800128e:	761a      	strb	r2, [r3, #24]
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	e000e100 	.word	0xe000e100
 80012a0:	e000ed00 	.word	0xe000ed00

080012a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b089      	sub	sp, #36	@ 0x24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	f1c3 0307 	rsb	r3, r3, #7
 80012be:	2b04      	cmp	r3, #4
 80012c0:	bf28      	it	cs
 80012c2:	2304      	movcs	r3, #4
 80012c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	3304      	adds	r3, #4
 80012ca:	2b06      	cmp	r3, #6
 80012cc:	d902      	bls.n	80012d4 <NVIC_EncodePriority+0x30>
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	3b03      	subs	r3, #3
 80012d2:	e000      	b.n	80012d6 <NVIC_EncodePriority+0x32>
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d8:	f04f 32ff 	mov.w	r2, #4294967295
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	43da      	mvns	r2, r3
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	401a      	ands	r2, r3
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012ec:	f04f 31ff 	mov.w	r1, #4294967295
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	fa01 f303 	lsl.w	r3, r1, r3
 80012f6:	43d9      	mvns	r1, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012fc:	4313      	orrs	r3, r2
         );
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3724      	adds	r7, #36	@ 0x24
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
	...

0800130c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	3b01      	subs	r3, #1
 8001318:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800131c:	d301      	bcc.n	8001322 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800131e:	2301      	movs	r3, #1
 8001320:	e00f      	b.n	8001342 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001322:	4a0a      	ldr	r2, [pc, #40]	@ (800134c <SysTick_Config+0x40>)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	3b01      	subs	r3, #1
 8001328:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800132a:	210f      	movs	r1, #15
 800132c:	f04f 30ff 	mov.w	r0, #4294967295
 8001330:	f7ff ff8e 	bl	8001250 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001334:	4b05      	ldr	r3, [pc, #20]	@ (800134c <SysTick_Config+0x40>)
 8001336:	2200      	movs	r2, #0
 8001338:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800133a:	4b04      	ldr	r3, [pc, #16]	@ (800134c <SysTick_Config+0x40>)
 800133c:	2207      	movs	r2, #7
 800133e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001340:	2300      	movs	r3, #0
}
 8001342:	4618      	mov	r0, r3
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	e000e010 	.word	0xe000e010

08001350 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7ff ff29 	bl	80011b0 <__NVIC_SetPriorityGrouping>
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b086      	sub	sp, #24
 800136a:	af00      	add	r7, sp, #0
 800136c:	4603      	mov	r3, r0
 800136e:	60b9      	str	r1, [r7, #8]
 8001370:	607a      	str	r2, [r7, #4]
 8001372:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001374:	f7ff ff40 	bl	80011f8 <__NVIC_GetPriorityGrouping>
 8001378:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	68b9      	ldr	r1, [r7, #8]
 800137e:	6978      	ldr	r0, [r7, #20]
 8001380:	f7ff ff90 	bl	80012a4 <NVIC_EncodePriority>
 8001384:	4602      	mov	r2, r0
 8001386:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800138a:	4611      	mov	r1, r2
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff ff5f 	bl	8001250 <__NVIC_SetPriority>
}
 8001392:	bf00      	nop
 8001394:	3718      	adds	r7, #24
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b082      	sub	sp, #8
 800139e:	af00      	add	r7, sp, #0
 80013a0:	4603      	mov	r3, r0
 80013a2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff ff33 	bl	8001214 <__NVIC_EnableIRQ>
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7ff ffa4 	bl	800130c <SysTick_Config>
 80013c4:	4603      	mov	r3, r0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
	...

080013d0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80013d8:	f7ff fe9a 	bl	8001110 <HAL_GetTick>
 80013dc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d101      	bne.n	80013e8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e2dc      	b.n	80019a2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d008      	beq.n	8001406 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2280      	movs	r2, #128	@ 0x80
 80013f8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2200      	movs	r2, #0
 80013fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e2cd      	b.n	80019a2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a76      	ldr	r2, [pc, #472]	@ (80015e4 <HAL_DMA_Abort+0x214>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d04a      	beq.n	80014a6 <HAL_DMA_Abort+0xd6>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a74      	ldr	r2, [pc, #464]	@ (80015e8 <HAL_DMA_Abort+0x218>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d045      	beq.n	80014a6 <HAL_DMA_Abort+0xd6>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a73      	ldr	r2, [pc, #460]	@ (80015ec <HAL_DMA_Abort+0x21c>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d040      	beq.n	80014a6 <HAL_DMA_Abort+0xd6>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a71      	ldr	r2, [pc, #452]	@ (80015f0 <HAL_DMA_Abort+0x220>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d03b      	beq.n	80014a6 <HAL_DMA_Abort+0xd6>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a70      	ldr	r2, [pc, #448]	@ (80015f4 <HAL_DMA_Abort+0x224>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d036      	beq.n	80014a6 <HAL_DMA_Abort+0xd6>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a6e      	ldr	r2, [pc, #440]	@ (80015f8 <HAL_DMA_Abort+0x228>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d031      	beq.n	80014a6 <HAL_DMA_Abort+0xd6>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a6d      	ldr	r2, [pc, #436]	@ (80015fc <HAL_DMA_Abort+0x22c>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d02c      	beq.n	80014a6 <HAL_DMA_Abort+0xd6>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a6b      	ldr	r2, [pc, #428]	@ (8001600 <HAL_DMA_Abort+0x230>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d027      	beq.n	80014a6 <HAL_DMA_Abort+0xd6>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a6a      	ldr	r2, [pc, #424]	@ (8001604 <HAL_DMA_Abort+0x234>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d022      	beq.n	80014a6 <HAL_DMA_Abort+0xd6>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a68      	ldr	r2, [pc, #416]	@ (8001608 <HAL_DMA_Abort+0x238>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d01d      	beq.n	80014a6 <HAL_DMA_Abort+0xd6>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a67      	ldr	r2, [pc, #412]	@ (800160c <HAL_DMA_Abort+0x23c>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d018      	beq.n	80014a6 <HAL_DMA_Abort+0xd6>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a65      	ldr	r2, [pc, #404]	@ (8001610 <HAL_DMA_Abort+0x240>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d013      	beq.n	80014a6 <HAL_DMA_Abort+0xd6>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a64      	ldr	r2, [pc, #400]	@ (8001614 <HAL_DMA_Abort+0x244>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d00e      	beq.n	80014a6 <HAL_DMA_Abort+0xd6>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a62      	ldr	r2, [pc, #392]	@ (8001618 <HAL_DMA_Abort+0x248>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d009      	beq.n	80014a6 <HAL_DMA_Abort+0xd6>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a61      	ldr	r2, [pc, #388]	@ (800161c <HAL_DMA_Abort+0x24c>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d004      	beq.n	80014a6 <HAL_DMA_Abort+0xd6>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a5f      	ldr	r2, [pc, #380]	@ (8001620 <HAL_DMA_Abort+0x250>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d101      	bne.n	80014aa <HAL_DMA_Abort+0xda>
 80014a6:	2301      	movs	r3, #1
 80014a8:	e000      	b.n	80014ac <HAL_DMA_Abort+0xdc>
 80014aa:	2300      	movs	r3, #0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d013      	beq.n	80014d8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f022 021e 	bic.w	r2, r2, #30
 80014be:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	695a      	ldr	r2, [r3, #20]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80014ce:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	617b      	str	r3, [r7, #20]
 80014d6:	e00a      	b.n	80014ee <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f022 020e 	bic.w	r2, r2, #14
 80014e6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a3c      	ldr	r2, [pc, #240]	@ (80015e4 <HAL_DMA_Abort+0x214>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d072      	beq.n	80015de <HAL_DMA_Abort+0x20e>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a3a      	ldr	r2, [pc, #232]	@ (80015e8 <HAL_DMA_Abort+0x218>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d06d      	beq.n	80015de <HAL_DMA_Abort+0x20e>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a39      	ldr	r2, [pc, #228]	@ (80015ec <HAL_DMA_Abort+0x21c>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d068      	beq.n	80015de <HAL_DMA_Abort+0x20e>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a37      	ldr	r2, [pc, #220]	@ (80015f0 <HAL_DMA_Abort+0x220>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d063      	beq.n	80015de <HAL_DMA_Abort+0x20e>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a36      	ldr	r2, [pc, #216]	@ (80015f4 <HAL_DMA_Abort+0x224>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d05e      	beq.n	80015de <HAL_DMA_Abort+0x20e>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a34      	ldr	r2, [pc, #208]	@ (80015f8 <HAL_DMA_Abort+0x228>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d059      	beq.n	80015de <HAL_DMA_Abort+0x20e>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a33      	ldr	r2, [pc, #204]	@ (80015fc <HAL_DMA_Abort+0x22c>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d054      	beq.n	80015de <HAL_DMA_Abort+0x20e>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a31      	ldr	r2, [pc, #196]	@ (8001600 <HAL_DMA_Abort+0x230>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d04f      	beq.n	80015de <HAL_DMA_Abort+0x20e>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a30      	ldr	r2, [pc, #192]	@ (8001604 <HAL_DMA_Abort+0x234>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d04a      	beq.n	80015de <HAL_DMA_Abort+0x20e>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a2e      	ldr	r2, [pc, #184]	@ (8001608 <HAL_DMA_Abort+0x238>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d045      	beq.n	80015de <HAL_DMA_Abort+0x20e>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a2d      	ldr	r2, [pc, #180]	@ (800160c <HAL_DMA_Abort+0x23c>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d040      	beq.n	80015de <HAL_DMA_Abort+0x20e>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a2b      	ldr	r2, [pc, #172]	@ (8001610 <HAL_DMA_Abort+0x240>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d03b      	beq.n	80015de <HAL_DMA_Abort+0x20e>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a2a      	ldr	r2, [pc, #168]	@ (8001614 <HAL_DMA_Abort+0x244>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d036      	beq.n	80015de <HAL_DMA_Abort+0x20e>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a28      	ldr	r2, [pc, #160]	@ (8001618 <HAL_DMA_Abort+0x248>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d031      	beq.n	80015de <HAL_DMA_Abort+0x20e>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a27      	ldr	r2, [pc, #156]	@ (800161c <HAL_DMA_Abort+0x24c>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d02c      	beq.n	80015de <HAL_DMA_Abort+0x20e>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a25      	ldr	r2, [pc, #148]	@ (8001620 <HAL_DMA_Abort+0x250>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d027      	beq.n	80015de <HAL_DMA_Abort+0x20e>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a24      	ldr	r2, [pc, #144]	@ (8001624 <HAL_DMA_Abort+0x254>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d022      	beq.n	80015de <HAL_DMA_Abort+0x20e>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a22      	ldr	r2, [pc, #136]	@ (8001628 <HAL_DMA_Abort+0x258>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d01d      	beq.n	80015de <HAL_DMA_Abort+0x20e>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a21      	ldr	r2, [pc, #132]	@ (800162c <HAL_DMA_Abort+0x25c>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d018      	beq.n	80015de <HAL_DMA_Abort+0x20e>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a1f      	ldr	r2, [pc, #124]	@ (8001630 <HAL_DMA_Abort+0x260>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d013      	beq.n	80015de <HAL_DMA_Abort+0x20e>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a1e      	ldr	r2, [pc, #120]	@ (8001634 <HAL_DMA_Abort+0x264>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d00e      	beq.n	80015de <HAL_DMA_Abort+0x20e>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a1c      	ldr	r2, [pc, #112]	@ (8001638 <HAL_DMA_Abort+0x268>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d009      	beq.n	80015de <HAL_DMA_Abort+0x20e>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a1b      	ldr	r2, [pc, #108]	@ (800163c <HAL_DMA_Abort+0x26c>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d004      	beq.n	80015de <HAL_DMA_Abort+0x20e>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a19      	ldr	r2, [pc, #100]	@ (8001640 <HAL_DMA_Abort+0x270>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d132      	bne.n	8001644 <HAL_DMA_Abort+0x274>
 80015de:	2301      	movs	r3, #1
 80015e0:	e031      	b.n	8001646 <HAL_DMA_Abort+0x276>
 80015e2:	bf00      	nop
 80015e4:	40020010 	.word	0x40020010
 80015e8:	40020028 	.word	0x40020028
 80015ec:	40020040 	.word	0x40020040
 80015f0:	40020058 	.word	0x40020058
 80015f4:	40020070 	.word	0x40020070
 80015f8:	40020088 	.word	0x40020088
 80015fc:	400200a0 	.word	0x400200a0
 8001600:	400200b8 	.word	0x400200b8
 8001604:	40020410 	.word	0x40020410
 8001608:	40020428 	.word	0x40020428
 800160c:	40020440 	.word	0x40020440
 8001610:	40020458 	.word	0x40020458
 8001614:	40020470 	.word	0x40020470
 8001618:	40020488 	.word	0x40020488
 800161c:	400204a0 	.word	0x400204a0
 8001620:	400204b8 	.word	0x400204b8
 8001624:	58025408 	.word	0x58025408
 8001628:	5802541c 	.word	0x5802541c
 800162c:	58025430 	.word	0x58025430
 8001630:	58025444 	.word	0x58025444
 8001634:	58025458 	.word	0x58025458
 8001638:	5802546c 	.word	0x5802546c
 800163c:	58025480 	.word	0x58025480
 8001640:	58025494 	.word	0x58025494
 8001644:	2300      	movs	r3, #0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d007      	beq.n	800165a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001654:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001658:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a6d      	ldr	r2, [pc, #436]	@ (8001814 <HAL_DMA_Abort+0x444>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d04a      	beq.n	80016fa <HAL_DMA_Abort+0x32a>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a6b      	ldr	r2, [pc, #428]	@ (8001818 <HAL_DMA_Abort+0x448>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d045      	beq.n	80016fa <HAL_DMA_Abort+0x32a>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a6a      	ldr	r2, [pc, #424]	@ (800181c <HAL_DMA_Abort+0x44c>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d040      	beq.n	80016fa <HAL_DMA_Abort+0x32a>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a68      	ldr	r2, [pc, #416]	@ (8001820 <HAL_DMA_Abort+0x450>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d03b      	beq.n	80016fa <HAL_DMA_Abort+0x32a>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a67      	ldr	r2, [pc, #412]	@ (8001824 <HAL_DMA_Abort+0x454>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d036      	beq.n	80016fa <HAL_DMA_Abort+0x32a>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a65      	ldr	r2, [pc, #404]	@ (8001828 <HAL_DMA_Abort+0x458>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d031      	beq.n	80016fa <HAL_DMA_Abort+0x32a>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a64      	ldr	r2, [pc, #400]	@ (800182c <HAL_DMA_Abort+0x45c>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d02c      	beq.n	80016fa <HAL_DMA_Abort+0x32a>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a62      	ldr	r2, [pc, #392]	@ (8001830 <HAL_DMA_Abort+0x460>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d027      	beq.n	80016fa <HAL_DMA_Abort+0x32a>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a61      	ldr	r2, [pc, #388]	@ (8001834 <HAL_DMA_Abort+0x464>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d022      	beq.n	80016fa <HAL_DMA_Abort+0x32a>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a5f      	ldr	r2, [pc, #380]	@ (8001838 <HAL_DMA_Abort+0x468>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d01d      	beq.n	80016fa <HAL_DMA_Abort+0x32a>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a5e      	ldr	r2, [pc, #376]	@ (800183c <HAL_DMA_Abort+0x46c>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d018      	beq.n	80016fa <HAL_DMA_Abort+0x32a>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a5c      	ldr	r2, [pc, #368]	@ (8001840 <HAL_DMA_Abort+0x470>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d013      	beq.n	80016fa <HAL_DMA_Abort+0x32a>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a5b      	ldr	r2, [pc, #364]	@ (8001844 <HAL_DMA_Abort+0x474>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d00e      	beq.n	80016fa <HAL_DMA_Abort+0x32a>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a59      	ldr	r2, [pc, #356]	@ (8001848 <HAL_DMA_Abort+0x478>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d009      	beq.n	80016fa <HAL_DMA_Abort+0x32a>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a58      	ldr	r2, [pc, #352]	@ (800184c <HAL_DMA_Abort+0x47c>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d004      	beq.n	80016fa <HAL_DMA_Abort+0x32a>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a56      	ldr	r2, [pc, #344]	@ (8001850 <HAL_DMA_Abort+0x480>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d108      	bne.n	800170c <HAL_DMA_Abort+0x33c>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f022 0201 	bic.w	r2, r2, #1
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	e007      	b.n	800171c <HAL_DMA_Abort+0x34c>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f022 0201 	bic.w	r2, r2, #1
 800171a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800171c:	e013      	b.n	8001746 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800171e:	f7ff fcf7 	bl	8001110 <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	2b05      	cmp	r3, #5
 800172a:	d90c      	bls.n	8001746 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2220      	movs	r2, #32
 8001730:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2203      	movs	r2, #3
 8001736:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e12d      	b.n	80019a2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1e5      	bne.n	800171e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a2f      	ldr	r2, [pc, #188]	@ (8001814 <HAL_DMA_Abort+0x444>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d04a      	beq.n	80017f2 <HAL_DMA_Abort+0x422>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a2d      	ldr	r2, [pc, #180]	@ (8001818 <HAL_DMA_Abort+0x448>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d045      	beq.n	80017f2 <HAL_DMA_Abort+0x422>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a2c      	ldr	r2, [pc, #176]	@ (800181c <HAL_DMA_Abort+0x44c>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d040      	beq.n	80017f2 <HAL_DMA_Abort+0x422>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a2a      	ldr	r2, [pc, #168]	@ (8001820 <HAL_DMA_Abort+0x450>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d03b      	beq.n	80017f2 <HAL_DMA_Abort+0x422>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a29      	ldr	r2, [pc, #164]	@ (8001824 <HAL_DMA_Abort+0x454>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d036      	beq.n	80017f2 <HAL_DMA_Abort+0x422>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a27      	ldr	r2, [pc, #156]	@ (8001828 <HAL_DMA_Abort+0x458>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d031      	beq.n	80017f2 <HAL_DMA_Abort+0x422>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a26      	ldr	r2, [pc, #152]	@ (800182c <HAL_DMA_Abort+0x45c>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d02c      	beq.n	80017f2 <HAL_DMA_Abort+0x422>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a24      	ldr	r2, [pc, #144]	@ (8001830 <HAL_DMA_Abort+0x460>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d027      	beq.n	80017f2 <HAL_DMA_Abort+0x422>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a23      	ldr	r2, [pc, #140]	@ (8001834 <HAL_DMA_Abort+0x464>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d022      	beq.n	80017f2 <HAL_DMA_Abort+0x422>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a21      	ldr	r2, [pc, #132]	@ (8001838 <HAL_DMA_Abort+0x468>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d01d      	beq.n	80017f2 <HAL_DMA_Abort+0x422>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a20      	ldr	r2, [pc, #128]	@ (800183c <HAL_DMA_Abort+0x46c>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d018      	beq.n	80017f2 <HAL_DMA_Abort+0x422>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a1e      	ldr	r2, [pc, #120]	@ (8001840 <HAL_DMA_Abort+0x470>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d013      	beq.n	80017f2 <HAL_DMA_Abort+0x422>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a1d      	ldr	r2, [pc, #116]	@ (8001844 <HAL_DMA_Abort+0x474>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d00e      	beq.n	80017f2 <HAL_DMA_Abort+0x422>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a1b      	ldr	r2, [pc, #108]	@ (8001848 <HAL_DMA_Abort+0x478>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d009      	beq.n	80017f2 <HAL_DMA_Abort+0x422>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a1a      	ldr	r2, [pc, #104]	@ (800184c <HAL_DMA_Abort+0x47c>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d004      	beq.n	80017f2 <HAL_DMA_Abort+0x422>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a18      	ldr	r2, [pc, #96]	@ (8001850 <HAL_DMA_Abort+0x480>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d101      	bne.n	80017f6 <HAL_DMA_Abort+0x426>
 80017f2:	2301      	movs	r3, #1
 80017f4:	e000      	b.n	80017f8 <HAL_DMA_Abort+0x428>
 80017f6:	2300      	movs	r3, #0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d02b      	beq.n	8001854 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001800:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001806:	f003 031f 	and.w	r3, r3, #31
 800180a:	223f      	movs	r2, #63	@ 0x3f
 800180c:	409a      	lsls	r2, r3
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	609a      	str	r2, [r3, #8]
 8001812:	e02a      	b.n	800186a <HAL_DMA_Abort+0x49a>
 8001814:	40020010 	.word	0x40020010
 8001818:	40020028 	.word	0x40020028
 800181c:	40020040 	.word	0x40020040
 8001820:	40020058 	.word	0x40020058
 8001824:	40020070 	.word	0x40020070
 8001828:	40020088 	.word	0x40020088
 800182c:	400200a0 	.word	0x400200a0
 8001830:	400200b8 	.word	0x400200b8
 8001834:	40020410 	.word	0x40020410
 8001838:	40020428 	.word	0x40020428
 800183c:	40020440 	.word	0x40020440
 8001840:	40020458 	.word	0x40020458
 8001844:	40020470 	.word	0x40020470
 8001848:	40020488 	.word	0x40020488
 800184c:	400204a0 	.word	0x400204a0
 8001850:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001858:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800185e:	f003 031f 	and.w	r3, r3, #31
 8001862:	2201      	movs	r2, #1
 8001864:	409a      	lsls	r2, r3
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a4f      	ldr	r2, [pc, #316]	@ (80019ac <HAL_DMA_Abort+0x5dc>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d072      	beq.n	800195a <HAL_DMA_Abort+0x58a>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a4d      	ldr	r2, [pc, #308]	@ (80019b0 <HAL_DMA_Abort+0x5e0>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d06d      	beq.n	800195a <HAL_DMA_Abort+0x58a>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a4c      	ldr	r2, [pc, #304]	@ (80019b4 <HAL_DMA_Abort+0x5e4>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d068      	beq.n	800195a <HAL_DMA_Abort+0x58a>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a4a      	ldr	r2, [pc, #296]	@ (80019b8 <HAL_DMA_Abort+0x5e8>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d063      	beq.n	800195a <HAL_DMA_Abort+0x58a>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a49      	ldr	r2, [pc, #292]	@ (80019bc <HAL_DMA_Abort+0x5ec>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d05e      	beq.n	800195a <HAL_DMA_Abort+0x58a>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a47      	ldr	r2, [pc, #284]	@ (80019c0 <HAL_DMA_Abort+0x5f0>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d059      	beq.n	800195a <HAL_DMA_Abort+0x58a>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a46      	ldr	r2, [pc, #280]	@ (80019c4 <HAL_DMA_Abort+0x5f4>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d054      	beq.n	800195a <HAL_DMA_Abort+0x58a>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a44      	ldr	r2, [pc, #272]	@ (80019c8 <HAL_DMA_Abort+0x5f8>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d04f      	beq.n	800195a <HAL_DMA_Abort+0x58a>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a43      	ldr	r2, [pc, #268]	@ (80019cc <HAL_DMA_Abort+0x5fc>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d04a      	beq.n	800195a <HAL_DMA_Abort+0x58a>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a41      	ldr	r2, [pc, #260]	@ (80019d0 <HAL_DMA_Abort+0x600>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d045      	beq.n	800195a <HAL_DMA_Abort+0x58a>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a40      	ldr	r2, [pc, #256]	@ (80019d4 <HAL_DMA_Abort+0x604>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d040      	beq.n	800195a <HAL_DMA_Abort+0x58a>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a3e      	ldr	r2, [pc, #248]	@ (80019d8 <HAL_DMA_Abort+0x608>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d03b      	beq.n	800195a <HAL_DMA_Abort+0x58a>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a3d      	ldr	r2, [pc, #244]	@ (80019dc <HAL_DMA_Abort+0x60c>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d036      	beq.n	800195a <HAL_DMA_Abort+0x58a>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a3b      	ldr	r2, [pc, #236]	@ (80019e0 <HAL_DMA_Abort+0x610>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d031      	beq.n	800195a <HAL_DMA_Abort+0x58a>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a3a      	ldr	r2, [pc, #232]	@ (80019e4 <HAL_DMA_Abort+0x614>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d02c      	beq.n	800195a <HAL_DMA_Abort+0x58a>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a38      	ldr	r2, [pc, #224]	@ (80019e8 <HAL_DMA_Abort+0x618>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d027      	beq.n	800195a <HAL_DMA_Abort+0x58a>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a37      	ldr	r2, [pc, #220]	@ (80019ec <HAL_DMA_Abort+0x61c>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d022      	beq.n	800195a <HAL_DMA_Abort+0x58a>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a35      	ldr	r2, [pc, #212]	@ (80019f0 <HAL_DMA_Abort+0x620>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d01d      	beq.n	800195a <HAL_DMA_Abort+0x58a>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a34      	ldr	r2, [pc, #208]	@ (80019f4 <HAL_DMA_Abort+0x624>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d018      	beq.n	800195a <HAL_DMA_Abort+0x58a>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a32      	ldr	r2, [pc, #200]	@ (80019f8 <HAL_DMA_Abort+0x628>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d013      	beq.n	800195a <HAL_DMA_Abort+0x58a>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a31      	ldr	r2, [pc, #196]	@ (80019fc <HAL_DMA_Abort+0x62c>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d00e      	beq.n	800195a <HAL_DMA_Abort+0x58a>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a2f      	ldr	r2, [pc, #188]	@ (8001a00 <HAL_DMA_Abort+0x630>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d009      	beq.n	800195a <HAL_DMA_Abort+0x58a>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a2e      	ldr	r2, [pc, #184]	@ (8001a04 <HAL_DMA_Abort+0x634>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d004      	beq.n	800195a <HAL_DMA_Abort+0x58a>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a2c      	ldr	r2, [pc, #176]	@ (8001a08 <HAL_DMA_Abort+0x638>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d101      	bne.n	800195e <HAL_DMA_Abort+0x58e>
 800195a:	2301      	movs	r3, #1
 800195c:	e000      	b.n	8001960 <HAL_DMA_Abort+0x590>
 800195e:	2300      	movs	r3, #0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d015      	beq.n	8001990 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800196c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001972:	2b00      	cmp	r3, #0
 8001974:	d00c      	beq.n	8001990 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001980:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001984:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800198e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2201      	movs	r2, #1
 8001994:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3718      	adds	r7, #24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40020010 	.word	0x40020010
 80019b0:	40020028 	.word	0x40020028
 80019b4:	40020040 	.word	0x40020040
 80019b8:	40020058 	.word	0x40020058
 80019bc:	40020070 	.word	0x40020070
 80019c0:	40020088 	.word	0x40020088
 80019c4:	400200a0 	.word	0x400200a0
 80019c8:	400200b8 	.word	0x400200b8
 80019cc:	40020410 	.word	0x40020410
 80019d0:	40020428 	.word	0x40020428
 80019d4:	40020440 	.word	0x40020440
 80019d8:	40020458 	.word	0x40020458
 80019dc:	40020470 	.word	0x40020470
 80019e0:	40020488 	.word	0x40020488
 80019e4:	400204a0 	.word	0x400204a0
 80019e8:	400204b8 	.word	0x400204b8
 80019ec:	58025408 	.word	0x58025408
 80019f0:	5802541c 	.word	0x5802541c
 80019f4:	58025430 	.word	0x58025430
 80019f8:	58025444 	.word	0x58025444
 80019fc:	58025458 	.word	0x58025458
 8001a00:	5802546c 	.word	0x5802546c
 8001a04:	58025480 	.word	0x58025480
 8001a08:	58025494 	.word	0x58025494

08001a0c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d101      	bne.n	8001a1e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e237      	b.n	8001e8e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d004      	beq.n	8001a34 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2280      	movs	r2, #128	@ 0x80
 8001a2e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e22c      	b.n	8001e8e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a5c      	ldr	r2, [pc, #368]	@ (8001bac <HAL_DMA_Abort_IT+0x1a0>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d04a      	beq.n	8001ad4 <HAL_DMA_Abort_IT+0xc8>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a5b      	ldr	r2, [pc, #364]	@ (8001bb0 <HAL_DMA_Abort_IT+0x1a4>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d045      	beq.n	8001ad4 <HAL_DMA_Abort_IT+0xc8>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a59      	ldr	r2, [pc, #356]	@ (8001bb4 <HAL_DMA_Abort_IT+0x1a8>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d040      	beq.n	8001ad4 <HAL_DMA_Abort_IT+0xc8>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a58      	ldr	r2, [pc, #352]	@ (8001bb8 <HAL_DMA_Abort_IT+0x1ac>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d03b      	beq.n	8001ad4 <HAL_DMA_Abort_IT+0xc8>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a56      	ldr	r2, [pc, #344]	@ (8001bbc <HAL_DMA_Abort_IT+0x1b0>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d036      	beq.n	8001ad4 <HAL_DMA_Abort_IT+0xc8>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a55      	ldr	r2, [pc, #340]	@ (8001bc0 <HAL_DMA_Abort_IT+0x1b4>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d031      	beq.n	8001ad4 <HAL_DMA_Abort_IT+0xc8>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a53      	ldr	r2, [pc, #332]	@ (8001bc4 <HAL_DMA_Abort_IT+0x1b8>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d02c      	beq.n	8001ad4 <HAL_DMA_Abort_IT+0xc8>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a52      	ldr	r2, [pc, #328]	@ (8001bc8 <HAL_DMA_Abort_IT+0x1bc>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d027      	beq.n	8001ad4 <HAL_DMA_Abort_IT+0xc8>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a50      	ldr	r2, [pc, #320]	@ (8001bcc <HAL_DMA_Abort_IT+0x1c0>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d022      	beq.n	8001ad4 <HAL_DMA_Abort_IT+0xc8>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a4f      	ldr	r2, [pc, #316]	@ (8001bd0 <HAL_DMA_Abort_IT+0x1c4>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d01d      	beq.n	8001ad4 <HAL_DMA_Abort_IT+0xc8>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a4d      	ldr	r2, [pc, #308]	@ (8001bd4 <HAL_DMA_Abort_IT+0x1c8>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d018      	beq.n	8001ad4 <HAL_DMA_Abort_IT+0xc8>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a4c      	ldr	r2, [pc, #304]	@ (8001bd8 <HAL_DMA_Abort_IT+0x1cc>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d013      	beq.n	8001ad4 <HAL_DMA_Abort_IT+0xc8>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a4a      	ldr	r2, [pc, #296]	@ (8001bdc <HAL_DMA_Abort_IT+0x1d0>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d00e      	beq.n	8001ad4 <HAL_DMA_Abort_IT+0xc8>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a49      	ldr	r2, [pc, #292]	@ (8001be0 <HAL_DMA_Abort_IT+0x1d4>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d009      	beq.n	8001ad4 <HAL_DMA_Abort_IT+0xc8>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a47      	ldr	r2, [pc, #284]	@ (8001be4 <HAL_DMA_Abort_IT+0x1d8>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d004      	beq.n	8001ad4 <HAL_DMA_Abort_IT+0xc8>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a46      	ldr	r2, [pc, #280]	@ (8001be8 <HAL_DMA_Abort_IT+0x1dc>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d101      	bne.n	8001ad8 <HAL_DMA_Abort_IT+0xcc>
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e000      	b.n	8001ada <HAL_DMA_Abort_IT+0xce>
 8001ad8:	2300      	movs	r3, #0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	f000 8086 	beq.w	8001bec <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2204      	movs	r2, #4
 8001ae4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a2f      	ldr	r2, [pc, #188]	@ (8001bac <HAL_DMA_Abort_IT+0x1a0>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d04a      	beq.n	8001b88 <HAL_DMA_Abort_IT+0x17c>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a2e      	ldr	r2, [pc, #184]	@ (8001bb0 <HAL_DMA_Abort_IT+0x1a4>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d045      	beq.n	8001b88 <HAL_DMA_Abort_IT+0x17c>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a2c      	ldr	r2, [pc, #176]	@ (8001bb4 <HAL_DMA_Abort_IT+0x1a8>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d040      	beq.n	8001b88 <HAL_DMA_Abort_IT+0x17c>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a2b      	ldr	r2, [pc, #172]	@ (8001bb8 <HAL_DMA_Abort_IT+0x1ac>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d03b      	beq.n	8001b88 <HAL_DMA_Abort_IT+0x17c>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a29      	ldr	r2, [pc, #164]	@ (8001bbc <HAL_DMA_Abort_IT+0x1b0>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d036      	beq.n	8001b88 <HAL_DMA_Abort_IT+0x17c>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a28      	ldr	r2, [pc, #160]	@ (8001bc0 <HAL_DMA_Abort_IT+0x1b4>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d031      	beq.n	8001b88 <HAL_DMA_Abort_IT+0x17c>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a26      	ldr	r2, [pc, #152]	@ (8001bc4 <HAL_DMA_Abort_IT+0x1b8>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d02c      	beq.n	8001b88 <HAL_DMA_Abort_IT+0x17c>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a25      	ldr	r2, [pc, #148]	@ (8001bc8 <HAL_DMA_Abort_IT+0x1bc>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d027      	beq.n	8001b88 <HAL_DMA_Abort_IT+0x17c>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a23      	ldr	r2, [pc, #140]	@ (8001bcc <HAL_DMA_Abort_IT+0x1c0>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d022      	beq.n	8001b88 <HAL_DMA_Abort_IT+0x17c>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a22      	ldr	r2, [pc, #136]	@ (8001bd0 <HAL_DMA_Abort_IT+0x1c4>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d01d      	beq.n	8001b88 <HAL_DMA_Abort_IT+0x17c>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a20      	ldr	r2, [pc, #128]	@ (8001bd4 <HAL_DMA_Abort_IT+0x1c8>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d018      	beq.n	8001b88 <HAL_DMA_Abort_IT+0x17c>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a1f      	ldr	r2, [pc, #124]	@ (8001bd8 <HAL_DMA_Abort_IT+0x1cc>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d013      	beq.n	8001b88 <HAL_DMA_Abort_IT+0x17c>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a1d      	ldr	r2, [pc, #116]	@ (8001bdc <HAL_DMA_Abort_IT+0x1d0>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d00e      	beq.n	8001b88 <HAL_DMA_Abort_IT+0x17c>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a1c      	ldr	r2, [pc, #112]	@ (8001be0 <HAL_DMA_Abort_IT+0x1d4>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d009      	beq.n	8001b88 <HAL_DMA_Abort_IT+0x17c>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a1a      	ldr	r2, [pc, #104]	@ (8001be4 <HAL_DMA_Abort_IT+0x1d8>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d004      	beq.n	8001b88 <HAL_DMA_Abort_IT+0x17c>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a19      	ldr	r2, [pc, #100]	@ (8001be8 <HAL_DMA_Abort_IT+0x1dc>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d108      	bne.n	8001b9a <HAL_DMA_Abort_IT+0x18e>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f022 0201 	bic.w	r2, r2, #1
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	e178      	b.n	8001e8c <HAL_DMA_Abort_IT+0x480>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f022 0201 	bic.w	r2, r2, #1
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	e16f      	b.n	8001e8c <HAL_DMA_Abort_IT+0x480>
 8001bac:	40020010 	.word	0x40020010
 8001bb0:	40020028 	.word	0x40020028
 8001bb4:	40020040 	.word	0x40020040
 8001bb8:	40020058 	.word	0x40020058
 8001bbc:	40020070 	.word	0x40020070
 8001bc0:	40020088 	.word	0x40020088
 8001bc4:	400200a0 	.word	0x400200a0
 8001bc8:	400200b8 	.word	0x400200b8
 8001bcc:	40020410 	.word	0x40020410
 8001bd0:	40020428 	.word	0x40020428
 8001bd4:	40020440 	.word	0x40020440
 8001bd8:	40020458 	.word	0x40020458
 8001bdc:	40020470 	.word	0x40020470
 8001be0:	40020488 	.word	0x40020488
 8001be4:	400204a0 	.word	0x400204a0
 8001be8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f022 020e 	bic.w	r2, r2, #14
 8001bfa:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a6c      	ldr	r2, [pc, #432]	@ (8001db4 <HAL_DMA_Abort_IT+0x3a8>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d04a      	beq.n	8001c9c <HAL_DMA_Abort_IT+0x290>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a6b      	ldr	r2, [pc, #428]	@ (8001db8 <HAL_DMA_Abort_IT+0x3ac>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d045      	beq.n	8001c9c <HAL_DMA_Abort_IT+0x290>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a69      	ldr	r2, [pc, #420]	@ (8001dbc <HAL_DMA_Abort_IT+0x3b0>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d040      	beq.n	8001c9c <HAL_DMA_Abort_IT+0x290>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a68      	ldr	r2, [pc, #416]	@ (8001dc0 <HAL_DMA_Abort_IT+0x3b4>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d03b      	beq.n	8001c9c <HAL_DMA_Abort_IT+0x290>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a66      	ldr	r2, [pc, #408]	@ (8001dc4 <HAL_DMA_Abort_IT+0x3b8>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d036      	beq.n	8001c9c <HAL_DMA_Abort_IT+0x290>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a65      	ldr	r2, [pc, #404]	@ (8001dc8 <HAL_DMA_Abort_IT+0x3bc>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d031      	beq.n	8001c9c <HAL_DMA_Abort_IT+0x290>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a63      	ldr	r2, [pc, #396]	@ (8001dcc <HAL_DMA_Abort_IT+0x3c0>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d02c      	beq.n	8001c9c <HAL_DMA_Abort_IT+0x290>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a62      	ldr	r2, [pc, #392]	@ (8001dd0 <HAL_DMA_Abort_IT+0x3c4>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d027      	beq.n	8001c9c <HAL_DMA_Abort_IT+0x290>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a60      	ldr	r2, [pc, #384]	@ (8001dd4 <HAL_DMA_Abort_IT+0x3c8>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d022      	beq.n	8001c9c <HAL_DMA_Abort_IT+0x290>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a5f      	ldr	r2, [pc, #380]	@ (8001dd8 <HAL_DMA_Abort_IT+0x3cc>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d01d      	beq.n	8001c9c <HAL_DMA_Abort_IT+0x290>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a5d      	ldr	r2, [pc, #372]	@ (8001ddc <HAL_DMA_Abort_IT+0x3d0>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d018      	beq.n	8001c9c <HAL_DMA_Abort_IT+0x290>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a5c      	ldr	r2, [pc, #368]	@ (8001de0 <HAL_DMA_Abort_IT+0x3d4>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d013      	beq.n	8001c9c <HAL_DMA_Abort_IT+0x290>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a5a      	ldr	r2, [pc, #360]	@ (8001de4 <HAL_DMA_Abort_IT+0x3d8>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d00e      	beq.n	8001c9c <HAL_DMA_Abort_IT+0x290>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a59      	ldr	r2, [pc, #356]	@ (8001de8 <HAL_DMA_Abort_IT+0x3dc>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d009      	beq.n	8001c9c <HAL_DMA_Abort_IT+0x290>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a57      	ldr	r2, [pc, #348]	@ (8001dec <HAL_DMA_Abort_IT+0x3e0>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d004      	beq.n	8001c9c <HAL_DMA_Abort_IT+0x290>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a56      	ldr	r2, [pc, #344]	@ (8001df0 <HAL_DMA_Abort_IT+0x3e4>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d108      	bne.n	8001cae <HAL_DMA_Abort_IT+0x2a2>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f022 0201 	bic.w	r2, r2, #1
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	e007      	b.n	8001cbe <HAL_DMA_Abort_IT+0x2b2>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f022 0201 	bic.w	r2, r2, #1
 8001cbc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a3c      	ldr	r2, [pc, #240]	@ (8001db4 <HAL_DMA_Abort_IT+0x3a8>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d072      	beq.n	8001dae <HAL_DMA_Abort_IT+0x3a2>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a3a      	ldr	r2, [pc, #232]	@ (8001db8 <HAL_DMA_Abort_IT+0x3ac>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d06d      	beq.n	8001dae <HAL_DMA_Abort_IT+0x3a2>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a39      	ldr	r2, [pc, #228]	@ (8001dbc <HAL_DMA_Abort_IT+0x3b0>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d068      	beq.n	8001dae <HAL_DMA_Abort_IT+0x3a2>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a37      	ldr	r2, [pc, #220]	@ (8001dc0 <HAL_DMA_Abort_IT+0x3b4>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d063      	beq.n	8001dae <HAL_DMA_Abort_IT+0x3a2>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a36      	ldr	r2, [pc, #216]	@ (8001dc4 <HAL_DMA_Abort_IT+0x3b8>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d05e      	beq.n	8001dae <HAL_DMA_Abort_IT+0x3a2>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a34      	ldr	r2, [pc, #208]	@ (8001dc8 <HAL_DMA_Abort_IT+0x3bc>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d059      	beq.n	8001dae <HAL_DMA_Abort_IT+0x3a2>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a33      	ldr	r2, [pc, #204]	@ (8001dcc <HAL_DMA_Abort_IT+0x3c0>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d054      	beq.n	8001dae <HAL_DMA_Abort_IT+0x3a2>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a31      	ldr	r2, [pc, #196]	@ (8001dd0 <HAL_DMA_Abort_IT+0x3c4>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d04f      	beq.n	8001dae <HAL_DMA_Abort_IT+0x3a2>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a30      	ldr	r2, [pc, #192]	@ (8001dd4 <HAL_DMA_Abort_IT+0x3c8>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d04a      	beq.n	8001dae <HAL_DMA_Abort_IT+0x3a2>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a2e      	ldr	r2, [pc, #184]	@ (8001dd8 <HAL_DMA_Abort_IT+0x3cc>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d045      	beq.n	8001dae <HAL_DMA_Abort_IT+0x3a2>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a2d      	ldr	r2, [pc, #180]	@ (8001ddc <HAL_DMA_Abort_IT+0x3d0>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d040      	beq.n	8001dae <HAL_DMA_Abort_IT+0x3a2>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a2b      	ldr	r2, [pc, #172]	@ (8001de0 <HAL_DMA_Abort_IT+0x3d4>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d03b      	beq.n	8001dae <HAL_DMA_Abort_IT+0x3a2>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a2a      	ldr	r2, [pc, #168]	@ (8001de4 <HAL_DMA_Abort_IT+0x3d8>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d036      	beq.n	8001dae <HAL_DMA_Abort_IT+0x3a2>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a28      	ldr	r2, [pc, #160]	@ (8001de8 <HAL_DMA_Abort_IT+0x3dc>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d031      	beq.n	8001dae <HAL_DMA_Abort_IT+0x3a2>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a27      	ldr	r2, [pc, #156]	@ (8001dec <HAL_DMA_Abort_IT+0x3e0>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d02c      	beq.n	8001dae <HAL_DMA_Abort_IT+0x3a2>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a25      	ldr	r2, [pc, #148]	@ (8001df0 <HAL_DMA_Abort_IT+0x3e4>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d027      	beq.n	8001dae <HAL_DMA_Abort_IT+0x3a2>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a24      	ldr	r2, [pc, #144]	@ (8001df4 <HAL_DMA_Abort_IT+0x3e8>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d022      	beq.n	8001dae <HAL_DMA_Abort_IT+0x3a2>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a22      	ldr	r2, [pc, #136]	@ (8001df8 <HAL_DMA_Abort_IT+0x3ec>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d01d      	beq.n	8001dae <HAL_DMA_Abort_IT+0x3a2>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a21      	ldr	r2, [pc, #132]	@ (8001dfc <HAL_DMA_Abort_IT+0x3f0>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d018      	beq.n	8001dae <HAL_DMA_Abort_IT+0x3a2>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a1f      	ldr	r2, [pc, #124]	@ (8001e00 <HAL_DMA_Abort_IT+0x3f4>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d013      	beq.n	8001dae <HAL_DMA_Abort_IT+0x3a2>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a1e      	ldr	r2, [pc, #120]	@ (8001e04 <HAL_DMA_Abort_IT+0x3f8>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d00e      	beq.n	8001dae <HAL_DMA_Abort_IT+0x3a2>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a1c      	ldr	r2, [pc, #112]	@ (8001e08 <HAL_DMA_Abort_IT+0x3fc>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d009      	beq.n	8001dae <HAL_DMA_Abort_IT+0x3a2>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a1b      	ldr	r2, [pc, #108]	@ (8001e0c <HAL_DMA_Abort_IT+0x400>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d004      	beq.n	8001dae <HAL_DMA_Abort_IT+0x3a2>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a19      	ldr	r2, [pc, #100]	@ (8001e10 <HAL_DMA_Abort_IT+0x404>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d132      	bne.n	8001e14 <HAL_DMA_Abort_IT+0x408>
 8001dae:	2301      	movs	r3, #1
 8001db0:	e031      	b.n	8001e16 <HAL_DMA_Abort_IT+0x40a>
 8001db2:	bf00      	nop
 8001db4:	40020010 	.word	0x40020010
 8001db8:	40020028 	.word	0x40020028
 8001dbc:	40020040 	.word	0x40020040
 8001dc0:	40020058 	.word	0x40020058
 8001dc4:	40020070 	.word	0x40020070
 8001dc8:	40020088 	.word	0x40020088
 8001dcc:	400200a0 	.word	0x400200a0
 8001dd0:	400200b8 	.word	0x400200b8
 8001dd4:	40020410 	.word	0x40020410
 8001dd8:	40020428 	.word	0x40020428
 8001ddc:	40020440 	.word	0x40020440
 8001de0:	40020458 	.word	0x40020458
 8001de4:	40020470 	.word	0x40020470
 8001de8:	40020488 	.word	0x40020488
 8001dec:	400204a0 	.word	0x400204a0
 8001df0:	400204b8 	.word	0x400204b8
 8001df4:	58025408 	.word	0x58025408
 8001df8:	5802541c 	.word	0x5802541c
 8001dfc:	58025430 	.word	0x58025430
 8001e00:	58025444 	.word	0x58025444
 8001e04:	58025458 	.word	0x58025458
 8001e08:	5802546c 	.word	0x5802546c
 8001e0c:	58025480 	.word	0x58025480
 8001e10:	58025494 	.word	0x58025494
 8001e14:	2300      	movs	r3, #0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d028      	beq.n	8001e6c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e24:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e28:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e2e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e34:	f003 031f 	and.w	r3, r3, #31
 8001e38:	2201      	movs	r2, #1
 8001e3a:	409a      	lsls	r2, r3
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001e48:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d00c      	beq.n	8001e6c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e5c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e60:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001e6a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop

08001e98 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e0e3      	b.n	8002072 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d106      	bne.n	8001ec2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2223      	movs	r2, #35	@ 0x23
 8001eb8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f7fe fdf9 	bl	8000ab4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ec2:	4b6e      	ldr	r3, [pc, #440]	@ (800207c <HAL_ETH_Init+0x1e4>)
 8001ec4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001ec8:	4a6c      	ldr	r2, [pc, #432]	@ (800207c <HAL_ETH_Init+0x1e4>)
 8001eca:	f043 0302 	orr.w	r3, r3, #2
 8001ece:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001ed2:	4b6a      	ldr	r3, [pc, #424]	@ (800207c <HAL_ETH_Init+0x1e4>)
 8001ed4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	60bb      	str	r3, [r7, #8]
 8001ede:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	7a1b      	ldrb	r3, [r3, #8]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d103      	bne.n	8001ef0 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001ee8:	2000      	movs	r0, #0
 8001eea:	f7ff f94d 	bl	8001188 <HAL_SYSCFG_ETHInterfaceSelect>
 8001eee:	e003      	b.n	8001ef8 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001ef0:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001ef4:	f7ff f948 	bl	8001188 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001ef8:	4b61      	ldr	r3, [pc, #388]	@ (8002080 <HAL_ETH_Init+0x1e8>)
 8001efa:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	6812      	ldr	r2, [r2, #0]
 8001f0a:	f043 0301 	orr.w	r3, r3, #1
 8001f0e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f12:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f14:	f7ff f8fc 	bl	8001110 <HAL_GetTick>
 8001f18:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001f1a:	e011      	b.n	8001f40 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001f1c:	f7ff f8f8 	bl	8001110 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001f2a:	d909      	bls.n	8001f40 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2204      	movs	r2, #4
 8001f30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	22e0      	movs	r2, #224	@ 0xe0
 8001f38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e098      	b.n	8002072 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1e4      	bne.n	8001f1c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 f89e 	bl	8002094 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001f58:	f001 fea0 	bl	8003c9c <HAL_RCC_GetHCLKFreq>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	4a49      	ldr	r2, [pc, #292]	@ (8002084 <HAL_ETH_Init+0x1ec>)
 8001f60:	fba2 2303 	umull	r2, r3, r2, r3
 8001f64:	0c9a      	lsrs	r2, r3, #18
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	3a01      	subs	r2, #1
 8001f6c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f000 fa81 	bl	8002478 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f7e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8001f82:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	6812      	ldr	r2, [r2, #0]
 8001f8a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001f8e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f92:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	f003 0303 	and.w	r3, r3, #3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d009      	beq.n	8001fb6 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	22e0      	movs	r2, #224	@ 0xe0
 8001fae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e05d      	b.n	8002072 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fbe:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001fc2:	4b31      	ldr	r3, [pc, #196]	@ (8002088 <HAL_ETH_Init+0x1f0>)
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	6952      	ldr	r2, [r2, #20]
 8001fca:	0051      	lsls	r1, r2, #1
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	6812      	ldr	r2, [r2, #0]
 8001fd0:	430b      	orrs	r3, r1
 8001fd2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001fd6:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 fae9 	bl	80025b2 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 fb2f 	bl	8002644 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	3305      	adds	r3, #5
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	021a      	lsls	r2, r3, #8
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	3304      	adds	r3, #4
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	430a      	orrs	r2, r1
 8002000:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	3303      	adds	r3, #3
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	061a      	lsls	r2, r3, #24
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	3302      	adds	r3, #2
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	041b      	lsls	r3, r3, #16
 8002018:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	3301      	adds	r3, #1
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002024:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002032:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002034:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	4b11      	ldr	r3, [pc, #68]	@ (800208c <HAL_ETH_Init+0x1f4>)
 8002046:	430b      	orrs	r3, r1
 8002048:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	4b0d      	ldr	r3, [pc, #52]	@ (8002090 <HAL_ETH_Init+0x1f8>)
 800205a:	430b      	orrs	r3, r1
 800205c:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2210      	movs	r2, #16
 800206c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3710      	adds	r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	58024400 	.word	0x58024400
 8002080:	58000400 	.word	0x58000400
 8002084:	431bde83 	.word	0x431bde83
 8002088:	ffff8001 	.word	0xffff8001
 800208c:	0c020060 	.word	0x0c020060
 8002090:	0c20c000 	.word	0x0c20c000

08002094 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80020a4:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80020ac:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80020ae:	f001 fdf5 	bl	8003c9c <HAL_RCC_GetHCLKFreq>
 80020b2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	4a1a      	ldr	r2, [pc, #104]	@ (8002120 <HAL_ETH_SetMDIOClockRange+0x8c>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d804      	bhi.n	80020c6 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020c2:	60fb      	str	r3, [r7, #12]
 80020c4:	e022      	b.n	800210c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	4a16      	ldr	r2, [pc, #88]	@ (8002124 <HAL_ETH_SetMDIOClockRange+0x90>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d204      	bcs.n	80020d8 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	e019      	b.n	800210c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	4a13      	ldr	r2, [pc, #76]	@ (8002128 <HAL_ETH_SetMDIOClockRange+0x94>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d915      	bls.n	800210c <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	4a12      	ldr	r2, [pc, #72]	@ (800212c <HAL_ETH_SetMDIOClockRange+0x98>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d804      	bhi.n	80020f2 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	e00c      	b.n	800210c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	4a0e      	ldr	r2, [pc, #56]	@ (8002130 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d804      	bhi.n	8002104 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002100:	60fb      	str	r3, [r7, #12]
 8002102:	e003      	b.n	800210c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 800210a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	68fa      	ldr	r2, [r7, #12]
 8002112:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8002116:	bf00      	nop
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	02160ebf 	.word	0x02160ebf
 8002124:	03938700 	.word	0x03938700
 8002128:	05f5e0ff 	.word	0x05f5e0ff
 800212c:	08f0d17f 	.word	0x08f0d17f
 8002130:	0ee6b27f 	.word	0x0ee6b27f

08002134 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8002146:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	791b      	ldrb	r3, [r3, #4]
 800214c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800214e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	7b1b      	ldrb	r3, [r3, #12]
 8002154:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002156:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	7b5b      	ldrb	r3, [r3, #13]
 800215c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800215e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	7b9b      	ldrb	r3, [r3, #14]
 8002164:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002166:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	7bdb      	ldrb	r3, [r3, #15]
 800216c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800216e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	7c12      	ldrb	r2, [r2, #16]
 8002174:	2a00      	cmp	r2, #0
 8002176:	d102      	bne.n	800217e <ETH_SetMACConfig+0x4a>
 8002178:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800217c:	e000      	b.n	8002180 <ETH_SetMACConfig+0x4c>
 800217e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002180:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	7c52      	ldrb	r2, [r2, #17]
 8002186:	2a00      	cmp	r2, #0
 8002188:	d102      	bne.n	8002190 <ETH_SetMACConfig+0x5c>
 800218a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800218e:	e000      	b.n	8002192 <ETH_SetMACConfig+0x5e>
 8002190:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002192:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	7c9b      	ldrb	r3, [r3, #18]
 8002198:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800219a:	431a      	orrs	r2, r3
               macconf->Speed |
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80021a0:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80021a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	7f1b      	ldrb	r3, [r3, #28]
 80021ac:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80021ae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	7f5b      	ldrb	r3, [r3, #29]
 80021b4:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80021b6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80021b8:	683a      	ldr	r2, [r7, #0]
 80021ba:	7f92      	ldrb	r2, [r2, #30]
 80021bc:	2a00      	cmp	r2, #0
 80021be:	d102      	bne.n	80021c6 <ETH_SetMACConfig+0x92>
 80021c0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021c4:	e000      	b.n	80021c8 <ETH_SetMACConfig+0x94>
 80021c6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80021c8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	7fdb      	ldrb	r3, [r3, #31]
 80021ce:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80021d0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	f892 2020 	ldrb.w	r2, [r2, #32]
 80021d8:	2a00      	cmp	r2, #0
 80021da:	d102      	bne.n	80021e2 <ETH_SetMACConfig+0xae>
 80021dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021e0:	e000      	b.n	80021e4 <ETH_SetMACConfig+0xb0>
 80021e2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80021e4:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80021ea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80021f2:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80021f4:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 80021fa:	4313      	orrs	r3, r2
 80021fc:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	4b56      	ldr	r3, [pc, #344]	@ (8002360 <ETH_SetMACConfig+0x22c>)
 8002206:	4013      	ands	r3, r2
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	6812      	ldr	r2, [r2, #0]
 800220c:	68f9      	ldr	r1, [r7, #12]
 800220e:	430b      	orrs	r3, r1
 8002210:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002216:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800221e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002220:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002228:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800222a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002232:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002234:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 800223c:	2a00      	cmp	r2, #0
 800223e:	d102      	bne.n	8002246 <ETH_SetMACConfig+0x112>
 8002240:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002244:	e000      	b.n	8002248 <ETH_SetMACConfig+0x114>
 8002246:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002248:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800224e:	4313      	orrs	r3, r2
 8002250:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	685a      	ldr	r2, [r3, #4]
 8002258:	4b42      	ldr	r3, [pc, #264]	@ (8002364 <ETH_SetMACConfig+0x230>)
 800225a:	4013      	ands	r3, r2
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	6812      	ldr	r2, [r2, #0]
 8002260:	68f9      	ldr	r1, [r7, #12]
 8002262:	430b      	orrs	r3, r1
 8002264:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800226c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002272:	4313      	orrs	r3, r2
 8002274:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68da      	ldr	r2, [r3, #12]
 800227c:	4b3a      	ldr	r3, [pc, #232]	@ (8002368 <ETH_SetMACConfig+0x234>)
 800227e:	4013      	ands	r3, r2
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	6812      	ldr	r2, [r2, #0]
 8002284:	68f9      	ldr	r1, [r7, #12]
 8002286:	430b      	orrs	r3, r1
 8002288:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002290:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002296:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002298:	683a      	ldr	r2, [r7, #0]
 800229a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800229e:	2a00      	cmp	r2, #0
 80022a0:	d101      	bne.n	80022a6 <ETH_SetMACConfig+0x172>
 80022a2:	2280      	movs	r2, #128	@ 0x80
 80022a4:	e000      	b.n	80022a8 <ETH_SetMACConfig+0x174>
 80022a6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80022a8:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022ae:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80022b0:	4313      	orrs	r3, r2
 80022b2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80022ba:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 80022be:	4013      	ands	r3, r2
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	6812      	ldr	r2, [r2, #0]
 80022c4:	68f9      	ldr	r1, [r7, #12]
 80022c6:	430b      	orrs	r3, r1
 80022c8:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80022d0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80022d8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80022da:	4313      	orrs	r3, r2
 80022dc:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022e6:	f023 0103 	bic.w	r1, r3, #3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	430a      	orrs	r2, r1
 80022f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 80022fe:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	430a      	orrs	r2, r1
 800230c:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 800231a:	2a00      	cmp	r2, #0
 800231c:	d101      	bne.n	8002322 <ETH_SetMACConfig+0x1ee>
 800231e:	2240      	movs	r2, #64	@ 0x40
 8002320:	e000      	b.n	8002324 <ETH_SetMACConfig+0x1f0>
 8002322:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002324:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800232c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800232e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8002336:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002338:	4313      	orrs	r3, r2
 800233a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8002344:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	430a      	orrs	r2, r1
 8002350:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8002354:	bf00      	nop
 8002356:	3714      	adds	r7, #20
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	00048083 	.word	0x00048083
 8002364:	c0f88000 	.word	0xc0f88000
 8002368:	fffffef0 	.word	0xfffffef0

0800236c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	4b38      	ldr	r3, [pc, #224]	@ (8002464 <ETH_SetDMAConfig+0xf8>)
 8002382:	4013      	ands	r3, r2
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	6811      	ldr	r1, [r2, #0]
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	6812      	ldr	r2, [r2, #0]
 800238c:	430b      	orrs	r3, r1
 800238e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002392:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	791b      	ldrb	r3, [r3, #4]
 8002398:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800239e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	7b1b      	ldrb	r3, [r3, #12]
 80023a4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80023a6:	4313      	orrs	r3, r2
 80023a8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023b2:	685a      	ldr	r2, [r3, #4]
 80023b4:	4b2c      	ldr	r3, [pc, #176]	@ (8002468 <ETH_SetDMAConfig+0xfc>)
 80023b6:	4013      	ands	r3, r2
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	6812      	ldr	r2, [r2, #0]
 80023bc:	68f9      	ldr	r1, [r7, #12]
 80023be:	430b      	orrs	r3, r1
 80023c0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80023c4:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	7b5b      	ldrb	r3, [r3, #13]
 80023ca:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80023d0:	4313      	orrs	r3, r2
 80023d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023dc:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 80023e0:	4b22      	ldr	r3, [pc, #136]	@ (800246c <ETH_SetDMAConfig+0x100>)
 80023e2:	4013      	ands	r3, r2
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	6812      	ldr	r2, [r2, #0]
 80023e8:	68f9      	ldr	r1, [r7, #12]
 80023ea:	430b      	orrs	r3, r1
 80023ec:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80023f0:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	7d1b      	ldrb	r3, [r3, #20]
 80023fc:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80023fe:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	7f5b      	ldrb	r3, [r3, #29]
 8002404:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002406:	4313      	orrs	r3, r2
 8002408:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002412:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8002416:	4b16      	ldr	r3, [pc, #88]	@ (8002470 <ETH_SetDMAConfig+0x104>)
 8002418:	4013      	ands	r3, r2
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	6812      	ldr	r2, [r2, #0]
 800241e:	68f9      	ldr	r1, [r7, #12]
 8002420:	430b      	orrs	r3, r1
 8002422:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002426:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	7f1b      	ldrb	r3, [r3, #28]
 800242e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002434:	4313      	orrs	r3, r2
 8002436:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002440:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8002444:	4b0b      	ldr	r3, [pc, #44]	@ (8002474 <ETH_SetDMAConfig+0x108>)
 8002446:	4013      	ands	r3, r2
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	6812      	ldr	r2, [r2, #0]
 800244c:	68f9      	ldr	r1, [r7, #12]
 800244e:	430b      	orrs	r3, r1
 8002450:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002454:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8002458:	bf00      	nop
 800245a:	3714      	adds	r7, #20
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	ffff87fd 	.word	0xffff87fd
 8002468:	ffff2ffe 	.word	0xffff2ffe
 800246c:	fffec000 	.word	0xfffec000
 8002470:	ffc0efef 	.word	0xffc0efef
 8002474:	7fc0ffff 	.word	0x7fc0ffff

08002478 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b0a4      	sub	sp, #144	@ 0x90
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002480:	2301      	movs	r3, #1
 8002482:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002486:	2300      	movs	r3, #0
 8002488:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800248a:	2300      	movs	r3, #0
 800248c:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002490:	2300      	movs	r3, #0
 8002492:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002496:	2301      	movs	r3, #1
 8002498:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800249c:	2301      	movs	r3, #1
 800249e:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80024a2:	2301      	movs	r3, #1
 80024a4:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80024a8:	2300      	movs	r3, #0
 80024aa:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80024ae:	2301      	movs	r3, #1
 80024b0:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80024b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80024b8:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80024ba:	2300      	movs	r3, #0
 80024bc:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 80024c0:	2300      	movs	r3, #0
 80024c2:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80024c4:	2300      	movs	r3, #0
 80024c6:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80024ca:	2300      	movs	r3, #0
 80024cc:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 80024d0:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 80024d4:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80024d6:	2300      	movs	r3, #0
 80024d8:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80024dc:	2300      	movs	r3, #0
 80024de:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 80024e0:	2301      	movs	r3, #1
 80024e2:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80024e6:	2300      	movs	r3, #0
 80024e8:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80024ec:	2300      	movs	r3, #0
 80024ee:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80024f2:	2300      	movs	r3, #0
 80024f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80024fa:	2300      	movs	r3, #0
 80024fc:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80024fe:	2300      	movs	r3, #0
 8002500:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002504:	2300      	movs	r3, #0
 8002506:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800250a:	2301      	movs	r3, #1
 800250c:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002510:	2320      	movs	r3, #32
 8002512:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002516:	2301      	movs	r3, #1
 8002518:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800251c:	2300      	movs	r3, #0
 800251e:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002522:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8002526:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002528:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800252c:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800252e:	2300      	movs	r3, #0
 8002530:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002534:	2302      	movs	r3, #2
 8002536:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800253a:	2300      	movs	r3, #0
 800253c:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002540:	2300      	movs	r3, #0
 8002542:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002546:	2300      	movs	r3, #0
 8002548:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800254c:	2301      	movs	r3, #1
 800254e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002552:	2300      	movs	r3, #0
 8002554:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002556:	2301      	movs	r3, #1
 8002558:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800255c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002560:	4619      	mov	r1, r3
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f7ff fde6 	bl	8002134 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002568:	2301      	movs	r3, #1
 800256a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800256c:	2301      	movs	r3, #1
 800256e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002570:	2300      	movs	r3, #0
 8002572:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002574:	2300      	movs	r3, #0
 8002576:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800257a:	2300      	movs	r3, #0
 800257c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800257e:	2300      	movs	r3, #0
 8002580:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002582:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002586:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002588:	2300      	movs	r3, #0
 800258a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800258c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002590:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002592:	2300      	movs	r3, #0
 8002594:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002598:	f44f 7306 	mov.w	r3, #536	@ 0x218
 800259c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800259e:	f107 0308 	add.w	r3, r7, #8
 80025a2:	4619      	mov	r1, r3
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f7ff fee1 	bl	800236c <ETH_SetDMAConfig>
}
 80025aa:	bf00      	nop
 80025ac:	3790      	adds	r7, #144	@ 0x90
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80025b2:	b480      	push	{r7}
 80025b4:	b085      	sub	sp, #20
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80025ba:	2300      	movs	r3, #0
 80025bc:	60fb      	str	r3, [r7, #12]
 80025be:	e01d      	b.n	80025fc <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	68d9      	ldr	r1, [r3, #12]
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	4613      	mov	r3, r2
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	4413      	add	r3, r2
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	440b      	add	r3, r1
 80025d0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	2200      	movs	r2, #0
 80025dc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	2200      	movs	r2, #0
 80025e2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	2200      	movs	r2, #0
 80025e8:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80025ea:	68b9      	ldr	r1, [r7, #8]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	68fa      	ldr	r2, [r7, #12]
 80025f0:	3206      	adds	r2, #6
 80025f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	3301      	adds	r3, #1
 80025fa:	60fb      	str	r3, [r7, #12]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2b03      	cmp	r3, #3
 8002600:	d9de      	bls.n	80025c0 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002610:	461a      	mov	r2, r3
 8002612:	2303      	movs	r3, #3
 8002614:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	68da      	ldr	r2, [r3, #12]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002624:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	68da      	ldr	r2, [r3, #12]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002634:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8002638:	bf00      	nop
 800263a:	3714      	adds	r7, #20
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800264c:	2300      	movs	r3, #0
 800264e:	60fb      	str	r3, [r7, #12]
 8002650:	e023      	b.n	800269a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6919      	ldr	r1, [r3, #16]
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	4613      	mov	r3, r2
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	4413      	add	r3, r2
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	440b      	add	r3, r1
 8002662:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	2200      	movs	r2, #0
 8002668:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	2200      	movs	r2, #0
 800266e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	2200      	movs	r2, #0
 8002674:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	2200      	movs	r2, #0
 800267a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	2200      	movs	r2, #0
 8002680:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	2200      	movs	r2, #0
 8002686:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002688:	68b9      	ldr	r1, [r7, #8]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	3212      	adds	r2, #18
 8002690:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	3301      	adds	r3, #1
 8002698:	60fb      	str	r3, [r7, #12]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2b03      	cmp	r3, #3
 800269e:	d9d8      	bls.n	8002652 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026c6:	461a      	mov	r2, r3
 80026c8:	2303      	movs	r3, #3
 80026ca:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	691a      	ldr	r2, [r3, #16]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026da:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026ee:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 80026f2:	bf00      	nop
 80026f4:	3714      	adds	r7, #20
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
	...

08002700 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002700:	b480      	push	{r7}
 8002702:	b089      	sub	sp, #36	@ 0x24
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800270a:	2300      	movs	r3, #0
 800270c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800270e:	4b89      	ldr	r3, [pc, #548]	@ (8002934 <HAL_GPIO_Init+0x234>)
 8002710:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002712:	e194      	b.n	8002a3e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	2101      	movs	r1, #1
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	fa01 f303 	lsl.w	r3, r1, r3
 8002720:	4013      	ands	r3, r2
 8002722:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	2b00      	cmp	r3, #0
 8002728:	f000 8186 	beq.w	8002a38 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f003 0303 	and.w	r3, r3, #3
 8002734:	2b01      	cmp	r3, #1
 8002736:	d005      	beq.n	8002744 <HAL_GPIO_Init+0x44>
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f003 0303 	and.w	r3, r3, #3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d130      	bne.n	80027a6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	2203      	movs	r2, #3
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	43db      	mvns	r3, r3
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4013      	ands	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	68da      	ldr	r2, [r3, #12]
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	4313      	orrs	r3, r2
 800276c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800277a:	2201      	movs	r2, #1
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	fa02 f303 	lsl.w	r3, r2, r3
 8002782:	43db      	mvns	r3, r3
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	4013      	ands	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	091b      	lsrs	r3, r3, #4
 8002790:	f003 0201 	and.w	r2, r3, #1
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4313      	orrs	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f003 0303 	and.w	r3, r3, #3
 80027ae:	2b03      	cmp	r3, #3
 80027b0:	d017      	beq.n	80027e2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	2203      	movs	r2, #3
 80027be:	fa02 f303 	lsl.w	r3, r2, r3
 80027c2:	43db      	mvns	r3, r3
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	4013      	ands	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	689a      	ldr	r2, [r3, #8]
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	4313      	orrs	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f003 0303 	and.w	r3, r3, #3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d123      	bne.n	8002836 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	08da      	lsrs	r2, r3, #3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	3208      	adds	r2, #8
 80027f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	f003 0307 	and.w	r3, r3, #7
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	220f      	movs	r2, #15
 8002806:	fa02 f303 	lsl.w	r3, r2, r3
 800280a:	43db      	mvns	r3, r3
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	4013      	ands	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	691a      	ldr	r2, [r3, #16]
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	f003 0307 	and.w	r3, r3, #7
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	4313      	orrs	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	08da      	lsrs	r2, r3, #3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	3208      	adds	r2, #8
 8002830:	69b9      	ldr	r1, [r7, #24]
 8002832:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	2203      	movs	r2, #3
 8002842:	fa02 f303 	lsl.w	r3, r2, r3
 8002846:	43db      	mvns	r3, r3
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	4013      	ands	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f003 0203 	and.w	r2, r3, #3
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	fa02 f303 	lsl.w	r3, r2, r3
 800285e:	69ba      	ldr	r2, [r7, #24]
 8002860:	4313      	orrs	r3, r2
 8002862:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002872:	2b00      	cmp	r3, #0
 8002874:	f000 80e0 	beq.w	8002a38 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002878:	4b2f      	ldr	r3, [pc, #188]	@ (8002938 <HAL_GPIO_Init+0x238>)
 800287a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800287e:	4a2e      	ldr	r2, [pc, #184]	@ (8002938 <HAL_GPIO_Init+0x238>)
 8002880:	f043 0302 	orr.w	r3, r3, #2
 8002884:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002888:	4b2b      	ldr	r3, [pc, #172]	@ (8002938 <HAL_GPIO_Init+0x238>)
 800288a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002896:	4a29      	ldr	r2, [pc, #164]	@ (800293c <HAL_GPIO_Init+0x23c>)
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	089b      	lsrs	r3, r3, #2
 800289c:	3302      	adds	r3, #2
 800289e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	f003 0303 	and.w	r3, r3, #3
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	220f      	movs	r2, #15
 80028ae:	fa02 f303 	lsl.w	r3, r2, r3
 80028b2:	43db      	mvns	r3, r3
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	4013      	ands	r3, r2
 80028b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a20      	ldr	r2, [pc, #128]	@ (8002940 <HAL_GPIO_Init+0x240>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d052      	beq.n	8002968 <HAL_GPIO_Init+0x268>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a1f      	ldr	r2, [pc, #124]	@ (8002944 <HAL_GPIO_Init+0x244>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d031      	beq.n	800292e <HAL_GPIO_Init+0x22e>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a1e      	ldr	r2, [pc, #120]	@ (8002948 <HAL_GPIO_Init+0x248>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d02b      	beq.n	800292a <HAL_GPIO_Init+0x22a>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a1d      	ldr	r2, [pc, #116]	@ (800294c <HAL_GPIO_Init+0x24c>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d025      	beq.n	8002926 <HAL_GPIO_Init+0x226>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a1c      	ldr	r2, [pc, #112]	@ (8002950 <HAL_GPIO_Init+0x250>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d01f      	beq.n	8002922 <HAL_GPIO_Init+0x222>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a1b      	ldr	r2, [pc, #108]	@ (8002954 <HAL_GPIO_Init+0x254>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d019      	beq.n	800291e <HAL_GPIO_Init+0x21e>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a1a      	ldr	r2, [pc, #104]	@ (8002958 <HAL_GPIO_Init+0x258>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d013      	beq.n	800291a <HAL_GPIO_Init+0x21a>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a19      	ldr	r2, [pc, #100]	@ (800295c <HAL_GPIO_Init+0x25c>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d00d      	beq.n	8002916 <HAL_GPIO_Init+0x216>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a18      	ldr	r2, [pc, #96]	@ (8002960 <HAL_GPIO_Init+0x260>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d007      	beq.n	8002912 <HAL_GPIO_Init+0x212>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a17      	ldr	r2, [pc, #92]	@ (8002964 <HAL_GPIO_Init+0x264>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d101      	bne.n	800290e <HAL_GPIO_Init+0x20e>
 800290a:	2309      	movs	r3, #9
 800290c:	e02d      	b.n	800296a <HAL_GPIO_Init+0x26a>
 800290e:	230a      	movs	r3, #10
 8002910:	e02b      	b.n	800296a <HAL_GPIO_Init+0x26a>
 8002912:	2308      	movs	r3, #8
 8002914:	e029      	b.n	800296a <HAL_GPIO_Init+0x26a>
 8002916:	2307      	movs	r3, #7
 8002918:	e027      	b.n	800296a <HAL_GPIO_Init+0x26a>
 800291a:	2306      	movs	r3, #6
 800291c:	e025      	b.n	800296a <HAL_GPIO_Init+0x26a>
 800291e:	2305      	movs	r3, #5
 8002920:	e023      	b.n	800296a <HAL_GPIO_Init+0x26a>
 8002922:	2304      	movs	r3, #4
 8002924:	e021      	b.n	800296a <HAL_GPIO_Init+0x26a>
 8002926:	2303      	movs	r3, #3
 8002928:	e01f      	b.n	800296a <HAL_GPIO_Init+0x26a>
 800292a:	2302      	movs	r3, #2
 800292c:	e01d      	b.n	800296a <HAL_GPIO_Init+0x26a>
 800292e:	2301      	movs	r3, #1
 8002930:	e01b      	b.n	800296a <HAL_GPIO_Init+0x26a>
 8002932:	bf00      	nop
 8002934:	58000080 	.word	0x58000080
 8002938:	58024400 	.word	0x58024400
 800293c:	58000400 	.word	0x58000400
 8002940:	58020000 	.word	0x58020000
 8002944:	58020400 	.word	0x58020400
 8002948:	58020800 	.word	0x58020800
 800294c:	58020c00 	.word	0x58020c00
 8002950:	58021000 	.word	0x58021000
 8002954:	58021400 	.word	0x58021400
 8002958:	58021800 	.word	0x58021800
 800295c:	58021c00 	.word	0x58021c00
 8002960:	58022000 	.word	0x58022000
 8002964:	58022400 	.word	0x58022400
 8002968:	2300      	movs	r3, #0
 800296a:	69fa      	ldr	r2, [r7, #28]
 800296c:	f002 0203 	and.w	r2, r2, #3
 8002970:	0092      	lsls	r2, r2, #2
 8002972:	4093      	lsls	r3, r2
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	4313      	orrs	r3, r2
 8002978:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800297a:	4938      	ldr	r1, [pc, #224]	@ (8002a5c <HAL_GPIO_Init+0x35c>)
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	089b      	lsrs	r3, r3, #2
 8002980:	3302      	adds	r3, #2
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002988:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	43db      	mvns	r3, r3
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	4013      	ands	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d003      	beq.n	80029ae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80029ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80029b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	43db      	mvns	r3, r3
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	4013      	ands	r3, r2
 80029c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d003      	beq.n	80029dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	4313      	orrs	r3, r2
 80029da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80029dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	43db      	mvns	r3, r3
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	4013      	ands	r3, r2
 80029f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d003      	beq.n	8002a08 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	43db      	mvns	r3, r3
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	fa22 f303 	lsr.w	r3, r2, r3
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f47f ae63 	bne.w	8002714 <HAL_GPIO_Init+0x14>
  }
}
 8002a4e:	bf00      	nop
 8002a50:	bf00      	nop
 8002a52:	3724      	adds	r7, #36	@ 0x24
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr
 8002a5c:	58000400 	.word	0x58000400

08002a60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	460b      	mov	r3, r1
 8002a6a:	807b      	strh	r3, [r7, #2]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a70:	787b      	ldrb	r3, [r7, #1]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a76:	887a      	ldrh	r2, [r7, #2]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002a7c:	e003      	b.n	8002a86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002a7e:	887b      	ldrh	r3, [r7, #2]
 8002a80:	041a      	lsls	r2, r3, #16
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	619a      	str	r2, [r3, #24]
}
 8002a86:	bf00      	nop
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b086      	sub	sp, #24
 8002a96:	af02      	add	r7, sp, #8
 8002a98:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e0fe      	b.n	8002ca2 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d106      	bne.n	8002abe <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f7fe f93b 	bl	8000d34 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2203      	movs	r2, #3
 8002ac2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f005 fb80 	bl	80081d0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6818      	ldr	r0, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	7c1a      	ldrb	r2, [r3, #16]
 8002ad8:	f88d 2000 	strb.w	r2, [sp]
 8002adc:	3304      	adds	r3, #4
 8002ade:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ae0:	f005 fb04 	bl	80080ec <USB_CoreInit>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d005      	beq.n	8002af6 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2202      	movs	r2, #2
 8002aee:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e0d5      	b.n	8002ca2 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2100      	movs	r1, #0
 8002afc:	4618      	mov	r0, r3
 8002afe:	f005 fb78 	bl	80081f2 <USB_SetCurrentMode>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d005      	beq.n	8002b14 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2202      	movs	r2, #2
 8002b0c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e0c6      	b.n	8002ca2 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b14:	2300      	movs	r3, #0
 8002b16:	73fb      	strb	r3, [r7, #15]
 8002b18:	e04a      	b.n	8002bb0 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b1a:	7bfa      	ldrb	r2, [r7, #15]
 8002b1c:	6879      	ldr	r1, [r7, #4]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	00db      	lsls	r3, r3, #3
 8002b22:	4413      	add	r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	440b      	add	r3, r1
 8002b28:	3315      	adds	r3, #21
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b2e:	7bfa      	ldrb	r2, [r7, #15]
 8002b30:	6879      	ldr	r1, [r7, #4]
 8002b32:	4613      	mov	r3, r2
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	4413      	add	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	440b      	add	r3, r1
 8002b3c:	3314      	adds	r3, #20
 8002b3e:	7bfa      	ldrb	r2, [r7, #15]
 8002b40:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b42:	7bfa      	ldrb	r2, [r7, #15]
 8002b44:	7bfb      	ldrb	r3, [r7, #15]
 8002b46:	b298      	uxth	r0, r3
 8002b48:	6879      	ldr	r1, [r7, #4]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	4413      	add	r3, r2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	440b      	add	r3, r1
 8002b54:	332e      	adds	r3, #46	@ 0x2e
 8002b56:	4602      	mov	r2, r0
 8002b58:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b5a:	7bfa      	ldrb	r2, [r7, #15]
 8002b5c:	6879      	ldr	r1, [r7, #4]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	00db      	lsls	r3, r3, #3
 8002b62:	4413      	add	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	440b      	add	r3, r1
 8002b68:	3318      	adds	r3, #24
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b6e:	7bfa      	ldrb	r2, [r7, #15]
 8002b70:	6879      	ldr	r1, [r7, #4]
 8002b72:	4613      	mov	r3, r2
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	4413      	add	r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	440b      	add	r3, r1
 8002b7c:	331c      	adds	r3, #28
 8002b7e:	2200      	movs	r2, #0
 8002b80:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b82:	7bfa      	ldrb	r2, [r7, #15]
 8002b84:	6879      	ldr	r1, [r7, #4]
 8002b86:	4613      	mov	r3, r2
 8002b88:	00db      	lsls	r3, r3, #3
 8002b8a:	4413      	add	r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	440b      	add	r3, r1
 8002b90:	3320      	adds	r3, #32
 8002b92:	2200      	movs	r2, #0
 8002b94:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b96:	7bfa      	ldrb	r2, [r7, #15]
 8002b98:	6879      	ldr	r1, [r7, #4]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	00db      	lsls	r3, r3, #3
 8002b9e:	4413      	add	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	440b      	add	r3, r1
 8002ba4:	3324      	adds	r3, #36	@ 0x24
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002baa:	7bfb      	ldrb	r3, [r7, #15]
 8002bac:	3301      	adds	r3, #1
 8002bae:	73fb      	strb	r3, [r7, #15]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	791b      	ldrb	r3, [r3, #4]
 8002bb4:	7bfa      	ldrb	r2, [r7, #15]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d3af      	bcc.n	8002b1a <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bba:	2300      	movs	r3, #0
 8002bbc:	73fb      	strb	r3, [r7, #15]
 8002bbe:	e044      	b.n	8002c4a <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002bc0:	7bfa      	ldrb	r2, [r7, #15]
 8002bc2:	6879      	ldr	r1, [r7, #4]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	4413      	add	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	440b      	add	r3, r1
 8002bce:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002bd6:	7bfa      	ldrb	r2, [r7, #15]
 8002bd8:	6879      	ldr	r1, [r7, #4]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	00db      	lsls	r3, r3, #3
 8002bde:	4413      	add	r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	440b      	add	r3, r1
 8002be4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002be8:	7bfa      	ldrb	r2, [r7, #15]
 8002bea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002bec:	7bfa      	ldrb	r2, [r7, #15]
 8002bee:	6879      	ldr	r1, [r7, #4]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	4413      	add	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	440b      	add	r3, r1
 8002bfa:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002bfe:	2200      	movs	r2, #0
 8002c00:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c02:	7bfa      	ldrb	r2, [r7, #15]
 8002c04:	6879      	ldr	r1, [r7, #4]
 8002c06:	4613      	mov	r3, r2
 8002c08:	00db      	lsls	r3, r3, #3
 8002c0a:	4413      	add	r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	440b      	add	r3, r1
 8002c10:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002c14:	2200      	movs	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c18:	7bfa      	ldrb	r2, [r7, #15]
 8002c1a:	6879      	ldr	r1, [r7, #4]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	4413      	add	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	440b      	add	r3, r1
 8002c26:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c2e:	7bfa      	ldrb	r2, [r7, #15]
 8002c30:	6879      	ldr	r1, [r7, #4]
 8002c32:	4613      	mov	r3, r2
 8002c34:	00db      	lsls	r3, r3, #3
 8002c36:	4413      	add	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	440b      	add	r3, r1
 8002c3c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c44:	7bfb      	ldrb	r3, [r7, #15]
 8002c46:	3301      	adds	r3, #1
 8002c48:	73fb      	strb	r3, [r7, #15]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	791b      	ldrb	r3, [r3, #4]
 8002c4e:	7bfa      	ldrb	r2, [r7, #15]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d3b5      	bcc.n	8002bc0 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6818      	ldr	r0, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	7c1a      	ldrb	r2, [r3, #16]
 8002c5c:	f88d 2000 	strb.w	r2, [sp]
 8002c60:	3304      	adds	r3, #4
 8002c62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c64:	f005 fb12 	bl	800828c <USB_DevInit>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d005      	beq.n	8002c7a <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2202      	movs	r2, #2
 8002c72:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e013      	b.n	8002ca2 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	7b1b      	ldrb	r3, [r3, #12]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d102      	bne.n	8002c96 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 f80b 	bl	8002cac <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f005 fccd 	bl	800863a <USB_DevDisconnect>

  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3710      	adds	r7, #16
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
	...

08002cac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002cda:	4b05      	ldr	r3, [pc, #20]	@ (8002cf0 <HAL_PCDEx_ActivateLPM+0x44>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3714      	adds	r7, #20
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr
 8002cf0:	10000003 	.word	0x10000003

08002cf4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002cfc:	4b19      	ldr	r3, [pc, #100]	@ (8002d64 <HAL_PWREx_ConfigSupply+0x70>)
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	f003 0304 	and.w	r3, r3, #4
 8002d04:	2b04      	cmp	r3, #4
 8002d06:	d00a      	beq.n	8002d1e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002d08:	4b16      	ldr	r3, [pc, #88]	@ (8002d64 <HAL_PWREx_ConfigSupply+0x70>)
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	f003 0307 	and.w	r3, r3, #7
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d001      	beq.n	8002d1a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e01f      	b.n	8002d5a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	e01d      	b.n	8002d5a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002d1e:	4b11      	ldr	r3, [pc, #68]	@ (8002d64 <HAL_PWREx_ConfigSupply+0x70>)
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	f023 0207 	bic.w	r2, r3, #7
 8002d26:	490f      	ldr	r1, [pc, #60]	@ (8002d64 <HAL_PWREx_ConfigSupply+0x70>)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002d2e:	f7fe f9ef 	bl	8001110 <HAL_GetTick>
 8002d32:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002d34:	e009      	b.n	8002d4a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002d36:	f7fe f9eb 	bl	8001110 <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002d44:	d901      	bls.n	8002d4a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e007      	b.n	8002d5a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002d4a:	4b06      	ldr	r3, [pc, #24]	@ (8002d64 <HAL_PWREx_ConfigSupply+0x70>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d56:	d1ee      	bne.n	8002d36 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3710      	adds	r7, #16
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	58024800 	.word	0x58024800

08002d68 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002d6c:	4b05      	ldr	r3, [pc, #20]	@ (8002d84 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	4a04      	ldr	r2, [pc, #16]	@ (8002d84 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002d72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d76:	60d3      	str	r3, [r2, #12]
}
 8002d78:	bf00      	nop
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	58024800 	.word	0x58024800

08002d88 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b08c      	sub	sp, #48	@ 0x30
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d102      	bne.n	8002d9c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	f000 bc48 	b.w	800362c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0301 	and.w	r3, r3, #1
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f000 8088 	beq.w	8002eba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002daa:	4b99      	ldr	r3, [pc, #612]	@ (8003010 <HAL_RCC_OscConfig+0x288>)
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002db4:	4b96      	ldr	r3, [pc, #600]	@ (8003010 <HAL_RCC_OscConfig+0x288>)
 8002db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002db8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002dba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dbc:	2b10      	cmp	r3, #16
 8002dbe:	d007      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x48>
 8002dc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dc2:	2b18      	cmp	r3, #24
 8002dc4:	d111      	bne.n	8002dea <HAL_RCC_OscConfig+0x62>
 8002dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dc8:	f003 0303 	and.w	r3, r3, #3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d10c      	bne.n	8002dea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dd0:	4b8f      	ldr	r3, [pc, #572]	@ (8003010 <HAL_RCC_OscConfig+0x288>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d06d      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x130>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d169      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	f000 bc21 	b.w	800362c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002df2:	d106      	bne.n	8002e02 <HAL_RCC_OscConfig+0x7a>
 8002df4:	4b86      	ldr	r3, [pc, #536]	@ (8003010 <HAL_RCC_OscConfig+0x288>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a85      	ldr	r2, [pc, #532]	@ (8003010 <HAL_RCC_OscConfig+0x288>)
 8002dfa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dfe:	6013      	str	r3, [r2, #0]
 8002e00:	e02e      	b.n	8002e60 <HAL_RCC_OscConfig+0xd8>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d10c      	bne.n	8002e24 <HAL_RCC_OscConfig+0x9c>
 8002e0a:	4b81      	ldr	r3, [pc, #516]	@ (8003010 <HAL_RCC_OscConfig+0x288>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a80      	ldr	r2, [pc, #512]	@ (8003010 <HAL_RCC_OscConfig+0x288>)
 8002e10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e14:	6013      	str	r3, [r2, #0]
 8002e16:	4b7e      	ldr	r3, [pc, #504]	@ (8003010 <HAL_RCC_OscConfig+0x288>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a7d      	ldr	r2, [pc, #500]	@ (8003010 <HAL_RCC_OscConfig+0x288>)
 8002e1c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e20:	6013      	str	r3, [r2, #0]
 8002e22:	e01d      	b.n	8002e60 <HAL_RCC_OscConfig+0xd8>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e2c:	d10c      	bne.n	8002e48 <HAL_RCC_OscConfig+0xc0>
 8002e2e:	4b78      	ldr	r3, [pc, #480]	@ (8003010 <HAL_RCC_OscConfig+0x288>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a77      	ldr	r2, [pc, #476]	@ (8003010 <HAL_RCC_OscConfig+0x288>)
 8002e34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e38:	6013      	str	r3, [r2, #0]
 8002e3a:	4b75      	ldr	r3, [pc, #468]	@ (8003010 <HAL_RCC_OscConfig+0x288>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a74      	ldr	r2, [pc, #464]	@ (8003010 <HAL_RCC_OscConfig+0x288>)
 8002e40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e44:	6013      	str	r3, [r2, #0]
 8002e46:	e00b      	b.n	8002e60 <HAL_RCC_OscConfig+0xd8>
 8002e48:	4b71      	ldr	r3, [pc, #452]	@ (8003010 <HAL_RCC_OscConfig+0x288>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a70      	ldr	r2, [pc, #448]	@ (8003010 <HAL_RCC_OscConfig+0x288>)
 8002e4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e52:	6013      	str	r3, [r2, #0]
 8002e54:	4b6e      	ldr	r3, [pc, #440]	@ (8003010 <HAL_RCC_OscConfig+0x288>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a6d      	ldr	r2, [pc, #436]	@ (8003010 <HAL_RCC_OscConfig+0x288>)
 8002e5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d013      	beq.n	8002e90 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e68:	f7fe f952 	bl	8001110 <HAL_GetTick>
 8002e6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e70:	f7fe f94e 	bl	8001110 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b64      	cmp	r3, #100	@ 0x64
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e3d4      	b.n	800362c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e82:	4b63      	ldr	r3, [pc, #396]	@ (8003010 <HAL_RCC_OscConfig+0x288>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d0f0      	beq.n	8002e70 <HAL_RCC_OscConfig+0xe8>
 8002e8e:	e014      	b.n	8002eba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e90:	f7fe f93e 	bl	8001110 <HAL_GetTick>
 8002e94:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e96:	e008      	b.n	8002eaa <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e98:	f7fe f93a 	bl	8001110 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b64      	cmp	r3, #100	@ 0x64
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e3c0      	b.n	800362c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002eaa:	4b59      	ldr	r3, [pc, #356]	@ (8003010 <HAL_RCC_OscConfig+0x288>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1f0      	bne.n	8002e98 <HAL_RCC_OscConfig+0x110>
 8002eb6:	e000      	b.n	8002eba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f000 80ca 	beq.w	800305c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ec8:	4b51      	ldr	r3, [pc, #324]	@ (8003010 <HAL_RCC_OscConfig+0x288>)
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ed0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ed2:	4b4f      	ldr	r3, [pc, #316]	@ (8003010 <HAL_RCC_OscConfig+0x288>)
 8002ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ed6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002ed8:	6a3b      	ldr	r3, [r7, #32]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d007      	beq.n	8002eee <HAL_RCC_OscConfig+0x166>
 8002ede:	6a3b      	ldr	r3, [r7, #32]
 8002ee0:	2b18      	cmp	r3, #24
 8002ee2:	d156      	bne.n	8002f92 <HAL_RCC_OscConfig+0x20a>
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	f003 0303 	and.w	r3, r3, #3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d151      	bne.n	8002f92 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002eee:	4b48      	ldr	r3, [pc, #288]	@ (8003010 <HAL_RCC_OscConfig+0x288>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0304 	and.w	r3, r3, #4
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d005      	beq.n	8002f06 <HAL_RCC_OscConfig+0x17e>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d101      	bne.n	8002f06 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e392      	b.n	800362c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002f06:	4b42      	ldr	r3, [pc, #264]	@ (8003010 <HAL_RCC_OscConfig+0x288>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f023 0219 	bic.w	r2, r3, #25
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	493f      	ldr	r1, [pc, #252]	@ (8003010 <HAL_RCC_OscConfig+0x288>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f18:	f7fe f8fa 	bl	8001110 <HAL_GetTick>
 8002f1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f1e:	e008      	b.n	8002f32 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f20:	f7fe f8f6 	bl	8001110 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e37c      	b.n	800362c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f32:	4b37      	ldr	r3, [pc, #220]	@ (8003010 <HAL_RCC_OscConfig+0x288>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0304 	and.w	r3, r3, #4
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d0f0      	beq.n	8002f20 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f3e:	f7fe f917 	bl	8001170 <HAL_GetREVID>
 8002f42:	4603      	mov	r3, r0
 8002f44:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d817      	bhi.n	8002f7c <HAL_RCC_OscConfig+0x1f4>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	2b40      	cmp	r3, #64	@ 0x40
 8002f52:	d108      	bne.n	8002f66 <HAL_RCC_OscConfig+0x1de>
 8002f54:	4b2e      	ldr	r3, [pc, #184]	@ (8003010 <HAL_RCC_OscConfig+0x288>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002f5c:	4a2c      	ldr	r2, [pc, #176]	@ (8003010 <HAL_RCC_OscConfig+0x288>)
 8002f5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f62:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f64:	e07a      	b.n	800305c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f66:	4b2a      	ldr	r3, [pc, #168]	@ (8003010 <HAL_RCC_OscConfig+0x288>)
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	031b      	lsls	r3, r3, #12
 8002f74:	4926      	ldr	r1, [pc, #152]	@ (8003010 <HAL_RCC_OscConfig+0x288>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f7a:	e06f      	b.n	800305c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f7c:	4b24      	ldr	r3, [pc, #144]	@ (8003010 <HAL_RCC_OscConfig+0x288>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	691b      	ldr	r3, [r3, #16]
 8002f88:	061b      	lsls	r3, r3, #24
 8002f8a:	4921      	ldr	r1, [pc, #132]	@ (8003010 <HAL_RCC_OscConfig+0x288>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f90:	e064      	b.n	800305c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d047      	beq.n	800302a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002f9a:	4b1d      	ldr	r3, [pc, #116]	@ (8003010 <HAL_RCC_OscConfig+0x288>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f023 0219 	bic.w	r2, r3, #25
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	491a      	ldr	r1, [pc, #104]	@ (8003010 <HAL_RCC_OscConfig+0x288>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fac:	f7fe f8b0 	bl	8001110 <HAL_GetTick>
 8002fb0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fb4:	f7fe f8ac 	bl	8001110 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e332      	b.n	800362c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002fc6:	4b12      	ldr	r3, [pc, #72]	@ (8003010 <HAL_RCC_OscConfig+0x288>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0304 	and.w	r3, r3, #4
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d0f0      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fd2:	f7fe f8cd 	bl	8001170 <HAL_GetREVID>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d819      	bhi.n	8003014 <HAL_RCC_OscConfig+0x28c>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	2b40      	cmp	r3, #64	@ 0x40
 8002fe6:	d108      	bne.n	8002ffa <HAL_RCC_OscConfig+0x272>
 8002fe8:	4b09      	ldr	r3, [pc, #36]	@ (8003010 <HAL_RCC_OscConfig+0x288>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002ff0:	4a07      	ldr	r2, [pc, #28]	@ (8003010 <HAL_RCC_OscConfig+0x288>)
 8002ff2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ff6:	6053      	str	r3, [r2, #4]
 8002ff8:	e030      	b.n	800305c <HAL_RCC_OscConfig+0x2d4>
 8002ffa:	4b05      	ldr	r3, [pc, #20]	@ (8003010 <HAL_RCC_OscConfig+0x288>)
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	031b      	lsls	r3, r3, #12
 8003008:	4901      	ldr	r1, [pc, #4]	@ (8003010 <HAL_RCC_OscConfig+0x288>)
 800300a:	4313      	orrs	r3, r2
 800300c:	604b      	str	r3, [r1, #4]
 800300e:	e025      	b.n	800305c <HAL_RCC_OscConfig+0x2d4>
 8003010:	58024400 	.word	0x58024400
 8003014:	4b9a      	ldr	r3, [pc, #616]	@ (8003280 <HAL_RCC_OscConfig+0x4f8>)
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	691b      	ldr	r3, [r3, #16]
 8003020:	061b      	lsls	r3, r3, #24
 8003022:	4997      	ldr	r1, [pc, #604]	@ (8003280 <HAL_RCC_OscConfig+0x4f8>)
 8003024:	4313      	orrs	r3, r2
 8003026:	604b      	str	r3, [r1, #4]
 8003028:	e018      	b.n	800305c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800302a:	4b95      	ldr	r3, [pc, #596]	@ (8003280 <HAL_RCC_OscConfig+0x4f8>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a94      	ldr	r2, [pc, #592]	@ (8003280 <HAL_RCC_OscConfig+0x4f8>)
 8003030:	f023 0301 	bic.w	r3, r3, #1
 8003034:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003036:	f7fe f86b 	bl	8001110 <HAL_GetTick>
 800303a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800303c:	e008      	b.n	8003050 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800303e:	f7fe f867 	bl	8001110 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b02      	cmp	r3, #2
 800304a:	d901      	bls.n	8003050 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e2ed      	b.n	800362c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003050:	4b8b      	ldr	r3, [pc, #556]	@ (8003280 <HAL_RCC_OscConfig+0x4f8>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0304 	and.w	r3, r3, #4
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1f0      	bne.n	800303e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0310 	and.w	r3, r3, #16
 8003064:	2b00      	cmp	r3, #0
 8003066:	f000 80a9 	beq.w	80031bc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800306a:	4b85      	ldr	r3, [pc, #532]	@ (8003280 <HAL_RCC_OscConfig+0x4f8>)
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003072:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003074:	4b82      	ldr	r3, [pc, #520]	@ (8003280 <HAL_RCC_OscConfig+0x4f8>)
 8003076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003078:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	2b08      	cmp	r3, #8
 800307e:	d007      	beq.n	8003090 <HAL_RCC_OscConfig+0x308>
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	2b18      	cmp	r3, #24
 8003084:	d13a      	bne.n	80030fc <HAL_RCC_OscConfig+0x374>
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	f003 0303 	and.w	r3, r3, #3
 800308c:	2b01      	cmp	r3, #1
 800308e:	d135      	bne.n	80030fc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003090:	4b7b      	ldr	r3, [pc, #492]	@ (8003280 <HAL_RCC_OscConfig+0x4f8>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003098:	2b00      	cmp	r3, #0
 800309a:	d005      	beq.n	80030a8 <HAL_RCC_OscConfig+0x320>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	69db      	ldr	r3, [r3, #28]
 80030a0:	2b80      	cmp	r3, #128	@ 0x80
 80030a2:	d001      	beq.n	80030a8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e2c1      	b.n	800362c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80030a8:	f7fe f862 	bl	8001170 <HAL_GetREVID>
 80030ac:	4603      	mov	r3, r0
 80030ae:	f241 0203 	movw	r2, #4099	@ 0x1003
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d817      	bhi.n	80030e6 <HAL_RCC_OscConfig+0x35e>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a1b      	ldr	r3, [r3, #32]
 80030ba:	2b20      	cmp	r3, #32
 80030bc:	d108      	bne.n	80030d0 <HAL_RCC_OscConfig+0x348>
 80030be:	4b70      	ldr	r3, [pc, #448]	@ (8003280 <HAL_RCC_OscConfig+0x4f8>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80030c6:	4a6e      	ldr	r2, [pc, #440]	@ (8003280 <HAL_RCC_OscConfig+0x4f8>)
 80030c8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80030cc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80030ce:	e075      	b.n	80031bc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80030d0:	4b6b      	ldr	r3, [pc, #428]	@ (8003280 <HAL_RCC_OscConfig+0x4f8>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a1b      	ldr	r3, [r3, #32]
 80030dc:	069b      	lsls	r3, r3, #26
 80030de:	4968      	ldr	r1, [pc, #416]	@ (8003280 <HAL_RCC_OscConfig+0x4f8>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80030e4:	e06a      	b.n	80031bc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80030e6:	4b66      	ldr	r3, [pc, #408]	@ (8003280 <HAL_RCC_OscConfig+0x4f8>)
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a1b      	ldr	r3, [r3, #32]
 80030f2:	061b      	lsls	r3, r3, #24
 80030f4:	4962      	ldr	r1, [pc, #392]	@ (8003280 <HAL_RCC_OscConfig+0x4f8>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80030fa:	e05f      	b.n	80031bc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	69db      	ldr	r3, [r3, #28]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d042      	beq.n	800318a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003104:	4b5e      	ldr	r3, [pc, #376]	@ (8003280 <HAL_RCC_OscConfig+0x4f8>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a5d      	ldr	r2, [pc, #372]	@ (8003280 <HAL_RCC_OscConfig+0x4f8>)
 800310a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800310e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003110:	f7fd fffe 	bl	8001110 <HAL_GetTick>
 8003114:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003116:	e008      	b.n	800312a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003118:	f7fd fffa 	bl	8001110 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e280      	b.n	800362c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800312a:	4b55      	ldr	r3, [pc, #340]	@ (8003280 <HAL_RCC_OscConfig+0x4f8>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003132:	2b00      	cmp	r3, #0
 8003134:	d0f0      	beq.n	8003118 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003136:	f7fe f81b 	bl	8001170 <HAL_GetREVID>
 800313a:	4603      	mov	r3, r0
 800313c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003140:	4293      	cmp	r3, r2
 8003142:	d817      	bhi.n	8003174 <HAL_RCC_OscConfig+0x3ec>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a1b      	ldr	r3, [r3, #32]
 8003148:	2b20      	cmp	r3, #32
 800314a:	d108      	bne.n	800315e <HAL_RCC_OscConfig+0x3d6>
 800314c:	4b4c      	ldr	r3, [pc, #304]	@ (8003280 <HAL_RCC_OscConfig+0x4f8>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003154:	4a4a      	ldr	r2, [pc, #296]	@ (8003280 <HAL_RCC_OscConfig+0x4f8>)
 8003156:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800315a:	6053      	str	r3, [r2, #4]
 800315c:	e02e      	b.n	80031bc <HAL_RCC_OscConfig+0x434>
 800315e:	4b48      	ldr	r3, [pc, #288]	@ (8003280 <HAL_RCC_OscConfig+0x4f8>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	069b      	lsls	r3, r3, #26
 800316c:	4944      	ldr	r1, [pc, #272]	@ (8003280 <HAL_RCC_OscConfig+0x4f8>)
 800316e:	4313      	orrs	r3, r2
 8003170:	604b      	str	r3, [r1, #4]
 8003172:	e023      	b.n	80031bc <HAL_RCC_OscConfig+0x434>
 8003174:	4b42      	ldr	r3, [pc, #264]	@ (8003280 <HAL_RCC_OscConfig+0x4f8>)
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a1b      	ldr	r3, [r3, #32]
 8003180:	061b      	lsls	r3, r3, #24
 8003182:	493f      	ldr	r1, [pc, #252]	@ (8003280 <HAL_RCC_OscConfig+0x4f8>)
 8003184:	4313      	orrs	r3, r2
 8003186:	60cb      	str	r3, [r1, #12]
 8003188:	e018      	b.n	80031bc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800318a:	4b3d      	ldr	r3, [pc, #244]	@ (8003280 <HAL_RCC_OscConfig+0x4f8>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a3c      	ldr	r2, [pc, #240]	@ (8003280 <HAL_RCC_OscConfig+0x4f8>)
 8003190:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003194:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003196:	f7fd ffbb 	bl	8001110 <HAL_GetTick>
 800319a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800319c:	e008      	b.n	80031b0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800319e:	f7fd ffb7 	bl	8001110 <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d901      	bls.n	80031b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e23d      	b.n	800362c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80031b0:	4b33      	ldr	r3, [pc, #204]	@ (8003280 <HAL_RCC_OscConfig+0x4f8>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d1f0      	bne.n	800319e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0308 	and.w	r3, r3, #8
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d036      	beq.n	8003236 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d019      	beq.n	8003204 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031d0:	4b2b      	ldr	r3, [pc, #172]	@ (8003280 <HAL_RCC_OscConfig+0x4f8>)
 80031d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031d4:	4a2a      	ldr	r2, [pc, #168]	@ (8003280 <HAL_RCC_OscConfig+0x4f8>)
 80031d6:	f043 0301 	orr.w	r3, r3, #1
 80031da:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031dc:	f7fd ff98 	bl	8001110 <HAL_GetTick>
 80031e0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80031e2:	e008      	b.n	80031f6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031e4:	f7fd ff94 	bl	8001110 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e21a      	b.n	800362c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80031f6:	4b22      	ldr	r3, [pc, #136]	@ (8003280 <HAL_RCC_OscConfig+0x4f8>)
 80031f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d0f0      	beq.n	80031e4 <HAL_RCC_OscConfig+0x45c>
 8003202:	e018      	b.n	8003236 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003204:	4b1e      	ldr	r3, [pc, #120]	@ (8003280 <HAL_RCC_OscConfig+0x4f8>)
 8003206:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003208:	4a1d      	ldr	r2, [pc, #116]	@ (8003280 <HAL_RCC_OscConfig+0x4f8>)
 800320a:	f023 0301 	bic.w	r3, r3, #1
 800320e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003210:	f7fd ff7e 	bl	8001110 <HAL_GetTick>
 8003214:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003216:	e008      	b.n	800322a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003218:	f7fd ff7a 	bl	8001110 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b02      	cmp	r3, #2
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e200      	b.n	800362c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800322a:	4b15      	ldr	r3, [pc, #84]	@ (8003280 <HAL_RCC_OscConfig+0x4f8>)
 800322c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1f0      	bne.n	8003218 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0320 	and.w	r3, r3, #32
 800323e:	2b00      	cmp	r3, #0
 8003240:	d039      	beq.n	80032b6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d01c      	beq.n	8003284 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800324a:	4b0d      	ldr	r3, [pc, #52]	@ (8003280 <HAL_RCC_OscConfig+0x4f8>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a0c      	ldr	r2, [pc, #48]	@ (8003280 <HAL_RCC_OscConfig+0x4f8>)
 8003250:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003254:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003256:	f7fd ff5b 	bl	8001110 <HAL_GetTick>
 800325a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800325c:	e008      	b.n	8003270 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800325e:	f7fd ff57 	bl	8001110 <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	2b02      	cmp	r3, #2
 800326a:	d901      	bls.n	8003270 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e1dd      	b.n	800362c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003270:	4b03      	ldr	r3, [pc, #12]	@ (8003280 <HAL_RCC_OscConfig+0x4f8>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d0f0      	beq.n	800325e <HAL_RCC_OscConfig+0x4d6>
 800327c:	e01b      	b.n	80032b6 <HAL_RCC_OscConfig+0x52e>
 800327e:	bf00      	nop
 8003280:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003284:	4b9b      	ldr	r3, [pc, #620]	@ (80034f4 <HAL_RCC_OscConfig+0x76c>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a9a      	ldr	r2, [pc, #616]	@ (80034f4 <HAL_RCC_OscConfig+0x76c>)
 800328a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800328e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003290:	f7fd ff3e 	bl	8001110 <HAL_GetTick>
 8003294:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003298:	f7fd ff3a 	bl	8001110 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e1c0      	b.n	800362c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80032aa:	4b92      	ldr	r3, [pc, #584]	@ (80034f4 <HAL_RCC_OscConfig+0x76c>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1f0      	bne.n	8003298 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0304 	and.w	r3, r3, #4
 80032be:	2b00      	cmp	r3, #0
 80032c0:	f000 8081 	beq.w	80033c6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80032c4:	4b8c      	ldr	r3, [pc, #560]	@ (80034f8 <HAL_RCC_OscConfig+0x770>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a8b      	ldr	r2, [pc, #556]	@ (80034f8 <HAL_RCC_OscConfig+0x770>)
 80032ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032d0:	f7fd ff1e 	bl	8001110 <HAL_GetTick>
 80032d4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032d6:	e008      	b.n	80032ea <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032d8:	f7fd ff1a 	bl	8001110 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b64      	cmp	r3, #100	@ 0x64
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e1a0      	b.n	800362c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032ea:	4b83      	ldr	r3, [pc, #524]	@ (80034f8 <HAL_RCC_OscConfig+0x770>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d0f0      	beq.n	80032d8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d106      	bne.n	800330c <HAL_RCC_OscConfig+0x584>
 80032fe:	4b7d      	ldr	r3, [pc, #500]	@ (80034f4 <HAL_RCC_OscConfig+0x76c>)
 8003300:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003302:	4a7c      	ldr	r2, [pc, #496]	@ (80034f4 <HAL_RCC_OscConfig+0x76c>)
 8003304:	f043 0301 	orr.w	r3, r3, #1
 8003308:	6713      	str	r3, [r2, #112]	@ 0x70
 800330a:	e02d      	b.n	8003368 <HAL_RCC_OscConfig+0x5e0>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d10c      	bne.n	800332e <HAL_RCC_OscConfig+0x5a6>
 8003314:	4b77      	ldr	r3, [pc, #476]	@ (80034f4 <HAL_RCC_OscConfig+0x76c>)
 8003316:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003318:	4a76      	ldr	r2, [pc, #472]	@ (80034f4 <HAL_RCC_OscConfig+0x76c>)
 800331a:	f023 0301 	bic.w	r3, r3, #1
 800331e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003320:	4b74      	ldr	r3, [pc, #464]	@ (80034f4 <HAL_RCC_OscConfig+0x76c>)
 8003322:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003324:	4a73      	ldr	r2, [pc, #460]	@ (80034f4 <HAL_RCC_OscConfig+0x76c>)
 8003326:	f023 0304 	bic.w	r3, r3, #4
 800332a:	6713      	str	r3, [r2, #112]	@ 0x70
 800332c:	e01c      	b.n	8003368 <HAL_RCC_OscConfig+0x5e0>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	2b05      	cmp	r3, #5
 8003334:	d10c      	bne.n	8003350 <HAL_RCC_OscConfig+0x5c8>
 8003336:	4b6f      	ldr	r3, [pc, #444]	@ (80034f4 <HAL_RCC_OscConfig+0x76c>)
 8003338:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800333a:	4a6e      	ldr	r2, [pc, #440]	@ (80034f4 <HAL_RCC_OscConfig+0x76c>)
 800333c:	f043 0304 	orr.w	r3, r3, #4
 8003340:	6713      	str	r3, [r2, #112]	@ 0x70
 8003342:	4b6c      	ldr	r3, [pc, #432]	@ (80034f4 <HAL_RCC_OscConfig+0x76c>)
 8003344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003346:	4a6b      	ldr	r2, [pc, #428]	@ (80034f4 <HAL_RCC_OscConfig+0x76c>)
 8003348:	f043 0301 	orr.w	r3, r3, #1
 800334c:	6713      	str	r3, [r2, #112]	@ 0x70
 800334e:	e00b      	b.n	8003368 <HAL_RCC_OscConfig+0x5e0>
 8003350:	4b68      	ldr	r3, [pc, #416]	@ (80034f4 <HAL_RCC_OscConfig+0x76c>)
 8003352:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003354:	4a67      	ldr	r2, [pc, #412]	@ (80034f4 <HAL_RCC_OscConfig+0x76c>)
 8003356:	f023 0301 	bic.w	r3, r3, #1
 800335a:	6713      	str	r3, [r2, #112]	@ 0x70
 800335c:	4b65      	ldr	r3, [pc, #404]	@ (80034f4 <HAL_RCC_OscConfig+0x76c>)
 800335e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003360:	4a64      	ldr	r2, [pc, #400]	@ (80034f4 <HAL_RCC_OscConfig+0x76c>)
 8003362:	f023 0304 	bic.w	r3, r3, #4
 8003366:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d015      	beq.n	800339c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003370:	f7fd fece 	bl	8001110 <HAL_GetTick>
 8003374:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003376:	e00a      	b.n	800338e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003378:	f7fd feca 	bl	8001110 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003386:	4293      	cmp	r3, r2
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e14e      	b.n	800362c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800338e:	4b59      	ldr	r3, [pc, #356]	@ (80034f4 <HAL_RCC_OscConfig+0x76c>)
 8003390:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d0ee      	beq.n	8003378 <HAL_RCC_OscConfig+0x5f0>
 800339a:	e014      	b.n	80033c6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800339c:	f7fd feb8 	bl	8001110 <HAL_GetTick>
 80033a0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80033a2:	e00a      	b.n	80033ba <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033a4:	f7fd feb4 	bl	8001110 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e138      	b.n	800362c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80033ba:	4b4e      	ldr	r3, [pc, #312]	@ (80034f4 <HAL_RCC_OscConfig+0x76c>)
 80033bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1ee      	bne.n	80033a4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	f000 812d 	beq.w	800362a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80033d0:	4b48      	ldr	r3, [pc, #288]	@ (80034f4 <HAL_RCC_OscConfig+0x76c>)
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80033d8:	2b18      	cmp	r3, #24
 80033da:	f000 80bd 	beq.w	8003558 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	f040 809e 	bne.w	8003524 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033e8:	4b42      	ldr	r3, [pc, #264]	@ (80034f4 <HAL_RCC_OscConfig+0x76c>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a41      	ldr	r2, [pc, #260]	@ (80034f4 <HAL_RCC_OscConfig+0x76c>)
 80033ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80033f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f4:	f7fd fe8c 	bl	8001110 <HAL_GetTick>
 80033f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80033fa:	e008      	b.n	800340e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033fc:	f7fd fe88 	bl	8001110 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b02      	cmp	r3, #2
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e10e      	b.n	800362c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800340e:	4b39      	ldr	r3, [pc, #228]	@ (80034f4 <HAL_RCC_OscConfig+0x76c>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1f0      	bne.n	80033fc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800341a:	4b36      	ldr	r3, [pc, #216]	@ (80034f4 <HAL_RCC_OscConfig+0x76c>)
 800341c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800341e:	4b37      	ldr	r3, [pc, #220]	@ (80034fc <HAL_RCC_OscConfig+0x774>)
 8003420:	4013      	ands	r3, r2
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800342a:	0112      	lsls	r2, r2, #4
 800342c:	430a      	orrs	r2, r1
 800342e:	4931      	ldr	r1, [pc, #196]	@ (80034f4 <HAL_RCC_OscConfig+0x76c>)
 8003430:	4313      	orrs	r3, r2
 8003432:	628b      	str	r3, [r1, #40]	@ 0x28
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003438:	3b01      	subs	r3, #1
 800343a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003442:	3b01      	subs	r3, #1
 8003444:	025b      	lsls	r3, r3, #9
 8003446:	b29b      	uxth	r3, r3
 8003448:	431a      	orrs	r2, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800344e:	3b01      	subs	r3, #1
 8003450:	041b      	lsls	r3, r3, #16
 8003452:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003456:	431a      	orrs	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800345c:	3b01      	subs	r3, #1
 800345e:	061b      	lsls	r3, r3, #24
 8003460:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003464:	4923      	ldr	r1, [pc, #140]	@ (80034f4 <HAL_RCC_OscConfig+0x76c>)
 8003466:	4313      	orrs	r3, r2
 8003468:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800346a:	4b22      	ldr	r3, [pc, #136]	@ (80034f4 <HAL_RCC_OscConfig+0x76c>)
 800346c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800346e:	4a21      	ldr	r2, [pc, #132]	@ (80034f4 <HAL_RCC_OscConfig+0x76c>)
 8003470:	f023 0301 	bic.w	r3, r3, #1
 8003474:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003476:	4b1f      	ldr	r3, [pc, #124]	@ (80034f4 <HAL_RCC_OscConfig+0x76c>)
 8003478:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800347a:	4b21      	ldr	r3, [pc, #132]	@ (8003500 <HAL_RCC_OscConfig+0x778>)
 800347c:	4013      	ands	r3, r2
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003482:	00d2      	lsls	r2, r2, #3
 8003484:	491b      	ldr	r1, [pc, #108]	@ (80034f4 <HAL_RCC_OscConfig+0x76c>)
 8003486:	4313      	orrs	r3, r2
 8003488:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800348a:	4b1a      	ldr	r3, [pc, #104]	@ (80034f4 <HAL_RCC_OscConfig+0x76c>)
 800348c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800348e:	f023 020c 	bic.w	r2, r3, #12
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003496:	4917      	ldr	r1, [pc, #92]	@ (80034f4 <HAL_RCC_OscConfig+0x76c>)
 8003498:	4313      	orrs	r3, r2
 800349a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800349c:	4b15      	ldr	r3, [pc, #84]	@ (80034f4 <HAL_RCC_OscConfig+0x76c>)
 800349e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034a0:	f023 0202 	bic.w	r2, r3, #2
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034a8:	4912      	ldr	r1, [pc, #72]	@ (80034f4 <HAL_RCC_OscConfig+0x76c>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80034ae:	4b11      	ldr	r3, [pc, #68]	@ (80034f4 <HAL_RCC_OscConfig+0x76c>)
 80034b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034b2:	4a10      	ldr	r2, [pc, #64]	@ (80034f4 <HAL_RCC_OscConfig+0x76c>)
 80034b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034ba:	4b0e      	ldr	r3, [pc, #56]	@ (80034f4 <HAL_RCC_OscConfig+0x76c>)
 80034bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034be:	4a0d      	ldr	r2, [pc, #52]	@ (80034f4 <HAL_RCC_OscConfig+0x76c>)
 80034c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80034c6:	4b0b      	ldr	r3, [pc, #44]	@ (80034f4 <HAL_RCC_OscConfig+0x76c>)
 80034c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ca:	4a0a      	ldr	r2, [pc, #40]	@ (80034f4 <HAL_RCC_OscConfig+0x76c>)
 80034cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80034d2:	4b08      	ldr	r3, [pc, #32]	@ (80034f4 <HAL_RCC_OscConfig+0x76c>)
 80034d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034d6:	4a07      	ldr	r2, [pc, #28]	@ (80034f4 <HAL_RCC_OscConfig+0x76c>)
 80034d8:	f043 0301 	orr.w	r3, r3, #1
 80034dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034de:	4b05      	ldr	r3, [pc, #20]	@ (80034f4 <HAL_RCC_OscConfig+0x76c>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a04      	ldr	r2, [pc, #16]	@ (80034f4 <HAL_RCC_OscConfig+0x76c>)
 80034e4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ea:	f7fd fe11 	bl	8001110 <HAL_GetTick>
 80034ee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80034f0:	e011      	b.n	8003516 <HAL_RCC_OscConfig+0x78e>
 80034f2:	bf00      	nop
 80034f4:	58024400 	.word	0x58024400
 80034f8:	58024800 	.word	0x58024800
 80034fc:	fffffc0c 	.word	0xfffffc0c
 8003500:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003504:	f7fd fe04 	bl	8001110 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b02      	cmp	r3, #2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e08a      	b.n	800362c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003516:	4b47      	ldr	r3, [pc, #284]	@ (8003634 <HAL_RCC_OscConfig+0x8ac>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d0f0      	beq.n	8003504 <HAL_RCC_OscConfig+0x77c>
 8003522:	e082      	b.n	800362a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003524:	4b43      	ldr	r3, [pc, #268]	@ (8003634 <HAL_RCC_OscConfig+0x8ac>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a42      	ldr	r2, [pc, #264]	@ (8003634 <HAL_RCC_OscConfig+0x8ac>)
 800352a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800352e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003530:	f7fd fdee 	bl	8001110 <HAL_GetTick>
 8003534:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003536:	e008      	b.n	800354a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003538:	f7fd fdea 	bl	8001110 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b02      	cmp	r3, #2
 8003544:	d901      	bls.n	800354a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e070      	b.n	800362c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800354a:	4b3a      	ldr	r3, [pc, #232]	@ (8003634 <HAL_RCC_OscConfig+0x8ac>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1f0      	bne.n	8003538 <HAL_RCC_OscConfig+0x7b0>
 8003556:	e068      	b.n	800362a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003558:	4b36      	ldr	r3, [pc, #216]	@ (8003634 <HAL_RCC_OscConfig+0x8ac>)
 800355a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800355c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800355e:	4b35      	ldr	r3, [pc, #212]	@ (8003634 <HAL_RCC_OscConfig+0x8ac>)
 8003560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003562:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003568:	2b01      	cmp	r3, #1
 800356a:	d031      	beq.n	80035d0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	f003 0203 	and.w	r2, r3, #3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003576:	429a      	cmp	r2, r3
 8003578:	d12a      	bne.n	80035d0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	091b      	lsrs	r3, r3, #4
 800357e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003586:	429a      	cmp	r2, r3
 8003588:	d122      	bne.n	80035d0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003594:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003596:	429a      	cmp	r2, r3
 8003598:	d11a      	bne.n	80035d0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	0a5b      	lsrs	r3, r3, #9
 800359e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035a6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d111      	bne.n	80035d0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	0c1b      	lsrs	r3, r3, #16
 80035b0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035b8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d108      	bne.n	80035d0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	0e1b      	lsrs	r3, r3, #24
 80035c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035ca:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d001      	beq.n	80035d4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e02b      	b.n	800362c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80035d4:	4b17      	ldr	r3, [pc, #92]	@ (8003634 <HAL_RCC_OscConfig+0x8ac>)
 80035d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035d8:	08db      	lsrs	r3, r3, #3
 80035da:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80035de:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035e4:	693a      	ldr	r2, [r7, #16]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d01f      	beq.n	800362a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80035ea:	4b12      	ldr	r3, [pc, #72]	@ (8003634 <HAL_RCC_OscConfig+0x8ac>)
 80035ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ee:	4a11      	ldr	r2, [pc, #68]	@ (8003634 <HAL_RCC_OscConfig+0x8ac>)
 80035f0:	f023 0301 	bic.w	r3, r3, #1
 80035f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80035f6:	f7fd fd8b 	bl	8001110 <HAL_GetTick>
 80035fa:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80035fc:	bf00      	nop
 80035fe:	f7fd fd87 	bl	8001110 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003606:	4293      	cmp	r3, r2
 8003608:	d0f9      	beq.n	80035fe <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800360a:	4b0a      	ldr	r3, [pc, #40]	@ (8003634 <HAL_RCC_OscConfig+0x8ac>)
 800360c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800360e:	4b0a      	ldr	r3, [pc, #40]	@ (8003638 <HAL_RCC_OscConfig+0x8b0>)
 8003610:	4013      	ands	r3, r2
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003616:	00d2      	lsls	r2, r2, #3
 8003618:	4906      	ldr	r1, [pc, #24]	@ (8003634 <HAL_RCC_OscConfig+0x8ac>)
 800361a:	4313      	orrs	r3, r2
 800361c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800361e:	4b05      	ldr	r3, [pc, #20]	@ (8003634 <HAL_RCC_OscConfig+0x8ac>)
 8003620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003622:	4a04      	ldr	r2, [pc, #16]	@ (8003634 <HAL_RCC_OscConfig+0x8ac>)
 8003624:	f043 0301 	orr.w	r3, r3, #1
 8003628:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3730      	adds	r7, #48	@ 0x30
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	58024400 	.word	0x58024400
 8003638:	ffff0007 	.word	0xffff0007

0800363c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b086      	sub	sp, #24
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d101      	bne.n	8003650 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e19c      	b.n	800398a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003650:	4b8a      	ldr	r3, [pc, #552]	@ (800387c <HAL_RCC_ClockConfig+0x240>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 030f 	and.w	r3, r3, #15
 8003658:	683a      	ldr	r2, [r7, #0]
 800365a:	429a      	cmp	r2, r3
 800365c:	d910      	bls.n	8003680 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800365e:	4b87      	ldr	r3, [pc, #540]	@ (800387c <HAL_RCC_ClockConfig+0x240>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f023 020f 	bic.w	r2, r3, #15
 8003666:	4985      	ldr	r1, [pc, #532]	@ (800387c <HAL_RCC_ClockConfig+0x240>)
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	4313      	orrs	r3, r2
 800366c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800366e:	4b83      	ldr	r3, [pc, #524]	@ (800387c <HAL_RCC_ClockConfig+0x240>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 030f 	and.w	r3, r3, #15
 8003676:	683a      	ldr	r2, [r7, #0]
 8003678:	429a      	cmp	r2, r3
 800367a:	d001      	beq.n	8003680 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e184      	b.n	800398a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0304 	and.w	r3, r3, #4
 8003688:	2b00      	cmp	r3, #0
 800368a:	d010      	beq.n	80036ae <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	691a      	ldr	r2, [r3, #16]
 8003690:	4b7b      	ldr	r3, [pc, #492]	@ (8003880 <HAL_RCC_ClockConfig+0x244>)
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003698:	429a      	cmp	r2, r3
 800369a:	d908      	bls.n	80036ae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800369c:	4b78      	ldr	r3, [pc, #480]	@ (8003880 <HAL_RCC_ClockConfig+0x244>)
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	691b      	ldr	r3, [r3, #16]
 80036a8:	4975      	ldr	r1, [pc, #468]	@ (8003880 <HAL_RCC_ClockConfig+0x244>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0308 	and.w	r3, r3, #8
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d010      	beq.n	80036dc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	695a      	ldr	r2, [r3, #20]
 80036be:	4b70      	ldr	r3, [pc, #448]	@ (8003880 <HAL_RCC_ClockConfig+0x244>)
 80036c0:	69db      	ldr	r3, [r3, #28]
 80036c2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d908      	bls.n	80036dc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80036ca:	4b6d      	ldr	r3, [pc, #436]	@ (8003880 <HAL_RCC_ClockConfig+0x244>)
 80036cc:	69db      	ldr	r3, [r3, #28]
 80036ce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	496a      	ldr	r1, [pc, #424]	@ (8003880 <HAL_RCC_ClockConfig+0x244>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0310 	and.w	r3, r3, #16
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d010      	beq.n	800370a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	699a      	ldr	r2, [r3, #24]
 80036ec:	4b64      	ldr	r3, [pc, #400]	@ (8003880 <HAL_RCC_ClockConfig+0x244>)
 80036ee:	69db      	ldr	r3, [r3, #28]
 80036f0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d908      	bls.n	800370a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80036f8:	4b61      	ldr	r3, [pc, #388]	@ (8003880 <HAL_RCC_ClockConfig+0x244>)
 80036fa:	69db      	ldr	r3, [r3, #28]
 80036fc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	495e      	ldr	r1, [pc, #376]	@ (8003880 <HAL_RCC_ClockConfig+0x244>)
 8003706:	4313      	orrs	r3, r2
 8003708:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0320 	and.w	r3, r3, #32
 8003712:	2b00      	cmp	r3, #0
 8003714:	d010      	beq.n	8003738 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	69da      	ldr	r2, [r3, #28]
 800371a:	4b59      	ldr	r3, [pc, #356]	@ (8003880 <HAL_RCC_ClockConfig+0x244>)
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003722:	429a      	cmp	r2, r3
 8003724:	d908      	bls.n	8003738 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003726:	4b56      	ldr	r3, [pc, #344]	@ (8003880 <HAL_RCC_ClockConfig+0x244>)
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	69db      	ldr	r3, [r3, #28]
 8003732:	4953      	ldr	r1, [pc, #332]	@ (8003880 <HAL_RCC_ClockConfig+0x244>)
 8003734:	4313      	orrs	r3, r2
 8003736:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d010      	beq.n	8003766 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	68da      	ldr	r2, [r3, #12]
 8003748:	4b4d      	ldr	r3, [pc, #308]	@ (8003880 <HAL_RCC_ClockConfig+0x244>)
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	f003 030f 	and.w	r3, r3, #15
 8003750:	429a      	cmp	r2, r3
 8003752:	d908      	bls.n	8003766 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003754:	4b4a      	ldr	r3, [pc, #296]	@ (8003880 <HAL_RCC_ClockConfig+0x244>)
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	f023 020f 	bic.w	r2, r3, #15
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	4947      	ldr	r1, [pc, #284]	@ (8003880 <HAL_RCC_ClockConfig+0x244>)
 8003762:	4313      	orrs	r3, r2
 8003764:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b00      	cmp	r3, #0
 8003770:	d055      	beq.n	800381e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003772:	4b43      	ldr	r3, [pc, #268]	@ (8003880 <HAL_RCC_ClockConfig+0x244>)
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	4940      	ldr	r1, [pc, #256]	@ (8003880 <HAL_RCC_ClockConfig+0x244>)
 8003780:	4313      	orrs	r3, r2
 8003782:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	2b02      	cmp	r3, #2
 800378a:	d107      	bne.n	800379c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800378c:	4b3c      	ldr	r3, [pc, #240]	@ (8003880 <HAL_RCC_ClockConfig+0x244>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d121      	bne.n	80037dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e0f6      	b.n	800398a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	2b03      	cmp	r3, #3
 80037a2:	d107      	bne.n	80037b4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80037a4:	4b36      	ldr	r3, [pc, #216]	@ (8003880 <HAL_RCC_ClockConfig+0x244>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d115      	bne.n	80037dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e0ea      	b.n	800398a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d107      	bne.n	80037cc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80037bc:	4b30      	ldr	r3, [pc, #192]	@ (8003880 <HAL_RCC_ClockConfig+0x244>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d109      	bne.n	80037dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e0de      	b.n	800398a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037cc:	4b2c      	ldr	r3, [pc, #176]	@ (8003880 <HAL_RCC_ClockConfig+0x244>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0304 	and.w	r3, r3, #4
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d101      	bne.n	80037dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e0d6      	b.n	800398a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037dc:	4b28      	ldr	r3, [pc, #160]	@ (8003880 <HAL_RCC_ClockConfig+0x244>)
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	f023 0207 	bic.w	r2, r3, #7
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	4925      	ldr	r1, [pc, #148]	@ (8003880 <HAL_RCC_ClockConfig+0x244>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037ee:	f7fd fc8f 	bl	8001110 <HAL_GetTick>
 80037f2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037f4:	e00a      	b.n	800380c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037f6:	f7fd fc8b 	bl	8001110 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003804:	4293      	cmp	r3, r2
 8003806:	d901      	bls.n	800380c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e0be      	b.n	800398a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800380c:	4b1c      	ldr	r3, [pc, #112]	@ (8003880 <HAL_RCC_ClockConfig+0x244>)
 800380e:	691b      	ldr	r3, [r3, #16]
 8003810:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	00db      	lsls	r3, r3, #3
 800381a:	429a      	cmp	r2, r3
 800381c:	d1eb      	bne.n	80037f6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d010      	beq.n	800384c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	68da      	ldr	r2, [r3, #12]
 800382e:	4b14      	ldr	r3, [pc, #80]	@ (8003880 <HAL_RCC_ClockConfig+0x244>)
 8003830:	699b      	ldr	r3, [r3, #24]
 8003832:	f003 030f 	and.w	r3, r3, #15
 8003836:	429a      	cmp	r2, r3
 8003838:	d208      	bcs.n	800384c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800383a:	4b11      	ldr	r3, [pc, #68]	@ (8003880 <HAL_RCC_ClockConfig+0x244>)
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	f023 020f 	bic.w	r2, r3, #15
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	490e      	ldr	r1, [pc, #56]	@ (8003880 <HAL_RCC_ClockConfig+0x244>)
 8003848:	4313      	orrs	r3, r2
 800384a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800384c:	4b0b      	ldr	r3, [pc, #44]	@ (800387c <HAL_RCC_ClockConfig+0x240>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 030f 	and.w	r3, r3, #15
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	429a      	cmp	r2, r3
 8003858:	d214      	bcs.n	8003884 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800385a:	4b08      	ldr	r3, [pc, #32]	@ (800387c <HAL_RCC_ClockConfig+0x240>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f023 020f 	bic.w	r2, r3, #15
 8003862:	4906      	ldr	r1, [pc, #24]	@ (800387c <HAL_RCC_ClockConfig+0x240>)
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	4313      	orrs	r3, r2
 8003868:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800386a:	4b04      	ldr	r3, [pc, #16]	@ (800387c <HAL_RCC_ClockConfig+0x240>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 030f 	and.w	r3, r3, #15
 8003872:	683a      	ldr	r2, [r7, #0]
 8003874:	429a      	cmp	r2, r3
 8003876:	d005      	beq.n	8003884 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e086      	b.n	800398a <HAL_RCC_ClockConfig+0x34e>
 800387c:	52002000 	.word	0x52002000
 8003880:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0304 	and.w	r3, r3, #4
 800388c:	2b00      	cmp	r3, #0
 800388e:	d010      	beq.n	80038b2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	691a      	ldr	r2, [r3, #16]
 8003894:	4b3f      	ldr	r3, [pc, #252]	@ (8003994 <HAL_RCC_ClockConfig+0x358>)
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800389c:	429a      	cmp	r2, r3
 800389e:	d208      	bcs.n	80038b2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80038a0:	4b3c      	ldr	r3, [pc, #240]	@ (8003994 <HAL_RCC_ClockConfig+0x358>)
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	4939      	ldr	r1, [pc, #228]	@ (8003994 <HAL_RCC_ClockConfig+0x358>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0308 	and.w	r3, r3, #8
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d010      	beq.n	80038e0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	695a      	ldr	r2, [r3, #20]
 80038c2:	4b34      	ldr	r3, [pc, #208]	@ (8003994 <HAL_RCC_ClockConfig+0x358>)
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d208      	bcs.n	80038e0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80038ce:	4b31      	ldr	r3, [pc, #196]	@ (8003994 <HAL_RCC_ClockConfig+0x358>)
 80038d0:	69db      	ldr	r3, [r3, #28]
 80038d2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	492e      	ldr	r1, [pc, #184]	@ (8003994 <HAL_RCC_ClockConfig+0x358>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0310 	and.w	r3, r3, #16
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d010      	beq.n	800390e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	699a      	ldr	r2, [r3, #24]
 80038f0:	4b28      	ldr	r3, [pc, #160]	@ (8003994 <HAL_RCC_ClockConfig+0x358>)
 80038f2:	69db      	ldr	r3, [r3, #28]
 80038f4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d208      	bcs.n	800390e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80038fc:	4b25      	ldr	r3, [pc, #148]	@ (8003994 <HAL_RCC_ClockConfig+0x358>)
 80038fe:	69db      	ldr	r3, [r3, #28]
 8003900:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	4922      	ldr	r1, [pc, #136]	@ (8003994 <HAL_RCC_ClockConfig+0x358>)
 800390a:	4313      	orrs	r3, r2
 800390c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0320 	and.w	r3, r3, #32
 8003916:	2b00      	cmp	r3, #0
 8003918:	d010      	beq.n	800393c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	69da      	ldr	r2, [r3, #28]
 800391e:	4b1d      	ldr	r3, [pc, #116]	@ (8003994 <HAL_RCC_ClockConfig+0x358>)
 8003920:	6a1b      	ldr	r3, [r3, #32]
 8003922:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003926:	429a      	cmp	r2, r3
 8003928:	d208      	bcs.n	800393c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800392a:	4b1a      	ldr	r3, [pc, #104]	@ (8003994 <HAL_RCC_ClockConfig+0x358>)
 800392c:	6a1b      	ldr	r3, [r3, #32]
 800392e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	69db      	ldr	r3, [r3, #28]
 8003936:	4917      	ldr	r1, [pc, #92]	@ (8003994 <HAL_RCC_ClockConfig+0x358>)
 8003938:	4313      	orrs	r3, r2
 800393a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800393c:	f000 f834 	bl	80039a8 <HAL_RCC_GetSysClockFreq>
 8003940:	4602      	mov	r2, r0
 8003942:	4b14      	ldr	r3, [pc, #80]	@ (8003994 <HAL_RCC_ClockConfig+0x358>)
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	0a1b      	lsrs	r3, r3, #8
 8003948:	f003 030f 	and.w	r3, r3, #15
 800394c:	4912      	ldr	r1, [pc, #72]	@ (8003998 <HAL_RCC_ClockConfig+0x35c>)
 800394e:	5ccb      	ldrb	r3, [r1, r3]
 8003950:	f003 031f 	and.w	r3, r3, #31
 8003954:	fa22 f303 	lsr.w	r3, r2, r3
 8003958:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800395a:	4b0e      	ldr	r3, [pc, #56]	@ (8003994 <HAL_RCC_ClockConfig+0x358>)
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	f003 030f 	and.w	r3, r3, #15
 8003962:	4a0d      	ldr	r2, [pc, #52]	@ (8003998 <HAL_RCC_ClockConfig+0x35c>)
 8003964:	5cd3      	ldrb	r3, [r2, r3]
 8003966:	f003 031f 	and.w	r3, r3, #31
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	fa22 f303 	lsr.w	r3, r2, r3
 8003970:	4a0a      	ldr	r2, [pc, #40]	@ (800399c <HAL_RCC_ClockConfig+0x360>)
 8003972:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003974:	4a0a      	ldr	r2, [pc, #40]	@ (80039a0 <HAL_RCC_ClockConfig+0x364>)
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800397a:	4b0a      	ldr	r3, [pc, #40]	@ (80039a4 <HAL_RCC_ClockConfig+0x368>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4618      	mov	r0, r3
 8003980:	f7fd fb7c 	bl	800107c <HAL_InitTick>
 8003984:	4603      	mov	r3, r0
 8003986:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003988:	7bfb      	ldrb	r3, [r7, #15]
}
 800398a:	4618      	mov	r0, r3
 800398c:	3718      	adds	r7, #24
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	58024400 	.word	0x58024400
 8003998:	0800876c 	.word	0x0800876c
 800399c:	24000008 	.word	0x24000008
 80039a0:	24000004 	.word	0x24000004
 80039a4:	2400000c 	.word	0x2400000c

080039a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b089      	sub	sp, #36	@ 0x24
 80039ac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039ae:	4bb3      	ldr	r3, [pc, #716]	@ (8003c7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80039b6:	2b18      	cmp	r3, #24
 80039b8:	f200 8155 	bhi.w	8003c66 <HAL_RCC_GetSysClockFreq+0x2be>
 80039bc:	a201      	add	r2, pc, #4	@ (adr r2, 80039c4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80039be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c2:	bf00      	nop
 80039c4:	08003a29 	.word	0x08003a29
 80039c8:	08003c67 	.word	0x08003c67
 80039cc:	08003c67 	.word	0x08003c67
 80039d0:	08003c67 	.word	0x08003c67
 80039d4:	08003c67 	.word	0x08003c67
 80039d8:	08003c67 	.word	0x08003c67
 80039dc:	08003c67 	.word	0x08003c67
 80039e0:	08003c67 	.word	0x08003c67
 80039e4:	08003a4f 	.word	0x08003a4f
 80039e8:	08003c67 	.word	0x08003c67
 80039ec:	08003c67 	.word	0x08003c67
 80039f0:	08003c67 	.word	0x08003c67
 80039f4:	08003c67 	.word	0x08003c67
 80039f8:	08003c67 	.word	0x08003c67
 80039fc:	08003c67 	.word	0x08003c67
 8003a00:	08003c67 	.word	0x08003c67
 8003a04:	08003a55 	.word	0x08003a55
 8003a08:	08003c67 	.word	0x08003c67
 8003a0c:	08003c67 	.word	0x08003c67
 8003a10:	08003c67 	.word	0x08003c67
 8003a14:	08003c67 	.word	0x08003c67
 8003a18:	08003c67 	.word	0x08003c67
 8003a1c:	08003c67 	.word	0x08003c67
 8003a20:	08003c67 	.word	0x08003c67
 8003a24:	08003a5b 	.word	0x08003a5b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a28:	4b94      	ldr	r3, [pc, #592]	@ (8003c7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0320 	and.w	r3, r3, #32
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d009      	beq.n	8003a48 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003a34:	4b91      	ldr	r3, [pc, #580]	@ (8003c7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	08db      	lsrs	r3, r3, #3
 8003a3a:	f003 0303 	and.w	r3, r3, #3
 8003a3e:	4a90      	ldr	r2, [pc, #576]	@ (8003c80 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003a40:	fa22 f303 	lsr.w	r3, r2, r3
 8003a44:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003a46:	e111      	b.n	8003c6c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003a48:	4b8d      	ldr	r3, [pc, #564]	@ (8003c80 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003a4a:	61bb      	str	r3, [r7, #24]
      break;
 8003a4c:	e10e      	b.n	8003c6c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003a4e:	4b8d      	ldr	r3, [pc, #564]	@ (8003c84 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003a50:	61bb      	str	r3, [r7, #24]
      break;
 8003a52:	e10b      	b.n	8003c6c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003a54:	4b8c      	ldr	r3, [pc, #560]	@ (8003c88 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003a56:	61bb      	str	r3, [r7, #24]
      break;
 8003a58:	e108      	b.n	8003c6c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003a5a:	4b88      	ldr	r3, [pc, #544]	@ (8003c7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a5e:	f003 0303 	and.w	r3, r3, #3
 8003a62:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003a64:	4b85      	ldr	r3, [pc, #532]	@ (8003c7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a68:	091b      	lsrs	r3, r3, #4
 8003a6a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a6e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003a70:	4b82      	ldr	r3, [pc, #520]	@ (8003c7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a74:	f003 0301 	and.w	r3, r3, #1
 8003a78:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003a7a:	4b80      	ldr	r3, [pc, #512]	@ (8003c7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a7e:	08db      	lsrs	r3, r3, #3
 8003a80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a84:	68fa      	ldr	r2, [r7, #12]
 8003a86:	fb02 f303 	mul.w	r3, r2, r3
 8003a8a:	ee07 3a90 	vmov	s15, r3
 8003a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a92:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f000 80e1 	beq.w	8003c60 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	f000 8083 	beq.w	8003bac <HAL_RCC_GetSysClockFreq+0x204>
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	f200 80a1 	bhi.w	8003bf0 <HAL_RCC_GetSysClockFreq+0x248>
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d003      	beq.n	8003abc <HAL_RCC_GetSysClockFreq+0x114>
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d056      	beq.n	8003b68 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003aba:	e099      	b.n	8003bf0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003abc:	4b6f      	ldr	r3, [pc, #444]	@ (8003c7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0320 	and.w	r3, r3, #32
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d02d      	beq.n	8003b24 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003ac8:	4b6c      	ldr	r3, [pc, #432]	@ (8003c7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	08db      	lsrs	r3, r3, #3
 8003ace:	f003 0303 	and.w	r3, r3, #3
 8003ad2:	4a6b      	ldr	r2, [pc, #428]	@ (8003c80 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ad8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	ee07 3a90 	vmov	s15, r3
 8003ae0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	ee07 3a90 	vmov	s15, r3
 8003aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003af2:	4b62      	ldr	r3, [pc, #392]	@ (8003c7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003afa:	ee07 3a90 	vmov	s15, r3
 8003afe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b02:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b06:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003c8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b1e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003b22:	e087      	b.n	8003c34 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	ee07 3a90 	vmov	s15, r3
 8003b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b2e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003c90 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003b32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b36:	4b51      	ldr	r3, [pc, #324]	@ (8003c7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b3e:	ee07 3a90 	vmov	s15, r3
 8003b42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b46:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b4a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003c8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b62:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003b66:	e065      	b.n	8003c34 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	ee07 3a90 	vmov	s15, r3
 8003b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b72:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003c94 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003b76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b7a:	4b40      	ldr	r3, [pc, #256]	@ (8003c7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b82:	ee07 3a90 	vmov	s15, r3
 8003b86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b8e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003c8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ba6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003baa:	e043      	b.n	8003c34 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	ee07 3a90 	vmov	s15, r3
 8003bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bb6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003c98 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003bba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bbe:	4b2f      	ldr	r3, [pc, #188]	@ (8003c7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bc6:	ee07 3a90 	vmov	s15, r3
 8003bca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bce:	ed97 6a02 	vldr	s12, [r7, #8]
 8003bd2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003c8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003bd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003be2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003bee:	e021      	b.n	8003c34 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	ee07 3a90 	vmov	s15, r3
 8003bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bfa:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003c94 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003bfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c02:	4b1e      	ldr	r3, [pc, #120]	@ (8003c7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c0a:	ee07 3a90 	vmov	s15, r3
 8003c0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c12:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c16:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003c8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c2e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003c32:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003c34:	4b11      	ldr	r3, [pc, #68]	@ (8003c7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c38:	0a5b      	lsrs	r3, r3, #9
 8003c3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c3e:	3301      	adds	r3, #1
 8003c40:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	ee07 3a90 	vmov	s15, r3
 8003c48:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c58:	ee17 3a90 	vmov	r3, s15
 8003c5c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003c5e:	e005      	b.n	8003c6c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003c60:	2300      	movs	r3, #0
 8003c62:	61bb      	str	r3, [r7, #24]
      break;
 8003c64:	e002      	b.n	8003c6c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003c66:	4b07      	ldr	r3, [pc, #28]	@ (8003c84 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003c68:	61bb      	str	r3, [r7, #24]
      break;
 8003c6a:	bf00      	nop
  }

  return sysclockfreq;
 8003c6c:	69bb      	ldr	r3, [r7, #24]
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3724      	adds	r7, #36	@ 0x24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	58024400 	.word	0x58024400
 8003c80:	03d09000 	.word	0x03d09000
 8003c84:	003d0900 	.word	0x003d0900
 8003c88:	007a1200 	.word	0x007a1200
 8003c8c:	46000000 	.word	0x46000000
 8003c90:	4c742400 	.word	0x4c742400
 8003c94:	4a742400 	.word	0x4a742400
 8003c98:	4af42400 	.word	0x4af42400

08003c9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003ca2:	f7ff fe81 	bl	80039a8 <HAL_RCC_GetSysClockFreq>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	4b10      	ldr	r3, [pc, #64]	@ (8003cec <HAL_RCC_GetHCLKFreq+0x50>)
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	0a1b      	lsrs	r3, r3, #8
 8003cae:	f003 030f 	and.w	r3, r3, #15
 8003cb2:	490f      	ldr	r1, [pc, #60]	@ (8003cf0 <HAL_RCC_GetHCLKFreq+0x54>)
 8003cb4:	5ccb      	ldrb	r3, [r1, r3]
 8003cb6:	f003 031f 	and.w	r3, r3, #31
 8003cba:	fa22 f303 	lsr.w	r3, r2, r3
 8003cbe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003cc0:	4b0a      	ldr	r3, [pc, #40]	@ (8003cec <HAL_RCC_GetHCLKFreq+0x50>)
 8003cc2:	699b      	ldr	r3, [r3, #24]
 8003cc4:	f003 030f 	and.w	r3, r3, #15
 8003cc8:	4a09      	ldr	r2, [pc, #36]	@ (8003cf0 <HAL_RCC_GetHCLKFreq+0x54>)
 8003cca:	5cd3      	ldrb	r3, [r2, r3]
 8003ccc:	f003 031f 	and.w	r3, r3, #31
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8003cd6:	4a07      	ldr	r2, [pc, #28]	@ (8003cf4 <HAL_RCC_GetHCLKFreq+0x58>)
 8003cd8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003cda:	4a07      	ldr	r2, [pc, #28]	@ (8003cf8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003ce0:	4b04      	ldr	r3, [pc, #16]	@ (8003cf4 <HAL_RCC_GetHCLKFreq+0x58>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3708      	adds	r7, #8
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	58024400 	.word	0x58024400
 8003cf0:	0800876c 	.word	0x0800876c
 8003cf4:	24000008 	.word	0x24000008
 8003cf8:	24000004 	.word	0x24000004

08003cfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003d00:	f7ff ffcc 	bl	8003c9c <HAL_RCC_GetHCLKFreq>
 8003d04:	4602      	mov	r2, r0
 8003d06:	4b06      	ldr	r3, [pc, #24]	@ (8003d20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d08:	69db      	ldr	r3, [r3, #28]
 8003d0a:	091b      	lsrs	r3, r3, #4
 8003d0c:	f003 0307 	and.w	r3, r3, #7
 8003d10:	4904      	ldr	r1, [pc, #16]	@ (8003d24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d12:	5ccb      	ldrb	r3, [r1, r3]
 8003d14:	f003 031f 	and.w	r3, r3, #31
 8003d18:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	58024400 	.word	0x58024400
 8003d24:	0800876c 	.word	0x0800876c

08003d28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003d2c:	f7ff ffb6 	bl	8003c9c <HAL_RCC_GetHCLKFreq>
 8003d30:	4602      	mov	r2, r0
 8003d32:	4b06      	ldr	r3, [pc, #24]	@ (8003d4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d34:	69db      	ldr	r3, [r3, #28]
 8003d36:	0a1b      	lsrs	r3, r3, #8
 8003d38:	f003 0307 	and.w	r3, r3, #7
 8003d3c:	4904      	ldr	r1, [pc, #16]	@ (8003d50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d3e:	5ccb      	ldrb	r3, [r1, r3]
 8003d40:	f003 031f 	and.w	r3, r3, #31
 8003d44:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	58024400 	.word	0x58024400
 8003d50:	0800876c 	.word	0x0800876c

08003d54 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d58:	b0ca      	sub	sp, #296	@ 0x128
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d60:	2300      	movs	r3, #0
 8003d62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d66:	2300      	movs	r3, #0
 8003d68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d74:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003d78:	2500      	movs	r5, #0
 8003d7a:	ea54 0305 	orrs.w	r3, r4, r5
 8003d7e:	d049      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d84:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d86:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003d8a:	d02f      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003d8c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003d90:	d828      	bhi.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003d92:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d96:	d01a      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003d98:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d9c:	d822      	bhi.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d003      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003da2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003da6:	d007      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003da8:	e01c      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003daa:	4bb8      	ldr	r3, [pc, #736]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dae:	4ab7      	ldr	r2, [pc, #732]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003db0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003db4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003db6:	e01a      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dbc:	3308      	adds	r3, #8
 8003dbe:	2102      	movs	r1, #2
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f001 fc8f 	bl	80056e4 <RCCEx_PLL2_Config>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003dcc:	e00f      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dd2:	3328      	adds	r3, #40	@ 0x28
 8003dd4:	2102      	movs	r1, #2
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f001 fd36 	bl	8005848 <RCCEx_PLL3_Config>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003de2:	e004      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003dea:	e000      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003dec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d10a      	bne.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003df6:	4ba5      	ldr	r3, [pc, #660]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003df8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dfa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e02:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e04:	4aa1      	ldr	r2, [pc, #644]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e06:	430b      	orrs	r3, r1
 8003e08:	6513      	str	r3, [r2, #80]	@ 0x50
 8003e0a:	e003      	b.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e1c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003e20:	f04f 0900 	mov.w	r9, #0
 8003e24:	ea58 0309 	orrs.w	r3, r8, r9
 8003e28:	d047      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e30:	2b04      	cmp	r3, #4
 8003e32:	d82a      	bhi.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003e34:	a201      	add	r2, pc, #4	@ (adr r2, 8003e3c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e3a:	bf00      	nop
 8003e3c:	08003e51 	.word	0x08003e51
 8003e40:	08003e5f 	.word	0x08003e5f
 8003e44:	08003e75 	.word	0x08003e75
 8003e48:	08003e93 	.word	0x08003e93
 8003e4c:	08003e93 	.word	0x08003e93
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e50:	4b8e      	ldr	r3, [pc, #568]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e54:	4a8d      	ldr	r2, [pc, #564]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e5c:	e01a      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e62:	3308      	adds	r3, #8
 8003e64:	2100      	movs	r1, #0
 8003e66:	4618      	mov	r0, r3
 8003e68:	f001 fc3c 	bl	80056e4 <RCCEx_PLL2_Config>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e72:	e00f      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e78:	3328      	adds	r3, #40	@ 0x28
 8003e7a:	2100      	movs	r1, #0
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f001 fce3 	bl	8005848 <RCCEx_PLL3_Config>
 8003e82:	4603      	mov	r3, r0
 8003e84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e88:	e004      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e90:	e000      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003e92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d10a      	bne.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e9c:	4b7b      	ldr	r3, [pc, #492]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ea0:	f023 0107 	bic.w	r1, r3, #7
 8003ea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ea8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eaa:	4a78      	ldr	r2, [pc, #480]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003eac:	430b      	orrs	r3, r1
 8003eae:	6513      	str	r3, [r2, #80]	@ 0x50
 8003eb0:	e003      	b.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003eb6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003ec6:	f04f 0b00 	mov.w	fp, #0
 8003eca:	ea5a 030b 	orrs.w	r3, sl, fp
 8003ece:	d04c      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ed4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ed6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003eda:	d030      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003edc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ee0:	d829      	bhi.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003ee2:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ee4:	d02d      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003ee6:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ee8:	d825      	bhi.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003eea:	2b80      	cmp	r3, #128	@ 0x80
 8003eec:	d018      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003eee:	2b80      	cmp	r3, #128	@ 0x80
 8003ef0:	d821      	bhi.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d002      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003ef6:	2b40      	cmp	r3, #64	@ 0x40
 8003ef8:	d007      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003efa:	e01c      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003efc:	4b63      	ldr	r3, [pc, #396]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f00:	4a62      	ldr	r2, [pc, #392]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003f08:	e01c      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f0e:	3308      	adds	r3, #8
 8003f10:	2100      	movs	r1, #0
 8003f12:	4618      	mov	r0, r3
 8003f14:	f001 fbe6 	bl	80056e4 <RCCEx_PLL2_Config>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003f1e:	e011      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f24:	3328      	adds	r3, #40	@ 0x28
 8003f26:	2100      	movs	r1, #0
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f001 fc8d 	bl	8005848 <RCCEx_PLL3_Config>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003f34:	e006      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f3c:	e002      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003f3e:	bf00      	nop
 8003f40:	e000      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003f42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d10a      	bne.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003f4c:	4b4f      	ldr	r3, [pc, #316]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f50:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f5a:	4a4c      	ldr	r2, [pc, #304]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f5c:	430b      	orrs	r3, r1
 8003f5e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003f60:	e003      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f72:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003f76:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003f80:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003f84:	460b      	mov	r3, r1
 8003f86:	4313      	orrs	r3, r2
 8003f88:	d053      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f8e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003f92:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003f96:	d035      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003f98:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003f9c:	d82e      	bhi.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003f9e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003fa2:	d031      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003fa4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003fa8:	d828      	bhi.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003faa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fae:	d01a      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003fb0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fb4:	d822      	bhi.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d003      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003fba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003fbe:	d007      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003fc0:	e01c      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fc2:	4b32      	ldr	r3, [pc, #200]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc6:	4a31      	ldr	r2, [pc, #196]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003fc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fcc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003fce:	e01c      	b.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fd4:	3308      	adds	r3, #8
 8003fd6:	2100      	movs	r1, #0
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f001 fb83 	bl	80056e4 <RCCEx_PLL2_Config>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003fe4:	e011      	b.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fea:	3328      	adds	r3, #40	@ 0x28
 8003fec:	2100      	movs	r1, #0
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f001 fc2a 	bl	8005848 <RCCEx_PLL3_Config>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ffa:	e006      	b.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004002:	e002      	b.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004004:	bf00      	nop
 8004006:	e000      	b.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004008:	bf00      	nop
    }

    if (ret == HAL_OK)
 800400a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10b      	bne.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004012:	4b1e      	ldr	r3, [pc, #120]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004016:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800401a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800401e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004022:	4a1a      	ldr	r2, [pc, #104]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004024:	430b      	orrs	r3, r1
 8004026:	6593      	str	r3, [r2, #88]	@ 0x58
 8004028:	e003      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800402a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800402e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004032:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800403a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800403e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004042:	2300      	movs	r3, #0
 8004044:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004048:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800404c:	460b      	mov	r3, r1
 800404e:	4313      	orrs	r3, r2
 8004050:	d056      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004052:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004056:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800405a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800405e:	d038      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004060:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004064:	d831      	bhi.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004066:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800406a:	d034      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800406c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004070:	d82b      	bhi.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004072:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004076:	d01d      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004078:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800407c:	d825      	bhi.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 800407e:	2b00      	cmp	r3, #0
 8004080:	d006      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004082:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004086:	d00a      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004088:	e01f      	b.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 800408a:	bf00      	nop
 800408c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004090:	4ba2      	ldr	r3, [pc, #648]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004094:	4aa1      	ldr	r2, [pc, #644]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004096:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800409a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800409c:	e01c      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800409e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040a2:	3308      	adds	r3, #8
 80040a4:	2100      	movs	r1, #0
 80040a6:	4618      	mov	r0, r3
 80040a8:	f001 fb1c 	bl	80056e4 <RCCEx_PLL2_Config>
 80040ac:	4603      	mov	r3, r0
 80040ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80040b2:	e011      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80040b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040b8:	3328      	adds	r3, #40	@ 0x28
 80040ba:	2100      	movs	r1, #0
 80040bc:	4618      	mov	r0, r3
 80040be:	f001 fbc3 	bl	8005848 <RCCEx_PLL3_Config>
 80040c2:	4603      	mov	r3, r0
 80040c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80040c8:	e006      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80040d0:	e002      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80040d2:	bf00      	nop
 80040d4:	e000      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80040d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d10b      	bne.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80040e0:	4b8e      	ldr	r3, [pc, #568]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80040e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040e4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80040e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80040f0:	4a8a      	ldr	r2, [pc, #552]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80040f2:	430b      	orrs	r3, r1
 80040f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80040f6:	e003      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004100:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004108:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800410c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004110:	2300      	movs	r3, #0
 8004112:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004116:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800411a:	460b      	mov	r3, r1
 800411c:	4313      	orrs	r3, r2
 800411e:	d03a      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004120:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004126:	2b30      	cmp	r3, #48	@ 0x30
 8004128:	d01f      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800412a:	2b30      	cmp	r3, #48	@ 0x30
 800412c:	d819      	bhi.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800412e:	2b20      	cmp	r3, #32
 8004130:	d00c      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004132:	2b20      	cmp	r3, #32
 8004134:	d815      	bhi.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004136:	2b00      	cmp	r3, #0
 8004138:	d019      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800413a:	2b10      	cmp	r3, #16
 800413c:	d111      	bne.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800413e:	4b77      	ldr	r3, [pc, #476]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004142:	4a76      	ldr	r2, [pc, #472]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004144:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004148:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800414a:	e011      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800414c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004150:	3308      	adds	r3, #8
 8004152:	2102      	movs	r1, #2
 8004154:	4618      	mov	r0, r3
 8004156:	f001 fac5 	bl	80056e4 <RCCEx_PLL2_Config>
 800415a:	4603      	mov	r3, r0
 800415c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004160:	e006      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004168:	e002      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800416a:	bf00      	nop
 800416c:	e000      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800416e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004170:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004174:	2b00      	cmp	r3, #0
 8004176:	d10a      	bne.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004178:	4b68      	ldr	r3, [pc, #416]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800417a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800417c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004180:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004184:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004186:	4a65      	ldr	r2, [pc, #404]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004188:	430b      	orrs	r3, r1
 800418a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800418c:	e003      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800418e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004192:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004196:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800419a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800419e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80041a2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80041a6:	2300      	movs	r3, #0
 80041a8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80041ac:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80041b0:	460b      	mov	r3, r1
 80041b2:	4313      	orrs	r3, r2
 80041b4:	d051      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80041b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80041c0:	d035      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80041c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80041c6:	d82e      	bhi.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80041c8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80041cc:	d031      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80041ce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80041d2:	d828      	bhi.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80041d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041d8:	d01a      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80041da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041de:	d822      	bhi.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d003      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x498>
 80041e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041e8:	d007      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80041ea:	e01c      	b.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041ec:	4b4b      	ldr	r3, [pc, #300]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041f0:	4a4a      	ldr	r2, [pc, #296]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80041f8:	e01c      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041fe:	3308      	adds	r3, #8
 8004200:	2100      	movs	r1, #0
 8004202:	4618      	mov	r0, r3
 8004204:	f001 fa6e 	bl	80056e4 <RCCEx_PLL2_Config>
 8004208:	4603      	mov	r3, r0
 800420a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800420e:	e011      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004210:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004214:	3328      	adds	r3, #40	@ 0x28
 8004216:	2100      	movs	r1, #0
 8004218:	4618      	mov	r0, r3
 800421a:	f001 fb15 	bl	8005848 <RCCEx_PLL3_Config>
 800421e:	4603      	mov	r3, r0
 8004220:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004224:	e006      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800422c:	e002      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800422e:	bf00      	nop
 8004230:	e000      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004232:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004234:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10a      	bne.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800423c:	4b37      	ldr	r3, [pc, #220]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800423e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004240:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004244:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004248:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800424a:	4a34      	ldr	r2, [pc, #208]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800424c:	430b      	orrs	r3, r1
 800424e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004250:	e003      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004252:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004256:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800425a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800425e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004262:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004266:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800426a:	2300      	movs	r3, #0
 800426c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004270:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004274:	460b      	mov	r3, r1
 8004276:	4313      	orrs	r3, r2
 8004278:	d056      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800427a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800427e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004280:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004284:	d033      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004286:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800428a:	d82c      	bhi.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800428c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004290:	d02f      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004292:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004296:	d826      	bhi.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004298:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800429c:	d02b      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800429e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80042a2:	d820      	bhi.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80042a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80042a8:	d012      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80042aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80042ae:	d81a      	bhi.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d022      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80042b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042b8:	d115      	bne.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80042ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042be:	3308      	adds	r3, #8
 80042c0:	2101      	movs	r1, #1
 80042c2:	4618      	mov	r0, r3
 80042c4:	f001 fa0e 	bl	80056e4 <RCCEx_PLL2_Config>
 80042c8:	4603      	mov	r3, r0
 80042ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80042ce:	e015      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80042d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042d4:	3328      	adds	r3, #40	@ 0x28
 80042d6:	2101      	movs	r1, #1
 80042d8:	4618      	mov	r0, r3
 80042da:	f001 fab5 	bl	8005848 <RCCEx_PLL3_Config>
 80042de:	4603      	mov	r3, r0
 80042e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80042e4:	e00a      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80042ec:	e006      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80042ee:	bf00      	nop
 80042f0:	e004      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80042f2:	bf00      	nop
 80042f4:	e002      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80042f6:	bf00      	nop
 80042f8:	e000      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80042fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004300:	2b00      	cmp	r3, #0
 8004302:	d10d      	bne.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004304:	4b05      	ldr	r3, [pc, #20]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004306:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004308:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800430c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004310:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004312:	4a02      	ldr	r2, [pc, #8]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004314:	430b      	orrs	r3, r1
 8004316:	6513      	str	r3, [r2, #80]	@ 0x50
 8004318:	e006      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800431a:	bf00      	nop
 800431c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004320:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004324:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004328:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800432c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004330:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004334:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004338:	2300      	movs	r3, #0
 800433a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800433e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004342:	460b      	mov	r3, r1
 8004344:	4313      	orrs	r3, r2
 8004346:	d055      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004348:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800434c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004350:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004354:	d033      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004356:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800435a:	d82c      	bhi.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800435c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004360:	d02f      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004362:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004366:	d826      	bhi.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004368:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800436c:	d02b      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800436e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004372:	d820      	bhi.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004374:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004378:	d012      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800437a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800437e:	d81a      	bhi.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004380:	2b00      	cmp	r3, #0
 8004382:	d022      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004384:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004388:	d115      	bne.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800438a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800438e:	3308      	adds	r3, #8
 8004390:	2101      	movs	r1, #1
 8004392:	4618      	mov	r0, r3
 8004394:	f001 f9a6 	bl	80056e4 <RCCEx_PLL2_Config>
 8004398:	4603      	mov	r3, r0
 800439a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800439e:	e015      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80043a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043a4:	3328      	adds	r3, #40	@ 0x28
 80043a6:	2101      	movs	r1, #1
 80043a8:	4618      	mov	r0, r3
 80043aa:	f001 fa4d 	bl	8005848 <RCCEx_PLL3_Config>
 80043ae:	4603      	mov	r3, r0
 80043b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80043b4:	e00a      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043bc:	e006      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80043be:	bf00      	nop
 80043c0:	e004      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80043c2:	bf00      	nop
 80043c4:	e002      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80043c6:	bf00      	nop
 80043c8:	e000      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80043ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10b      	bne.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80043d4:	4ba3      	ldr	r3, [pc, #652]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043d8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80043dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80043e4:	4a9f      	ldr	r2, [pc, #636]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043e6:	430b      	orrs	r3, r1
 80043e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80043ea:	e003      	b.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80043f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043fc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004400:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004404:	2300      	movs	r3, #0
 8004406:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800440a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800440e:	460b      	mov	r3, r1
 8004410:	4313      	orrs	r3, r2
 8004412:	d037      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004418:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800441a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800441e:	d00e      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004420:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004424:	d816      	bhi.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004426:	2b00      	cmp	r3, #0
 8004428:	d018      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800442a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800442e:	d111      	bne.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004430:	4b8c      	ldr	r3, [pc, #560]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004434:	4a8b      	ldr	r2, [pc, #556]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004436:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800443a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800443c:	e00f      	b.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800443e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004442:	3308      	adds	r3, #8
 8004444:	2101      	movs	r1, #1
 8004446:	4618      	mov	r0, r3
 8004448:	f001 f94c 	bl	80056e4 <RCCEx_PLL2_Config>
 800444c:	4603      	mov	r3, r0
 800444e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004452:	e004      	b.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800445a:	e000      	b.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800445c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800445e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004462:	2b00      	cmp	r3, #0
 8004464:	d10a      	bne.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004466:	4b7f      	ldr	r3, [pc, #508]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004468:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800446a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800446e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004472:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004474:	4a7b      	ldr	r2, [pc, #492]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004476:	430b      	orrs	r3, r1
 8004478:	6513      	str	r3, [r2, #80]	@ 0x50
 800447a:	e003      	b.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800447c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004480:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004484:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800448c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004490:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004494:	2300      	movs	r3, #0
 8004496:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800449a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800449e:	460b      	mov	r3, r1
 80044a0:	4313      	orrs	r3, r2
 80044a2:	d039      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80044a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044aa:	2b03      	cmp	r3, #3
 80044ac:	d81c      	bhi.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80044ae:	a201      	add	r2, pc, #4	@ (adr r2, 80044b4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80044b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b4:	080044f1 	.word	0x080044f1
 80044b8:	080044c5 	.word	0x080044c5
 80044bc:	080044d3 	.word	0x080044d3
 80044c0:	080044f1 	.word	0x080044f1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044c4:	4b67      	ldr	r3, [pc, #412]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044c8:	4a66      	ldr	r2, [pc, #408]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80044d0:	e00f      	b.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80044d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044d6:	3308      	adds	r3, #8
 80044d8:	2102      	movs	r1, #2
 80044da:	4618      	mov	r0, r3
 80044dc:	f001 f902 	bl	80056e4 <RCCEx_PLL2_Config>
 80044e0:	4603      	mov	r3, r0
 80044e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80044e6:	e004      	b.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80044ee:	e000      	b.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80044f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d10a      	bne.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80044fa:	4b5a      	ldr	r3, [pc, #360]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044fe:	f023 0103 	bic.w	r1, r3, #3
 8004502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004506:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004508:	4a56      	ldr	r2, [pc, #344]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800450a:	430b      	orrs	r3, r1
 800450c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800450e:	e003      	b.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004510:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004514:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004518:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800451c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004520:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004524:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004528:	2300      	movs	r3, #0
 800452a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800452e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004532:	460b      	mov	r3, r1
 8004534:	4313      	orrs	r3, r2
 8004536:	f000 809f 	beq.w	8004678 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800453a:	4b4b      	ldr	r3, [pc, #300]	@ (8004668 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a4a      	ldr	r2, [pc, #296]	@ (8004668 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004540:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004544:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004546:	f7fc fde3 	bl	8001110 <HAL_GetTick>
 800454a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800454e:	e00b      	b.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004550:	f7fc fdde 	bl	8001110 <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	2b64      	cmp	r3, #100	@ 0x64
 800455e:	d903      	bls.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004566:	e005      	b.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004568:	4b3f      	ldr	r3, [pc, #252]	@ (8004668 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004570:	2b00      	cmp	r3, #0
 8004572:	d0ed      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004574:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004578:	2b00      	cmp	r3, #0
 800457a:	d179      	bne.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800457c:	4b39      	ldr	r3, [pc, #228]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800457e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004580:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004584:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004588:	4053      	eors	r3, r2
 800458a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800458e:	2b00      	cmp	r3, #0
 8004590:	d015      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004592:	4b34      	ldr	r3, [pc, #208]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004596:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800459a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800459e:	4b31      	ldr	r3, [pc, #196]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045a2:	4a30      	ldr	r2, [pc, #192]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045a8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80045aa:	4b2e      	ldr	r3, [pc, #184]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045ae:	4a2d      	ldr	r2, [pc, #180]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045b4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80045b6:	4a2b      	ldr	r2, [pc, #172]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80045bc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80045be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80045c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045ca:	d118      	bne.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045cc:	f7fc fda0 	bl	8001110 <HAL_GetTick>
 80045d0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80045d4:	e00d      	b.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045d6:	f7fc fd9b 	bl	8001110 <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80045e0:	1ad2      	subs	r2, r2, r3
 80045e2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d903      	bls.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80045f0:	e005      	b.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80045f2:	4b1c      	ldr	r3, [pc, #112]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045f6:	f003 0302 	and.w	r3, r3, #2
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d0eb      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80045fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004602:	2b00      	cmp	r3, #0
 8004604:	d129      	bne.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004606:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800460a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800460e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004612:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004616:	d10e      	bne.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004618:	4b12      	ldr	r3, [pc, #72]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004620:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004624:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004628:	091a      	lsrs	r2, r3, #4
 800462a:	4b10      	ldr	r3, [pc, #64]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800462c:	4013      	ands	r3, r2
 800462e:	4a0d      	ldr	r2, [pc, #52]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004630:	430b      	orrs	r3, r1
 8004632:	6113      	str	r3, [r2, #16]
 8004634:	e005      	b.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004636:	4b0b      	ldr	r3, [pc, #44]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	4a0a      	ldr	r2, [pc, #40]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800463c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004640:	6113      	str	r3, [r2, #16]
 8004642:	4b08      	ldr	r3, [pc, #32]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004644:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004646:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800464a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800464e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004652:	4a04      	ldr	r2, [pc, #16]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004654:	430b      	orrs	r3, r1
 8004656:	6713      	str	r3, [r2, #112]	@ 0x70
 8004658:	e00e      	b.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800465a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800465e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8004662:	e009      	b.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004664:	58024400 	.word	0x58024400
 8004668:	58024800 	.word	0x58024800
 800466c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004670:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004674:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004678:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800467c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004680:	f002 0301 	and.w	r3, r2, #1
 8004684:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004688:	2300      	movs	r3, #0
 800468a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800468e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004692:	460b      	mov	r3, r1
 8004694:	4313      	orrs	r3, r2
 8004696:	f000 8089 	beq.w	80047ac <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800469a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800469e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046a0:	2b28      	cmp	r3, #40	@ 0x28
 80046a2:	d86b      	bhi.n	800477c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80046a4:	a201      	add	r2, pc, #4	@ (adr r2, 80046ac <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80046a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046aa:	bf00      	nop
 80046ac:	08004785 	.word	0x08004785
 80046b0:	0800477d 	.word	0x0800477d
 80046b4:	0800477d 	.word	0x0800477d
 80046b8:	0800477d 	.word	0x0800477d
 80046bc:	0800477d 	.word	0x0800477d
 80046c0:	0800477d 	.word	0x0800477d
 80046c4:	0800477d 	.word	0x0800477d
 80046c8:	0800477d 	.word	0x0800477d
 80046cc:	08004751 	.word	0x08004751
 80046d0:	0800477d 	.word	0x0800477d
 80046d4:	0800477d 	.word	0x0800477d
 80046d8:	0800477d 	.word	0x0800477d
 80046dc:	0800477d 	.word	0x0800477d
 80046e0:	0800477d 	.word	0x0800477d
 80046e4:	0800477d 	.word	0x0800477d
 80046e8:	0800477d 	.word	0x0800477d
 80046ec:	08004767 	.word	0x08004767
 80046f0:	0800477d 	.word	0x0800477d
 80046f4:	0800477d 	.word	0x0800477d
 80046f8:	0800477d 	.word	0x0800477d
 80046fc:	0800477d 	.word	0x0800477d
 8004700:	0800477d 	.word	0x0800477d
 8004704:	0800477d 	.word	0x0800477d
 8004708:	0800477d 	.word	0x0800477d
 800470c:	08004785 	.word	0x08004785
 8004710:	0800477d 	.word	0x0800477d
 8004714:	0800477d 	.word	0x0800477d
 8004718:	0800477d 	.word	0x0800477d
 800471c:	0800477d 	.word	0x0800477d
 8004720:	0800477d 	.word	0x0800477d
 8004724:	0800477d 	.word	0x0800477d
 8004728:	0800477d 	.word	0x0800477d
 800472c:	08004785 	.word	0x08004785
 8004730:	0800477d 	.word	0x0800477d
 8004734:	0800477d 	.word	0x0800477d
 8004738:	0800477d 	.word	0x0800477d
 800473c:	0800477d 	.word	0x0800477d
 8004740:	0800477d 	.word	0x0800477d
 8004744:	0800477d 	.word	0x0800477d
 8004748:	0800477d 	.word	0x0800477d
 800474c:	08004785 	.word	0x08004785
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004750:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004754:	3308      	adds	r3, #8
 8004756:	2101      	movs	r1, #1
 8004758:	4618      	mov	r0, r3
 800475a:	f000 ffc3 	bl	80056e4 <RCCEx_PLL2_Config>
 800475e:	4603      	mov	r3, r0
 8004760:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004764:	e00f      	b.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004766:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800476a:	3328      	adds	r3, #40	@ 0x28
 800476c:	2101      	movs	r1, #1
 800476e:	4618      	mov	r0, r3
 8004770:	f001 f86a 	bl	8005848 <RCCEx_PLL3_Config>
 8004774:	4603      	mov	r3, r0
 8004776:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800477a:	e004      	b.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004782:	e000      	b.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004784:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004786:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800478a:	2b00      	cmp	r3, #0
 800478c:	d10a      	bne.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800478e:	4bbf      	ldr	r3, [pc, #764]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004790:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004792:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800479a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800479c:	4abb      	ldr	r2, [pc, #748]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800479e:	430b      	orrs	r3, r1
 80047a0:	6553      	str	r3, [r2, #84]	@ 0x54
 80047a2:	e003      	b.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80047ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b4:	f002 0302 	and.w	r3, r2, #2
 80047b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80047bc:	2300      	movs	r3, #0
 80047be:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80047c2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80047c6:	460b      	mov	r3, r1
 80047c8:	4313      	orrs	r3, r2
 80047ca:	d041      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80047cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80047d2:	2b05      	cmp	r3, #5
 80047d4:	d824      	bhi.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80047d6:	a201      	add	r2, pc, #4	@ (adr r2, 80047dc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80047d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047dc:	08004829 	.word	0x08004829
 80047e0:	080047f5 	.word	0x080047f5
 80047e4:	0800480b 	.word	0x0800480b
 80047e8:	08004829 	.word	0x08004829
 80047ec:	08004829 	.word	0x08004829
 80047f0:	08004829 	.word	0x08004829
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80047f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047f8:	3308      	adds	r3, #8
 80047fa:	2101      	movs	r1, #1
 80047fc:	4618      	mov	r0, r3
 80047fe:	f000 ff71 	bl	80056e4 <RCCEx_PLL2_Config>
 8004802:	4603      	mov	r3, r0
 8004804:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004808:	e00f      	b.n	800482a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800480a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800480e:	3328      	adds	r3, #40	@ 0x28
 8004810:	2101      	movs	r1, #1
 8004812:	4618      	mov	r0, r3
 8004814:	f001 f818 	bl	8005848 <RCCEx_PLL3_Config>
 8004818:	4603      	mov	r3, r0
 800481a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800481e:	e004      	b.n	800482a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004826:	e000      	b.n	800482a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004828:	bf00      	nop
    }

    if (ret == HAL_OK)
 800482a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800482e:	2b00      	cmp	r3, #0
 8004830:	d10a      	bne.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004832:	4b96      	ldr	r3, [pc, #600]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004834:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004836:	f023 0107 	bic.w	r1, r3, #7
 800483a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800483e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004840:	4a92      	ldr	r2, [pc, #584]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004842:	430b      	orrs	r3, r1
 8004844:	6553      	str	r3, [r2, #84]	@ 0x54
 8004846:	e003      	b.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004848:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800484c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004850:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004858:	f002 0304 	and.w	r3, r2, #4
 800485c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004860:	2300      	movs	r3, #0
 8004862:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004866:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800486a:	460b      	mov	r3, r1
 800486c:	4313      	orrs	r3, r2
 800486e:	d044      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004870:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004874:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004878:	2b05      	cmp	r3, #5
 800487a:	d825      	bhi.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800487c:	a201      	add	r2, pc, #4	@ (adr r2, 8004884 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800487e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004882:	bf00      	nop
 8004884:	080048d1 	.word	0x080048d1
 8004888:	0800489d 	.word	0x0800489d
 800488c:	080048b3 	.word	0x080048b3
 8004890:	080048d1 	.word	0x080048d1
 8004894:	080048d1 	.word	0x080048d1
 8004898:	080048d1 	.word	0x080048d1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800489c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048a0:	3308      	adds	r3, #8
 80048a2:	2101      	movs	r1, #1
 80048a4:	4618      	mov	r0, r3
 80048a6:	f000 ff1d 	bl	80056e4 <RCCEx_PLL2_Config>
 80048aa:	4603      	mov	r3, r0
 80048ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80048b0:	e00f      	b.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80048b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048b6:	3328      	adds	r3, #40	@ 0x28
 80048b8:	2101      	movs	r1, #1
 80048ba:	4618      	mov	r0, r3
 80048bc:	f000 ffc4 	bl	8005848 <RCCEx_PLL3_Config>
 80048c0:	4603      	mov	r3, r0
 80048c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80048c6:	e004      	b.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80048ce:	e000      	b.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80048d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d10b      	bne.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80048da:	4b6c      	ldr	r3, [pc, #432]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80048dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048de:	f023 0107 	bic.w	r1, r3, #7
 80048e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048ea:	4a68      	ldr	r2, [pc, #416]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80048ec:	430b      	orrs	r3, r1
 80048ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80048f0:	e003      	b.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80048fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004902:	f002 0320 	and.w	r3, r2, #32
 8004906:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800490a:	2300      	movs	r3, #0
 800490c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004910:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004914:	460b      	mov	r3, r1
 8004916:	4313      	orrs	r3, r2
 8004918:	d055      	beq.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800491a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800491e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004922:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004926:	d033      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004928:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800492c:	d82c      	bhi.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800492e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004932:	d02f      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004934:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004938:	d826      	bhi.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800493a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800493e:	d02b      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004940:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004944:	d820      	bhi.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004946:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800494a:	d012      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800494c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004950:	d81a      	bhi.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004952:	2b00      	cmp	r3, #0
 8004954:	d022      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004956:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800495a:	d115      	bne.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800495c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004960:	3308      	adds	r3, #8
 8004962:	2100      	movs	r1, #0
 8004964:	4618      	mov	r0, r3
 8004966:	f000 febd 	bl	80056e4 <RCCEx_PLL2_Config>
 800496a:	4603      	mov	r3, r0
 800496c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004970:	e015      	b.n	800499e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004972:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004976:	3328      	adds	r3, #40	@ 0x28
 8004978:	2102      	movs	r1, #2
 800497a:	4618      	mov	r0, r3
 800497c:	f000 ff64 	bl	8005848 <RCCEx_PLL3_Config>
 8004980:	4603      	mov	r3, r0
 8004982:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004986:	e00a      	b.n	800499e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800498e:	e006      	b.n	800499e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004990:	bf00      	nop
 8004992:	e004      	b.n	800499e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004994:	bf00      	nop
 8004996:	e002      	b.n	800499e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004998:	bf00      	nop
 800499a:	e000      	b.n	800499e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800499c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800499e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d10b      	bne.n	80049be <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049a6:	4b39      	ldr	r3, [pc, #228]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80049a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049aa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80049ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049b6:	4a35      	ldr	r2, [pc, #212]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80049b8:	430b      	orrs	r3, r1
 80049ba:	6553      	str	r3, [r2, #84]	@ 0x54
 80049bc:	e003      	b.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80049c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ce:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80049d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80049d6:	2300      	movs	r3, #0
 80049d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80049dc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80049e0:	460b      	mov	r3, r1
 80049e2:	4313      	orrs	r3, r2
 80049e4:	d058      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80049e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80049ee:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80049f2:	d033      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80049f4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80049f8:	d82c      	bhi.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80049fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049fe:	d02f      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004a00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a04:	d826      	bhi.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004a06:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a0a:	d02b      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004a0c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a10:	d820      	bhi.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004a12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a16:	d012      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004a18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a1c:	d81a      	bhi.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d022      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004a22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a26:	d115      	bne.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a2c:	3308      	adds	r3, #8
 8004a2e:	2100      	movs	r1, #0
 8004a30:	4618      	mov	r0, r3
 8004a32:	f000 fe57 	bl	80056e4 <RCCEx_PLL2_Config>
 8004a36:	4603      	mov	r3, r0
 8004a38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004a3c:	e015      	b.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a42:	3328      	adds	r3, #40	@ 0x28
 8004a44:	2102      	movs	r1, #2
 8004a46:	4618      	mov	r0, r3
 8004a48:	f000 fefe 	bl	8005848 <RCCEx_PLL3_Config>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004a52:	e00a      	b.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a5a:	e006      	b.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004a5c:	bf00      	nop
 8004a5e:	e004      	b.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004a60:	bf00      	nop
 8004a62:	e002      	b.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004a64:	bf00      	nop
 8004a66:	e000      	b.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004a68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d10e      	bne.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004a72:	4b06      	ldr	r3, [pc, #24]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a76:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004a82:	4a02      	ldr	r2, [pc, #8]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004a84:	430b      	orrs	r3, r1
 8004a86:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a88:	e006      	b.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004a8a:	bf00      	nop
 8004a8c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004aa4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004aae:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	d055      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004abc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004ac0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004ac4:	d033      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004ac6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004aca:	d82c      	bhi.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004acc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ad0:	d02f      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004ad2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ad6:	d826      	bhi.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004ad8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004adc:	d02b      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004ade:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004ae2:	d820      	bhi.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004ae4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ae8:	d012      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004aea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004aee:	d81a      	bhi.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d022      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004af4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004af8:	d115      	bne.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004afe:	3308      	adds	r3, #8
 8004b00:	2100      	movs	r1, #0
 8004b02:	4618      	mov	r0, r3
 8004b04:	f000 fdee 	bl	80056e4 <RCCEx_PLL2_Config>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004b0e:	e015      	b.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004b10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b14:	3328      	adds	r3, #40	@ 0x28
 8004b16:	2102      	movs	r1, #2
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f000 fe95 	bl	8005848 <RCCEx_PLL3_Config>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004b24:	e00a      	b.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b2c:	e006      	b.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004b2e:	bf00      	nop
 8004b30:	e004      	b.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004b32:	bf00      	nop
 8004b34:	e002      	b.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004b36:	bf00      	nop
 8004b38:	e000      	b.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004b3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d10b      	bne.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004b44:	4ba1      	ldr	r3, [pc, #644]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b48:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b50:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004b54:	4a9d      	ldr	r2, [pc, #628]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b56:	430b      	orrs	r3, r1
 8004b58:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b5a:	e003      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b6c:	f002 0308 	and.w	r3, r2, #8
 8004b70:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004b74:	2300      	movs	r3, #0
 8004b76:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004b7a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004b7e:	460b      	mov	r3, r1
 8004b80:	4313      	orrs	r3, r2
 8004b82:	d01e      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b90:	d10c      	bne.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b96:	3328      	adds	r3, #40	@ 0x28
 8004b98:	2102      	movs	r1, #2
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f000 fe54 	bl	8005848 <RCCEx_PLL3_Config>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d002      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004bac:	4b87      	ldr	r3, [pc, #540]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004bae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bb0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bbc:	4a83      	ldr	r2, [pc, #524]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004bbe:	430b      	orrs	r3, r1
 8004bc0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bca:	f002 0310 	and.w	r3, r2, #16
 8004bce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004bd8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004bdc:	460b      	mov	r3, r1
 8004bde:	4313      	orrs	r3, r2
 8004be0:	d01e      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004be6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004bea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bee:	d10c      	bne.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bf4:	3328      	adds	r3, #40	@ 0x28
 8004bf6:	2102      	movs	r1, #2
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f000 fe25 	bl	8005848 <RCCEx_PLL3_Config>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d002      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004c0a:	4b70      	ldr	r3, [pc, #448]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c0e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c16:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004c1a:	4a6c      	ldr	r2, [pc, #432]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c1c:	430b      	orrs	r3, r1
 8004c1e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c28:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004c2c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004c30:	2300      	movs	r3, #0
 8004c32:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004c36:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004c3a:	460b      	mov	r3, r1
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	d03e      	beq.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c44:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004c48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c4c:	d022      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004c4e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c52:	d81b      	bhi.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d003      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004c58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c5c:	d00b      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004c5e:	e015      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c64:	3308      	adds	r3, #8
 8004c66:	2100      	movs	r1, #0
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f000 fd3b 	bl	80056e4 <RCCEx_PLL2_Config>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004c74:	e00f      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c7a:	3328      	adds	r3, #40	@ 0x28
 8004c7c:	2102      	movs	r1, #2
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f000 fde2 	bl	8005848 <RCCEx_PLL3_Config>
 8004c84:	4603      	mov	r3, r0
 8004c86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004c8a:	e004      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c92:	e000      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004c94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d10b      	bne.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c9e:	4b4b      	ldr	r3, [pc, #300]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ca0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ca2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004caa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004cae:	4a47      	ldr	r2, [pc, #284]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004cb0:	430b      	orrs	r3, r1
 8004cb2:	6593      	str	r3, [r2, #88]	@ 0x58
 8004cb4:	e003      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004cca:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004ccc:	2300      	movs	r3, #0
 8004cce:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004cd0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	d03b      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ce2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004ce6:	d01f      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004ce8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004cec:	d818      	bhi.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004cee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004cf2:	d003      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004cf4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004cf8:	d007      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004cfa:	e011      	b.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cfc:	4b33      	ldr	r3, [pc, #204]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d00:	4a32      	ldr	r2, [pc, #200]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004d08:	e00f      	b.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d0e:	3328      	adds	r3, #40	@ 0x28
 8004d10:	2101      	movs	r1, #1
 8004d12:	4618      	mov	r0, r3
 8004d14:	f000 fd98 	bl	8005848 <RCCEx_PLL3_Config>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004d1e:	e004      	b.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d26:	e000      	b.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004d28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d10b      	bne.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d32:	4b26      	ldr	r3, [pc, #152]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d36:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d42:	4a22      	ldr	r2, [pc, #136]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d44:	430b      	orrs	r3, r1
 8004d46:	6553      	str	r3, [r2, #84]	@ 0x54
 8004d48:	e003      	b.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d5a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004d5e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004d60:	2300      	movs	r3, #0
 8004d62:	677b      	str	r3, [r7, #116]	@ 0x74
 8004d64:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004d68:	460b      	mov	r3, r1
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	d034      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d003      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004d78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d7c:	d007      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004d7e:	e011      	b.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d80:	4b12      	ldr	r3, [pc, #72]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d84:	4a11      	ldr	r2, [pc, #68]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004d8c:	e00e      	b.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d92:	3308      	adds	r3, #8
 8004d94:	2102      	movs	r1, #2
 8004d96:	4618      	mov	r0, r3
 8004d98:	f000 fca4 	bl	80056e4 <RCCEx_PLL2_Config>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004da2:	e003      	b.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004daa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d10d      	bne.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004db4:	4b05      	ldr	r3, [pc, #20]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004db6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004db8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dc2:	4a02      	ldr	r2, [pc, #8]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004dc4:	430b      	orrs	r3, r1
 8004dc6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004dc8:	e006      	b.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004dca:	bf00      	nop
 8004dcc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dd4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004dd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004de4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004de6:	2300      	movs	r3, #0
 8004de8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004dea:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004dee:	460b      	mov	r3, r1
 8004df0:	4313      	orrs	r3, r2
 8004df2:	d00c      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004df8:	3328      	adds	r3, #40	@ 0x28
 8004dfa:	2102      	movs	r1, #2
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f000 fd23 	bl	8005848 <RCCEx_PLL3_Config>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d002      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e16:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004e1a:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004e20:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004e24:	460b      	mov	r3, r1
 8004e26:	4313      	orrs	r3, r2
 8004e28:	d038      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e36:	d018      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004e38:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e3c:	d811      	bhi.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004e3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e42:	d014      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004e44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e48:	d80b      	bhi.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d011      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004e4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e52:	d106      	bne.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e54:	4bc3      	ldr	r3, [pc, #780]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e58:	4ac2      	ldr	r2, [pc, #776]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004e60:	e008      	b.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e68:	e004      	b.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004e6a:	bf00      	nop
 8004e6c:	e002      	b.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004e6e:	bf00      	nop
 8004e70:	e000      	b.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004e72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d10b      	bne.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e7c:	4bb9      	ldr	r3, [pc, #740]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e80:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e8c:	4ab5      	ldr	r2, [pc, #724]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e8e:	430b      	orrs	r3, r1
 8004e90:	6553      	str	r3, [r2, #84]	@ 0x54
 8004e92:	e003      	b.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004ea8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004eaa:	2300      	movs	r3, #0
 8004eac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004eae:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004eb2:	460b      	mov	r3, r1
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	d009      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004eb8:	4baa      	ldr	r3, [pc, #680]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004eba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ebc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ec4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ec6:	4aa7      	ldr	r2, [pc, #668]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ec8:	430b      	orrs	r3, r1
 8004eca:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004ed8:	653b      	str	r3, [r7, #80]	@ 0x50
 8004eda:	2300      	movs	r3, #0
 8004edc:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ede:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	d00a      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004ee8:	4b9e      	ldr	r3, [pc, #632]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004eea:	691b      	ldr	r3, [r3, #16]
 8004eec:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ef4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004ef8:	4a9a      	ldr	r2, [pc, #616]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004efa:	430b      	orrs	r3, r1
 8004efc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f06:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004f0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f10:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004f14:	460b      	mov	r3, r1
 8004f16:	4313      	orrs	r3, r2
 8004f18:	d009      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f1a:	4b92      	ldr	r3, [pc, #584]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f1e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f28:	4a8e      	ldr	r2, [pc, #568]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f2a:	430b      	orrs	r3, r1
 8004f2c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f36:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004f3a:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f40:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004f44:	460b      	mov	r3, r1
 8004f46:	4313      	orrs	r3, r2
 8004f48:	d00e      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f4a:	4b86      	ldr	r3, [pc, #536]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	4a85      	ldr	r2, [pc, #532]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f50:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004f54:	6113      	str	r3, [r2, #16]
 8004f56:	4b83      	ldr	r3, [pc, #524]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f58:	6919      	ldr	r1, [r3, #16]
 8004f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f5e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004f62:	4a80      	ldr	r2, [pc, #512]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f64:	430b      	orrs	r3, r1
 8004f66:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f70:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004f74:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f76:	2300      	movs	r3, #0
 8004f78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f7a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004f7e:	460b      	mov	r3, r1
 8004f80:	4313      	orrs	r3, r2
 8004f82:	d009      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004f84:	4b77      	ldr	r3, [pc, #476]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f88:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f92:	4a74      	ldr	r2, [pc, #464]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f94:	430b      	orrs	r3, r1
 8004f96:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004fa4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004faa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004fae:	460b      	mov	r3, r1
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	d00a      	beq.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004fb4:	4b6b      	ldr	r3, [pc, #428]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004fb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fb8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004fc4:	4a67      	ldr	r2, [pc, #412]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004fc6:	430b      	orrs	r3, r1
 8004fc8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd2:	2100      	movs	r1, #0
 8004fd4:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004fd6:	f003 0301 	and.w	r3, r3, #1
 8004fda:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fdc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	d011      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fea:	3308      	adds	r3, #8
 8004fec:	2100      	movs	r1, #0
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f000 fb78 	bl	80056e4 <RCCEx_PLL2_Config>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004ffa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d003      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005002:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005006:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800500a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800500e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005012:	2100      	movs	r1, #0
 8005014:	6239      	str	r1, [r7, #32]
 8005016:	f003 0302 	and.w	r3, r3, #2
 800501a:	627b      	str	r3, [r7, #36]	@ 0x24
 800501c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005020:	460b      	mov	r3, r1
 8005022:	4313      	orrs	r3, r2
 8005024:	d011      	beq.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005026:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800502a:	3308      	adds	r3, #8
 800502c:	2101      	movs	r1, #1
 800502e:	4618      	mov	r0, r3
 8005030:	f000 fb58 	bl	80056e4 <RCCEx_PLL2_Config>
 8005034:	4603      	mov	r3, r0
 8005036:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800503a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800503e:	2b00      	cmp	r3, #0
 8005040:	d003      	beq.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005042:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005046:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800504a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800504e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005052:	2100      	movs	r1, #0
 8005054:	61b9      	str	r1, [r7, #24]
 8005056:	f003 0304 	and.w	r3, r3, #4
 800505a:	61fb      	str	r3, [r7, #28]
 800505c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005060:	460b      	mov	r3, r1
 8005062:	4313      	orrs	r3, r2
 8005064:	d011      	beq.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005066:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800506a:	3308      	adds	r3, #8
 800506c:	2102      	movs	r1, #2
 800506e:	4618      	mov	r0, r3
 8005070:	f000 fb38 	bl	80056e4 <RCCEx_PLL2_Config>
 8005074:	4603      	mov	r3, r0
 8005076:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800507a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800507e:	2b00      	cmp	r3, #0
 8005080:	d003      	beq.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005082:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005086:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800508a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800508e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005092:	2100      	movs	r1, #0
 8005094:	6139      	str	r1, [r7, #16]
 8005096:	f003 0308 	and.w	r3, r3, #8
 800509a:	617b      	str	r3, [r7, #20]
 800509c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80050a0:	460b      	mov	r3, r1
 80050a2:	4313      	orrs	r3, r2
 80050a4:	d011      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80050a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050aa:	3328      	adds	r3, #40	@ 0x28
 80050ac:	2100      	movs	r1, #0
 80050ae:	4618      	mov	r0, r3
 80050b0:	f000 fbca 	bl	8005848 <RCCEx_PLL3_Config>
 80050b4:	4603      	mov	r3, r0
 80050b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80050ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d003      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80050ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d2:	2100      	movs	r1, #0
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	f003 0310 	and.w	r3, r3, #16
 80050da:	60fb      	str	r3, [r7, #12]
 80050dc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80050e0:	460b      	mov	r3, r1
 80050e2:	4313      	orrs	r3, r2
 80050e4:	d011      	beq.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80050e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050ea:	3328      	adds	r3, #40	@ 0x28
 80050ec:	2101      	movs	r1, #1
 80050ee:	4618      	mov	r0, r3
 80050f0:	f000 fbaa 	bl	8005848 <RCCEx_PLL3_Config>
 80050f4:	4603      	mov	r3, r0
 80050f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80050fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d003      	beq.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005102:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005106:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800510a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800510e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005112:	2100      	movs	r1, #0
 8005114:	6039      	str	r1, [r7, #0]
 8005116:	f003 0320 	and.w	r3, r3, #32
 800511a:	607b      	str	r3, [r7, #4]
 800511c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005120:	460b      	mov	r3, r1
 8005122:	4313      	orrs	r3, r2
 8005124:	d011      	beq.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005126:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800512a:	3328      	adds	r3, #40	@ 0x28
 800512c:	2102      	movs	r1, #2
 800512e:	4618      	mov	r0, r3
 8005130:	f000 fb8a 	bl	8005848 <RCCEx_PLL3_Config>
 8005134:	4603      	mov	r3, r0
 8005136:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800513a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800513e:	2b00      	cmp	r3, #0
 8005140:	d003      	beq.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005142:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005146:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800514a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800514e:	2b00      	cmp	r3, #0
 8005150:	d101      	bne.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005152:	2300      	movs	r3, #0
 8005154:	e000      	b.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
}
 8005158:	4618      	mov	r0, r3
 800515a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800515e:	46bd      	mov	sp, r7
 8005160:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005164:	58024400 	.word	0x58024400

08005168 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800516c:	f7fe fd96 	bl	8003c9c <HAL_RCC_GetHCLKFreq>
 8005170:	4602      	mov	r2, r0
 8005172:	4b06      	ldr	r3, [pc, #24]	@ (800518c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005174:	6a1b      	ldr	r3, [r3, #32]
 8005176:	091b      	lsrs	r3, r3, #4
 8005178:	f003 0307 	and.w	r3, r3, #7
 800517c:	4904      	ldr	r1, [pc, #16]	@ (8005190 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800517e:	5ccb      	ldrb	r3, [r1, r3]
 8005180:	f003 031f 	and.w	r3, r3, #31
 8005184:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005188:	4618      	mov	r0, r3
 800518a:	bd80      	pop	{r7, pc}
 800518c:	58024400 	.word	0x58024400
 8005190:	0800876c 	.word	0x0800876c

08005194 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005194:	b480      	push	{r7}
 8005196:	b089      	sub	sp, #36	@ 0x24
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800519c:	4ba1      	ldr	r3, [pc, #644]	@ (8005424 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800519e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051a0:	f003 0303 	and.w	r3, r3, #3
 80051a4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80051a6:	4b9f      	ldr	r3, [pc, #636]	@ (8005424 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051aa:	0b1b      	lsrs	r3, r3, #12
 80051ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80051b0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80051b2:	4b9c      	ldr	r3, [pc, #624]	@ (8005424 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051b6:	091b      	lsrs	r3, r3, #4
 80051b8:	f003 0301 	and.w	r3, r3, #1
 80051bc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80051be:	4b99      	ldr	r3, [pc, #612]	@ (8005424 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051c2:	08db      	lsrs	r3, r3, #3
 80051c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	fb02 f303 	mul.w	r3, r2, r3
 80051ce:	ee07 3a90 	vmov	s15, r3
 80051d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	f000 8111 	beq.w	8005404 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	f000 8083 	beq.w	80052f0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80051ea:	69bb      	ldr	r3, [r7, #24]
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	f200 80a1 	bhi.w	8005334 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d003      	beq.n	8005200 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d056      	beq.n	80052ac <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80051fe:	e099      	b.n	8005334 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005200:	4b88      	ldr	r3, [pc, #544]	@ (8005424 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0320 	and.w	r3, r3, #32
 8005208:	2b00      	cmp	r3, #0
 800520a:	d02d      	beq.n	8005268 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800520c:	4b85      	ldr	r3, [pc, #532]	@ (8005424 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	08db      	lsrs	r3, r3, #3
 8005212:	f003 0303 	and.w	r3, r3, #3
 8005216:	4a84      	ldr	r2, [pc, #528]	@ (8005428 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005218:	fa22 f303 	lsr.w	r3, r2, r3
 800521c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	ee07 3a90 	vmov	s15, r3
 8005224:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	ee07 3a90 	vmov	s15, r3
 800522e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005232:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005236:	4b7b      	ldr	r3, [pc, #492]	@ (8005424 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005238:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800523a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800523e:	ee07 3a90 	vmov	s15, r3
 8005242:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005246:	ed97 6a03 	vldr	s12, [r7, #12]
 800524a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800542c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800524e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005252:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005256:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800525a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800525e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005262:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005266:	e087      	b.n	8005378 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	ee07 3a90 	vmov	s15, r3
 800526e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005272:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005430 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005276:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800527a:	4b6a      	ldr	r3, [pc, #424]	@ (8005424 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800527c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800527e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005282:	ee07 3a90 	vmov	s15, r3
 8005286:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800528a:	ed97 6a03 	vldr	s12, [r7, #12]
 800528e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800542c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005292:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005296:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800529a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800529e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052aa:	e065      	b.n	8005378 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	ee07 3a90 	vmov	s15, r3
 80052b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052b6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005434 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80052ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052be:	4b59      	ldr	r3, [pc, #356]	@ (8005424 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052c6:	ee07 3a90 	vmov	s15, r3
 80052ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80052d2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800542c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80052d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052ee:	e043      	b.n	8005378 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	ee07 3a90 	vmov	s15, r3
 80052f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052fa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005438 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80052fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005302:	4b48      	ldr	r3, [pc, #288]	@ (8005424 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005304:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800530a:	ee07 3a90 	vmov	s15, r3
 800530e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005312:	ed97 6a03 	vldr	s12, [r7, #12]
 8005316:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800542c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800531a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800531e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005322:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005326:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800532a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800532e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005332:	e021      	b.n	8005378 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	ee07 3a90 	vmov	s15, r3
 800533a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800533e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005434 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005342:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005346:	4b37      	ldr	r3, [pc, #220]	@ (8005424 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800534a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800534e:	ee07 3a90 	vmov	s15, r3
 8005352:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005356:	ed97 6a03 	vldr	s12, [r7, #12]
 800535a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800542c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800535e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005362:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005366:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800536a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800536e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005372:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005376:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005378:	4b2a      	ldr	r3, [pc, #168]	@ (8005424 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800537a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800537c:	0a5b      	lsrs	r3, r3, #9
 800537e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005382:	ee07 3a90 	vmov	s15, r3
 8005386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800538a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800538e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005392:	edd7 6a07 	vldr	s13, [r7, #28]
 8005396:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800539a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800539e:	ee17 2a90 	vmov	r2, s15
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80053a6:	4b1f      	ldr	r3, [pc, #124]	@ (8005424 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053aa:	0c1b      	lsrs	r3, r3, #16
 80053ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053b0:	ee07 3a90 	vmov	s15, r3
 80053b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053b8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80053bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80053c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053cc:	ee17 2a90 	vmov	r2, s15
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80053d4:	4b13      	ldr	r3, [pc, #76]	@ (8005424 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053d8:	0e1b      	lsrs	r3, r3, #24
 80053da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053de:	ee07 3a90 	vmov	s15, r3
 80053e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80053ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80053f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053fa:	ee17 2a90 	vmov	r2, s15
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005402:	e008      	b.n	8005416 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	609a      	str	r2, [r3, #8]
}
 8005416:	bf00      	nop
 8005418:	3724      	adds	r7, #36	@ 0x24
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop
 8005424:	58024400 	.word	0x58024400
 8005428:	03d09000 	.word	0x03d09000
 800542c:	46000000 	.word	0x46000000
 8005430:	4c742400 	.word	0x4c742400
 8005434:	4a742400 	.word	0x4a742400
 8005438:	4af42400 	.word	0x4af42400

0800543c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800543c:	b480      	push	{r7}
 800543e:	b089      	sub	sp, #36	@ 0x24
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005444:	4ba1      	ldr	r3, [pc, #644]	@ (80056cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005448:	f003 0303 	and.w	r3, r3, #3
 800544c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800544e:	4b9f      	ldr	r3, [pc, #636]	@ (80056cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005452:	0d1b      	lsrs	r3, r3, #20
 8005454:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005458:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800545a:	4b9c      	ldr	r3, [pc, #624]	@ (80056cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800545c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800545e:	0a1b      	lsrs	r3, r3, #8
 8005460:	f003 0301 	and.w	r3, r3, #1
 8005464:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005466:	4b99      	ldr	r3, [pc, #612]	@ (80056cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800546a:	08db      	lsrs	r3, r3, #3
 800546c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005470:	693a      	ldr	r2, [r7, #16]
 8005472:	fb02 f303 	mul.w	r3, r2, r3
 8005476:	ee07 3a90 	vmov	s15, r3
 800547a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800547e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	2b00      	cmp	r3, #0
 8005486:	f000 8111 	beq.w	80056ac <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	2b02      	cmp	r3, #2
 800548e:	f000 8083 	beq.w	8005598 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	2b02      	cmp	r3, #2
 8005496:	f200 80a1 	bhi.w	80055dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d003      	beq.n	80054a8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d056      	beq.n	8005554 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80054a6:	e099      	b.n	80055dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054a8:	4b88      	ldr	r3, [pc, #544]	@ (80056cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 0320 	and.w	r3, r3, #32
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d02d      	beq.n	8005510 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80054b4:	4b85      	ldr	r3, [pc, #532]	@ (80056cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	08db      	lsrs	r3, r3, #3
 80054ba:	f003 0303 	and.w	r3, r3, #3
 80054be:	4a84      	ldr	r2, [pc, #528]	@ (80056d0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80054c0:	fa22 f303 	lsr.w	r3, r2, r3
 80054c4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	ee07 3a90 	vmov	s15, r3
 80054cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	ee07 3a90 	vmov	s15, r3
 80054d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054de:	4b7b      	ldr	r3, [pc, #492]	@ (80056cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054e6:	ee07 3a90 	vmov	s15, r3
 80054ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80054f2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80056d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80054f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005502:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800550a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800550e:	e087      	b.n	8005620 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	ee07 3a90 	vmov	s15, r3
 8005516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800551a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80056d8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800551e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005522:	4b6a      	ldr	r3, [pc, #424]	@ (80056cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800552a:	ee07 3a90 	vmov	s15, r3
 800552e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005532:	ed97 6a03 	vldr	s12, [r7, #12]
 8005536:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80056d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800553a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800553e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005542:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005546:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800554a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800554e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005552:	e065      	b.n	8005620 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	ee07 3a90 	vmov	s15, r3
 800555a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800555e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80056dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005562:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005566:	4b59      	ldr	r3, [pc, #356]	@ (80056cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800556a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800556e:	ee07 3a90 	vmov	s15, r3
 8005572:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005576:	ed97 6a03 	vldr	s12, [r7, #12]
 800557a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80056d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800557e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005582:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005586:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800558a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800558e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005592:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005596:	e043      	b.n	8005620 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	ee07 3a90 	vmov	s15, r3
 800559e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055a2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80056e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80055a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055aa:	4b48      	ldr	r3, [pc, #288]	@ (80056cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055b2:	ee07 3a90 	vmov	s15, r3
 80055b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80055be:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80056d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80055c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80055ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80055da:	e021      	b.n	8005620 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	ee07 3a90 	vmov	s15, r3
 80055e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055e6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80056dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80055ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055ee:	4b37      	ldr	r3, [pc, #220]	@ (80056cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055f6:	ee07 3a90 	vmov	s15, r3
 80055fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005602:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80056d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005606:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800560a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800560e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005612:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800561a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800561e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005620:	4b2a      	ldr	r3, [pc, #168]	@ (80056cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005624:	0a5b      	lsrs	r3, r3, #9
 8005626:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800562a:	ee07 3a90 	vmov	s15, r3
 800562e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005632:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005636:	ee37 7a87 	vadd.f32	s14, s15, s14
 800563a:	edd7 6a07 	vldr	s13, [r7, #28]
 800563e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005642:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005646:	ee17 2a90 	vmov	r2, s15
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800564e:	4b1f      	ldr	r3, [pc, #124]	@ (80056cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005652:	0c1b      	lsrs	r3, r3, #16
 8005654:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005658:	ee07 3a90 	vmov	s15, r3
 800565c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005660:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005664:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005668:	edd7 6a07 	vldr	s13, [r7, #28]
 800566c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005670:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005674:	ee17 2a90 	vmov	r2, s15
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800567c:	4b13      	ldr	r3, [pc, #76]	@ (80056cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800567e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005680:	0e1b      	lsrs	r3, r3, #24
 8005682:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005686:	ee07 3a90 	vmov	s15, r3
 800568a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800568e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005692:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005696:	edd7 6a07 	vldr	s13, [r7, #28]
 800569a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800569e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056a2:	ee17 2a90 	vmov	r2, s15
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80056aa:	e008      	b.n	80056be <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	609a      	str	r2, [r3, #8]
}
 80056be:	bf00      	nop
 80056c0:	3724      	adds	r7, #36	@ 0x24
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
 80056ca:	bf00      	nop
 80056cc:	58024400 	.word	0x58024400
 80056d0:	03d09000 	.word	0x03d09000
 80056d4:	46000000 	.word	0x46000000
 80056d8:	4c742400 	.word	0x4c742400
 80056dc:	4a742400 	.word	0x4a742400
 80056e0:	4af42400 	.word	0x4af42400

080056e4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056ee:	2300      	movs	r3, #0
 80056f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80056f2:	4b53      	ldr	r3, [pc, #332]	@ (8005840 <RCCEx_PLL2_Config+0x15c>)
 80056f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056f6:	f003 0303 	and.w	r3, r3, #3
 80056fa:	2b03      	cmp	r3, #3
 80056fc:	d101      	bne.n	8005702 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e099      	b.n	8005836 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005702:	4b4f      	ldr	r3, [pc, #316]	@ (8005840 <RCCEx_PLL2_Config+0x15c>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a4e      	ldr	r2, [pc, #312]	@ (8005840 <RCCEx_PLL2_Config+0x15c>)
 8005708:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800570c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800570e:	f7fb fcff 	bl	8001110 <HAL_GetTick>
 8005712:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005714:	e008      	b.n	8005728 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005716:	f7fb fcfb 	bl	8001110 <HAL_GetTick>
 800571a:	4602      	mov	r2, r0
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	1ad3      	subs	r3, r2, r3
 8005720:	2b02      	cmp	r3, #2
 8005722:	d901      	bls.n	8005728 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005724:	2303      	movs	r3, #3
 8005726:	e086      	b.n	8005836 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005728:	4b45      	ldr	r3, [pc, #276]	@ (8005840 <RCCEx_PLL2_Config+0x15c>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005730:	2b00      	cmp	r3, #0
 8005732:	d1f0      	bne.n	8005716 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005734:	4b42      	ldr	r3, [pc, #264]	@ (8005840 <RCCEx_PLL2_Config+0x15c>)
 8005736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005738:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	031b      	lsls	r3, r3, #12
 8005742:	493f      	ldr	r1, [pc, #252]	@ (8005840 <RCCEx_PLL2_Config+0x15c>)
 8005744:	4313      	orrs	r3, r2
 8005746:	628b      	str	r3, [r1, #40]	@ 0x28
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	3b01      	subs	r3, #1
 800574e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	3b01      	subs	r3, #1
 8005758:	025b      	lsls	r3, r3, #9
 800575a:	b29b      	uxth	r3, r3
 800575c:	431a      	orrs	r2, r3
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	3b01      	subs	r3, #1
 8005764:	041b      	lsls	r3, r3, #16
 8005766:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800576a:	431a      	orrs	r2, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	3b01      	subs	r3, #1
 8005772:	061b      	lsls	r3, r3, #24
 8005774:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005778:	4931      	ldr	r1, [pc, #196]	@ (8005840 <RCCEx_PLL2_Config+0x15c>)
 800577a:	4313      	orrs	r3, r2
 800577c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800577e:	4b30      	ldr	r3, [pc, #192]	@ (8005840 <RCCEx_PLL2_Config+0x15c>)
 8005780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005782:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	492d      	ldr	r1, [pc, #180]	@ (8005840 <RCCEx_PLL2_Config+0x15c>)
 800578c:	4313      	orrs	r3, r2
 800578e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005790:	4b2b      	ldr	r3, [pc, #172]	@ (8005840 <RCCEx_PLL2_Config+0x15c>)
 8005792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005794:	f023 0220 	bic.w	r2, r3, #32
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	699b      	ldr	r3, [r3, #24]
 800579c:	4928      	ldr	r1, [pc, #160]	@ (8005840 <RCCEx_PLL2_Config+0x15c>)
 800579e:	4313      	orrs	r3, r2
 80057a0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80057a2:	4b27      	ldr	r3, [pc, #156]	@ (8005840 <RCCEx_PLL2_Config+0x15c>)
 80057a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057a6:	4a26      	ldr	r2, [pc, #152]	@ (8005840 <RCCEx_PLL2_Config+0x15c>)
 80057a8:	f023 0310 	bic.w	r3, r3, #16
 80057ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80057ae:	4b24      	ldr	r3, [pc, #144]	@ (8005840 <RCCEx_PLL2_Config+0x15c>)
 80057b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80057b2:	4b24      	ldr	r3, [pc, #144]	@ (8005844 <RCCEx_PLL2_Config+0x160>)
 80057b4:	4013      	ands	r3, r2
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	69d2      	ldr	r2, [r2, #28]
 80057ba:	00d2      	lsls	r2, r2, #3
 80057bc:	4920      	ldr	r1, [pc, #128]	@ (8005840 <RCCEx_PLL2_Config+0x15c>)
 80057be:	4313      	orrs	r3, r2
 80057c0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80057c2:	4b1f      	ldr	r3, [pc, #124]	@ (8005840 <RCCEx_PLL2_Config+0x15c>)
 80057c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057c6:	4a1e      	ldr	r2, [pc, #120]	@ (8005840 <RCCEx_PLL2_Config+0x15c>)
 80057c8:	f043 0310 	orr.w	r3, r3, #16
 80057cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d106      	bne.n	80057e2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80057d4:	4b1a      	ldr	r3, [pc, #104]	@ (8005840 <RCCEx_PLL2_Config+0x15c>)
 80057d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057d8:	4a19      	ldr	r2, [pc, #100]	@ (8005840 <RCCEx_PLL2_Config+0x15c>)
 80057da:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80057de:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80057e0:	e00f      	b.n	8005802 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d106      	bne.n	80057f6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80057e8:	4b15      	ldr	r3, [pc, #84]	@ (8005840 <RCCEx_PLL2_Config+0x15c>)
 80057ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ec:	4a14      	ldr	r2, [pc, #80]	@ (8005840 <RCCEx_PLL2_Config+0x15c>)
 80057ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80057f4:	e005      	b.n	8005802 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80057f6:	4b12      	ldr	r3, [pc, #72]	@ (8005840 <RCCEx_PLL2_Config+0x15c>)
 80057f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057fa:	4a11      	ldr	r2, [pc, #68]	@ (8005840 <RCCEx_PLL2_Config+0x15c>)
 80057fc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005800:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005802:	4b0f      	ldr	r3, [pc, #60]	@ (8005840 <RCCEx_PLL2_Config+0x15c>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a0e      	ldr	r2, [pc, #56]	@ (8005840 <RCCEx_PLL2_Config+0x15c>)
 8005808:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800580c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800580e:	f7fb fc7f 	bl	8001110 <HAL_GetTick>
 8005812:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005814:	e008      	b.n	8005828 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005816:	f7fb fc7b 	bl	8001110 <HAL_GetTick>
 800581a:	4602      	mov	r2, r0
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	2b02      	cmp	r3, #2
 8005822:	d901      	bls.n	8005828 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005824:	2303      	movs	r3, #3
 8005826:	e006      	b.n	8005836 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005828:	4b05      	ldr	r3, [pc, #20]	@ (8005840 <RCCEx_PLL2_Config+0x15c>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005830:	2b00      	cmp	r3, #0
 8005832:	d0f0      	beq.n	8005816 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005834:	7bfb      	ldrb	r3, [r7, #15]
}
 8005836:	4618      	mov	r0, r3
 8005838:	3710      	adds	r7, #16
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	58024400 	.word	0x58024400
 8005844:	ffff0007 	.word	0xffff0007

08005848 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005852:	2300      	movs	r3, #0
 8005854:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005856:	4b53      	ldr	r3, [pc, #332]	@ (80059a4 <RCCEx_PLL3_Config+0x15c>)
 8005858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800585a:	f003 0303 	and.w	r3, r3, #3
 800585e:	2b03      	cmp	r3, #3
 8005860:	d101      	bne.n	8005866 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e099      	b.n	800599a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005866:	4b4f      	ldr	r3, [pc, #316]	@ (80059a4 <RCCEx_PLL3_Config+0x15c>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a4e      	ldr	r2, [pc, #312]	@ (80059a4 <RCCEx_PLL3_Config+0x15c>)
 800586c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005870:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005872:	f7fb fc4d 	bl	8001110 <HAL_GetTick>
 8005876:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005878:	e008      	b.n	800588c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800587a:	f7fb fc49 	bl	8001110 <HAL_GetTick>
 800587e:	4602      	mov	r2, r0
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	1ad3      	subs	r3, r2, r3
 8005884:	2b02      	cmp	r3, #2
 8005886:	d901      	bls.n	800588c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005888:	2303      	movs	r3, #3
 800588a:	e086      	b.n	800599a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800588c:	4b45      	ldr	r3, [pc, #276]	@ (80059a4 <RCCEx_PLL3_Config+0x15c>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005894:	2b00      	cmp	r3, #0
 8005896:	d1f0      	bne.n	800587a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005898:	4b42      	ldr	r3, [pc, #264]	@ (80059a4 <RCCEx_PLL3_Config+0x15c>)
 800589a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800589c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	051b      	lsls	r3, r3, #20
 80058a6:	493f      	ldr	r1, [pc, #252]	@ (80059a4 <RCCEx_PLL3_Config+0x15c>)
 80058a8:	4313      	orrs	r3, r2
 80058aa:	628b      	str	r3, [r1, #40]	@ 0x28
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	3b01      	subs	r3, #1
 80058b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	3b01      	subs	r3, #1
 80058bc:	025b      	lsls	r3, r3, #9
 80058be:	b29b      	uxth	r3, r3
 80058c0:	431a      	orrs	r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	3b01      	subs	r3, #1
 80058c8:	041b      	lsls	r3, r3, #16
 80058ca:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80058ce:	431a      	orrs	r2, r3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	691b      	ldr	r3, [r3, #16]
 80058d4:	3b01      	subs	r3, #1
 80058d6:	061b      	lsls	r3, r3, #24
 80058d8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80058dc:	4931      	ldr	r1, [pc, #196]	@ (80059a4 <RCCEx_PLL3_Config+0x15c>)
 80058de:	4313      	orrs	r3, r2
 80058e0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80058e2:	4b30      	ldr	r3, [pc, #192]	@ (80059a4 <RCCEx_PLL3_Config+0x15c>)
 80058e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058e6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	695b      	ldr	r3, [r3, #20]
 80058ee:	492d      	ldr	r1, [pc, #180]	@ (80059a4 <RCCEx_PLL3_Config+0x15c>)
 80058f0:	4313      	orrs	r3, r2
 80058f2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80058f4:	4b2b      	ldr	r3, [pc, #172]	@ (80059a4 <RCCEx_PLL3_Config+0x15c>)
 80058f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058f8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	699b      	ldr	r3, [r3, #24]
 8005900:	4928      	ldr	r1, [pc, #160]	@ (80059a4 <RCCEx_PLL3_Config+0x15c>)
 8005902:	4313      	orrs	r3, r2
 8005904:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005906:	4b27      	ldr	r3, [pc, #156]	@ (80059a4 <RCCEx_PLL3_Config+0x15c>)
 8005908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800590a:	4a26      	ldr	r2, [pc, #152]	@ (80059a4 <RCCEx_PLL3_Config+0x15c>)
 800590c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005910:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005912:	4b24      	ldr	r3, [pc, #144]	@ (80059a4 <RCCEx_PLL3_Config+0x15c>)
 8005914:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005916:	4b24      	ldr	r3, [pc, #144]	@ (80059a8 <RCCEx_PLL3_Config+0x160>)
 8005918:	4013      	ands	r3, r2
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	69d2      	ldr	r2, [r2, #28]
 800591e:	00d2      	lsls	r2, r2, #3
 8005920:	4920      	ldr	r1, [pc, #128]	@ (80059a4 <RCCEx_PLL3_Config+0x15c>)
 8005922:	4313      	orrs	r3, r2
 8005924:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005926:	4b1f      	ldr	r3, [pc, #124]	@ (80059a4 <RCCEx_PLL3_Config+0x15c>)
 8005928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800592a:	4a1e      	ldr	r2, [pc, #120]	@ (80059a4 <RCCEx_PLL3_Config+0x15c>)
 800592c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005930:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d106      	bne.n	8005946 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005938:	4b1a      	ldr	r3, [pc, #104]	@ (80059a4 <RCCEx_PLL3_Config+0x15c>)
 800593a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800593c:	4a19      	ldr	r2, [pc, #100]	@ (80059a4 <RCCEx_PLL3_Config+0x15c>)
 800593e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005942:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005944:	e00f      	b.n	8005966 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	2b01      	cmp	r3, #1
 800594a:	d106      	bne.n	800595a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800594c:	4b15      	ldr	r3, [pc, #84]	@ (80059a4 <RCCEx_PLL3_Config+0x15c>)
 800594e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005950:	4a14      	ldr	r2, [pc, #80]	@ (80059a4 <RCCEx_PLL3_Config+0x15c>)
 8005952:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005956:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005958:	e005      	b.n	8005966 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800595a:	4b12      	ldr	r3, [pc, #72]	@ (80059a4 <RCCEx_PLL3_Config+0x15c>)
 800595c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800595e:	4a11      	ldr	r2, [pc, #68]	@ (80059a4 <RCCEx_PLL3_Config+0x15c>)
 8005960:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005964:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005966:	4b0f      	ldr	r3, [pc, #60]	@ (80059a4 <RCCEx_PLL3_Config+0x15c>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a0e      	ldr	r2, [pc, #56]	@ (80059a4 <RCCEx_PLL3_Config+0x15c>)
 800596c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005970:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005972:	f7fb fbcd 	bl	8001110 <HAL_GetTick>
 8005976:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005978:	e008      	b.n	800598c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800597a:	f7fb fbc9 	bl	8001110 <HAL_GetTick>
 800597e:	4602      	mov	r2, r0
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	2b02      	cmp	r3, #2
 8005986:	d901      	bls.n	800598c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005988:	2303      	movs	r3, #3
 800598a:	e006      	b.n	800599a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800598c:	4b05      	ldr	r3, [pc, #20]	@ (80059a4 <RCCEx_PLL3_Config+0x15c>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005994:	2b00      	cmp	r3, #0
 8005996:	d0f0      	beq.n	800597a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005998:	7bfb      	ldrb	r3, [r7, #15]
}
 800599a:	4618      	mov	r0, r3
 800599c:	3710      	adds	r7, #16
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	58024400 	.word	0x58024400
 80059a8:	ffff0007 	.word	0xffff0007

080059ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b082      	sub	sp, #8
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d101      	bne.n	80059be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e042      	b.n	8005a44 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d106      	bne.n	80059d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f7fb f93d 	bl	8000c50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2224      	movs	r2, #36	@ 0x24
 80059da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f022 0201 	bic.w	r2, r2, #1
 80059ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d002      	beq.n	80059fc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f001 f9b6 	bl	8006d68 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f000 fc4b 	bl	8006298 <UART_SetConfig>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d101      	bne.n	8005a0c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e01b      	b.n	8005a44 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	685a      	ldr	r2, [r3, #4]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005a1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	689a      	ldr	r2, [r3, #8]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005a2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f042 0201 	orr.w	r2, r2, #1
 8005a3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f001 fa35 	bl	8006eac <UART_CheckIdleState>
 8005a42:	4603      	mov	r3, r0
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3708      	adds	r7, #8
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}

08005a4c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b08a      	sub	sp, #40	@ 0x28
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	60b9      	str	r1, [r7, #8]
 8005a56:	4613      	mov	r3, r2
 8005a58:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a60:	2b20      	cmp	r3, #32
 8005a62:	d137      	bne.n	8005ad4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d002      	beq.n	8005a70 <HAL_UART_Receive_IT+0x24>
 8005a6a:	88fb      	ldrh	r3, [r7, #6]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d101      	bne.n	8005a74 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	e030      	b.n	8005ad6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2200      	movs	r2, #0
 8005a78:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a18      	ldr	r2, [pc, #96]	@ (8005ae0 <HAL_UART_Receive_IT+0x94>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d01f      	beq.n	8005ac4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d018      	beq.n	8005ac4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	e853 3f00 	ldrex	r3, [r3]
 8005a9e:	613b      	str	r3, [r7, #16]
   return(result);
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005aa6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	461a      	mov	r2, r3
 8005aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab0:	623b      	str	r3, [r7, #32]
 8005ab2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab4:	69f9      	ldr	r1, [r7, #28]
 8005ab6:	6a3a      	ldr	r2, [r7, #32]
 8005ab8:	e841 2300 	strex	r3, r2, [r1]
 8005abc:	61bb      	str	r3, [r7, #24]
   return(result);
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d1e6      	bne.n	8005a92 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005ac4:	88fb      	ldrh	r3, [r7, #6]
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	68b9      	ldr	r1, [r7, #8]
 8005aca:	68f8      	ldr	r0, [r7, #12]
 8005acc:	f001 fb06 	bl	80070dc <UART_Start_Receive_IT>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	e000      	b.n	8005ad6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005ad4:	2302      	movs	r3, #2
  }
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3728      	adds	r7, #40	@ 0x28
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	58000c00 	.word	0x58000c00

08005ae4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b0ba      	sub	sp, #232	@ 0xe8
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	69db      	ldr	r3, [r3, #28]
 8005af2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005b0a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005b0e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005b12:	4013      	ands	r3, r2
 8005b14:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005b18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d11b      	bne.n	8005b58 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005b20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b24:	f003 0320 	and.w	r3, r3, #32
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d015      	beq.n	8005b58 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005b2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b30:	f003 0320 	and.w	r3, r3, #32
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d105      	bne.n	8005b44 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005b38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d009      	beq.n	8005b58 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	f000 8377 	beq.w	800623c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	4798      	blx	r3
      }
      return;
 8005b56:	e371      	b.n	800623c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005b58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	f000 8123 	beq.w	8005da8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005b62:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005b66:	4b8d      	ldr	r3, [pc, #564]	@ (8005d9c <HAL_UART_IRQHandler+0x2b8>)
 8005b68:	4013      	ands	r3, r2
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d106      	bne.n	8005b7c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005b6e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005b72:	4b8b      	ldr	r3, [pc, #556]	@ (8005da0 <HAL_UART_IRQHandler+0x2bc>)
 8005b74:	4013      	ands	r3, r2
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	f000 8116 	beq.w	8005da8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005b7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b80:	f003 0301 	and.w	r3, r3, #1
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d011      	beq.n	8005bac <HAL_UART_IRQHandler+0xc8>
 8005b88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d00b      	beq.n	8005bac <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ba2:	f043 0201 	orr.w	r2, r3, #1
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005bac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bb0:	f003 0302 	and.w	r3, r3, #2
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d011      	beq.n	8005bdc <HAL_UART_IRQHandler+0xf8>
 8005bb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005bbc:	f003 0301 	and.w	r3, r3, #1
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d00b      	beq.n	8005bdc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2202      	movs	r2, #2
 8005bca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bd2:	f043 0204 	orr.w	r2, r3, #4
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005bdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005be0:	f003 0304 	and.w	r3, r3, #4
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d011      	beq.n	8005c0c <HAL_UART_IRQHandler+0x128>
 8005be8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005bec:	f003 0301 	and.w	r3, r3, #1
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d00b      	beq.n	8005c0c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2204      	movs	r2, #4
 8005bfa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c02:	f043 0202 	orr.w	r2, r3, #2
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005c0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c10:	f003 0308 	and.w	r3, r3, #8
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d017      	beq.n	8005c48 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005c18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c1c:	f003 0320 	and.w	r3, r3, #32
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d105      	bne.n	8005c30 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005c24:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005c28:	4b5c      	ldr	r3, [pc, #368]	@ (8005d9c <HAL_UART_IRQHandler+0x2b8>)
 8005c2a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d00b      	beq.n	8005c48 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	2208      	movs	r2, #8
 8005c36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c3e:	f043 0208 	orr.w	r2, r3, #8
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005c48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d012      	beq.n	8005c7a <HAL_UART_IRQHandler+0x196>
 8005c54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c58:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d00c      	beq.n	8005c7a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005c68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c70:	f043 0220 	orr.w	r2, r3, #32
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	f000 82dd 	beq.w	8006240 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c8a:	f003 0320 	and.w	r3, r3, #32
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d013      	beq.n	8005cba <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005c92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c96:	f003 0320 	and.w	r3, r3, #32
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d105      	bne.n	8005caa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005c9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ca2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d007      	beq.n	8005cba <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d003      	beq.n	8005cba <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cc0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cce:	2b40      	cmp	r3, #64	@ 0x40
 8005cd0:	d005      	beq.n	8005cde <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005cd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005cd6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d054      	beq.n	8005d88 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f001 fb1e 	bl	8007320 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cee:	2b40      	cmp	r3, #64	@ 0x40
 8005cf0:	d146      	bne.n	8005d80 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	3308      	adds	r3, #8
 8005cf8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005d00:	e853 3f00 	ldrex	r3, [r3]
 8005d04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005d08:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005d0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	3308      	adds	r3, #8
 8005d1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005d1e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005d22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005d2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005d2e:	e841 2300 	strex	r3, r2, [r1]
 8005d32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005d36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d1d9      	bne.n	8005cf2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d017      	beq.n	8005d78 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d4e:	4a15      	ldr	r2, [pc, #84]	@ (8005da4 <HAL_UART_IRQHandler+0x2c0>)
 8005d50:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f7fb fe57 	bl	8001a0c <HAL_DMA_Abort_IT>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d019      	beq.n	8005d98 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005d72:	4610      	mov	r0, r2
 8005d74:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d76:	e00f      	b.n	8005d98 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f000 fa77 	bl	800626c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d7e:	e00b      	b.n	8005d98 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f000 fa73 	bl	800626c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d86:	e007      	b.n	8005d98 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f000 fa6f 	bl	800626c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005d96:	e253      	b.n	8006240 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d98:	bf00      	nop
    return;
 8005d9a:	e251      	b.n	8006240 <HAL_UART_IRQHandler+0x75c>
 8005d9c:	10000001 	.word	0x10000001
 8005da0:	04000120 	.word	0x04000120
 8005da4:	080073ed 	.word	0x080073ed

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	f040 81e7 	bne.w	8006180 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005db6:	f003 0310 	and.w	r3, r3, #16
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	f000 81e0 	beq.w	8006180 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dc4:	f003 0310 	and.w	r3, r3, #16
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	f000 81d9 	beq.w	8006180 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	2210      	movs	r2, #16
 8005dd4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005de0:	2b40      	cmp	r3, #64	@ 0x40
 8005de2:	f040 8151 	bne.w	8006088 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a96      	ldr	r2, [pc, #600]	@ (8006048 <HAL_UART_IRQHandler+0x564>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d068      	beq.n	8005ec6 <HAL_UART_IRQHandler+0x3e2>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a93      	ldr	r2, [pc, #588]	@ (800604c <HAL_UART_IRQHandler+0x568>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d061      	beq.n	8005ec6 <HAL_UART_IRQHandler+0x3e2>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a91      	ldr	r2, [pc, #580]	@ (8006050 <HAL_UART_IRQHandler+0x56c>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d05a      	beq.n	8005ec6 <HAL_UART_IRQHandler+0x3e2>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a8e      	ldr	r2, [pc, #568]	@ (8006054 <HAL_UART_IRQHandler+0x570>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d053      	beq.n	8005ec6 <HAL_UART_IRQHandler+0x3e2>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a8c      	ldr	r2, [pc, #560]	@ (8006058 <HAL_UART_IRQHandler+0x574>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d04c      	beq.n	8005ec6 <HAL_UART_IRQHandler+0x3e2>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a89      	ldr	r2, [pc, #548]	@ (800605c <HAL_UART_IRQHandler+0x578>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d045      	beq.n	8005ec6 <HAL_UART_IRQHandler+0x3e2>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a87      	ldr	r2, [pc, #540]	@ (8006060 <HAL_UART_IRQHandler+0x57c>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d03e      	beq.n	8005ec6 <HAL_UART_IRQHandler+0x3e2>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a84      	ldr	r2, [pc, #528]	@ (8006064 <HAL_UART_IRQHandler+0x580>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d037      	beq.n	8005ec6 <HAL_UART_IRQHandler+0x3e2>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a82      	ldr	r2, [pc, #520]	@ (8006068 <HAL_UART_IRQHandler+0x584>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d030      	beq.n	8005ec6 <HAL_UART_IRQHandler+0x3e2>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a7f      	ldr	r2, [pc, #508]	@ (800606c <HAL_UART_IRQHandler+0x588>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d029      	beq.n	8005ec6 <HAL_UART_IRQHandler+0x3e2>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a7d      	ldr	r2, [pc, #500]	@ (8006070 <HAL_UART_IRQHandler+0x58c>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d022      	beq.n	8005ec6 <HAL_UART_IRQHandler+0x3e2>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a7a      	ldr	r2, [pc, #488]	@ (8006074 <HAL_UART_IRQHandler+0x590>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d01b      	beq.n	8005ec6 <HAL_UART_IRQHandler+0x3e2>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a78      	ldr	r2, [pc, #480]	@ (8006078 <HAL_UART_IRQHandler+0x594>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d014      	beq.n	8005ec6 <HAL_UART_IRQHandler+0x3e2>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a75      	ldr	r2, [pc, #468]	@ (800607c <HAL_UART_IRQHandler+0x598>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d00d      	beq.n	8005ec6 <HAL_UART_IRQHandler+0x3e2>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a73      	ldr	r2, [pc, #460]	@ (8006080 <HAL_UART_IRQHandler+0x59c>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d006      	beq.n	8005ec6 <HAL_UART_IRQHandler+0x3e2>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a70      	ldr	r2, [pc, #448]	@ (8006084 <HAL_UART_IRQHandler+0x5a0>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d106      	bne.n	8005ed4 <HAL_UART_IRQHandler+0x3f0>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	e005      	b.n	8005ee0 <HAL_UART_IRQHandler+0x3fc>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005ee4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	f000 81ab 	beq.w	8006244 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005ef4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	f080 81a3 	bcs.w	8006244 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005f04:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f0e:	69db      	ldr	r3, [r3, #28]
 8005f10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f14:	f000 8087 	beq.w	8006026 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f20:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005f24:	e853 3f00 	ldrex	r3, [r3]
 8005f28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005f2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005f30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f34:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005f42:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005f46:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005f4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005f52:	e841 2300 	strex	r3, r2, [r1]
 8005f56:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005f5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d1da      	bne.n	8005f18 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	3308      	adds	r3, #8
 8005f68:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005f6c:	e853 3f00 	ldrex	r3, [r3]
 8005f70:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005f72:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005f74:	f023 0301 	bic.w	r3, r3, #1
 8005f78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	3308      	adds	r3, #8
 8005f82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005f86:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005f8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f8c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005f8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005f92:	e841 2300 	strex	r3, r2, [r1]
 8005f96:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005f98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d1e1      	bne.n	8005f62 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	3308      	adds	r3, #8
 8005fa4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005fa8:	e853 3f00 	ldrex	r3, [r3]
 8005fac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005fae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005fb0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fb4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	3308      	adds	r3, #8
 8005fbe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005fc2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005fc4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005fc8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005fca:	e841 2300 	strex	r3, r2, [r1]
 8005fce:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005fd0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d1e3      	bne.n	8005f9e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2220      	movs	r2, #32
 8005fda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005fec:	e853 3f00 	ldrex	r3, [r3]
 8005ff0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005ff2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ff4:	f023 0310 	bic.w	r3, r3, #16
 8005ff8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	461a      	mov	r2, r3
 8006002:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006006:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006008:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800600c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800600e:	e841 2300 	strex	r3, r2, [r1]
 8006012:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006014:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006016:	2b00      	cmp	r3, #0
 8006018:	d1e4      	bne.n	8005fe4 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006020:	4618      	mov	r0, r3
 8006022:	f7fb f9d5 	bl	80013d0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2202      	movs	r2, #2
 800602a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006038:	b29b      	uxth	r3, r3
 800603a:	1ad3      	subs	r3, r2, r3
 800603c:	b29b      	uxth	r3, r3
 800603e:	4619      	mov	r1, r3
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f000 f91d 	bl	8006280 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006046:	e0fd      	b.n	8006244 <HAL_UART_IRQHandler+0x760>
 8006048:	40020010 	.word	0x40020010
 800604c:	40020028 	.word	0x40020028
 8006050:	40020040 	.word	0x40020040
 8006054:	40020058 	.word	0x40020058
 8006058:	40020070 	.word	0x40020070
 800605c:	40020088 	.word	0x40020088
 8006060:	400200a0 	.word	0x400200a0
 8006064:	400200b8 	.word	0x400200b8
 8006068:	40020410 	.word	0x40020410
 800606c:	40020428 	.word	0x40020428
 8006070:	40020440 	.word	0x40020440
 8006074:	40020458 	.word	0x40020458
 8006078:	40020470 	.word	0x40020470
 800607c:	40020488 	.word	0x40020488
 8006080:	400204a0 	.word	0x400204a0
 8006084:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006094:	b29b      	uxth	r3, r3
 8006096:	1ad3      	subs	r3, r2, r3
 8006098:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	f000 80cf 	beq.w	8006248 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80060aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	f000 80ca 	beq.w	8006248 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060bc:	e853 3f00 	ldrex	r3, [r3]
 80060c0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80060c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80060c8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	461a      	mov	r2, r3
 80060d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80060d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80060d8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80060dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80060de:	e841 2300 	strex	r3, r2, [r1]
 80060e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80060e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d1e4      	bne.n	80060b4 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	3308      	adds	r3, #8
 80060f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f4:	e853 3f00 	ldrex	r3, [r3]
 80060f8:	623b      	str	r3, [r7, #32]
   return(result);
 80060fa:	6a3a      	ldr	r2, [r7, #32]
 80060fc:	4b55      	ldr	r3, [pc, #340]	@ (8006254 <HAL_UART_IRQHandler+0x770>)
 80060fe:	4013      	ands	r3, r2
 8006100:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	3308      	adds	r3, #8
 800610a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800610e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006110:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006112:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006114:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006116:	e841 2300 	strex	r3, r2, [r1]
 800611a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800611c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800611e:	2b00      	cmp	r3, #0
 8006120:	d1e3      	bne.n	80060ea <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2220      	movs	r2, #32
 8006126:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2200      	movs	r2, #0
 800612e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	e853 3f00 	ldrex	r3, [r3]
 8006142:	60fb      	str	r3, [r7, #12]
   return(result);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f023 0310 	bic.w	r3, r3, #16
 800614a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	461a      	mov	r2, r3
 8006154:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006158:	61fb      	str	r3, [r7, #28]
 800615a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800615c:	69b9      	ldr	r1, [r7, #24]
 800615e:	69fa      	ldr	r2, [r7, #28]
 8006160:	e841 2300 	strex	r3, r2, [r1]
 8006164:	617b      	str	r3, [r7, #20]
   return(result);
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d1e4      	bne.n	8006136 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2202      	movs	r2, #2
 8006170:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006172:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006176:	4619      	mov	r1, r3
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f000 f881 	bl	8006280 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800617e:	e063      	b.n	8006248 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006184:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006188:	2b00      	cmp	r3, #0
 800618a:	d00e      	beq.n	80061aa <HAL_UART_IRQHandler+0x6c6>
 800618c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006190:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006194:	2b00      	cmp	r3, #0
 8006196:	d008      	beq.n	80061aa <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80061a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f001 fe80 	bl	8007ea8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80061a8:	e051      	b.n	800624e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80061aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d014      	beq.n	80061e0 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80061b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d105      	bne.n	80061ce <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80061c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d008      	beq.n	80061e0 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d03a      	beq.n	800624c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	4798      	blx	r3
    }
    return;
 80061de:	e035      	b.n	800624c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80061e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d009      	beq.n	8006200 <HAL_UART_IRQHandler+0x71c>
 80061ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d003      	beq.n	8006200 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f001 f90d 	bl	8007418 <UART_EndTransmit_IT>
    return;
 80061fe:	e026      	b.n	800624e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006204:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006208:	2b00      	cmp	r3, #0
 800620a:	d009      	beq.n	8006220 <HAL_UART_IRQHandler+0x73c>
 800620c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006210:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006214:	2b00      	cmp	r3, #0
 8006216:	d003      	beq.n	8006220 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f001 fe59 	bl	8007ed0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800621e:	e016      	b.n	800624e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006224:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006228:	2b00      	cmp	r3, #0
 800622a:	d010      	beq.n	800624e <HAL_UART_IRQHandler+0x76a>
 800622c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006230:	2b00      	cmp	r3, #0
 8006232:	da0c      	bge.n	800624e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f001 fe41 	bl	8007ebc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800623a:	e008      	b.n	800624e <HAL_UART_IRQHandler+0x76a>
      return;
 800623c:	bf00      	nop
 800623e:	e006      	b.n	800624e <HAL_UART_IRQHandler+0x76a>
    return;
 8006240:	bf00      	nop
 8006242:	e004      	b.n	800624e <HAL_UART_IRQHandler+0x76a>
      return;
 8006244:	bf00      	nop
 8006246:	e002      	b.n	800624e <HAL_UART_IRQHandler+0x76a>
      return;
 8006248:	bf00      	nop
 800624a:	e000      	b.n	800624e <HAL_UART_IRQHandler+0x76a>
    return;
 800624c:	bf00      	nop
  }
}
 800624e:	37e8      	adds	r7, #232	@ 0xe8
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}
 8006254:	effffffe 	.word	0xeffffffe

08006258 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006260:	bf00      	nop
 8006262:	370c      	adds	r7, #12
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr

0800626c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800626c:	b480      	push	{r7}
 800626e:	b083      	sub	sp, #12
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006274:	bf00      	nop
 8006276:	370c      	adds	r7, #12
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006280:	b480      	push	{r7}
 8006282:	b083      	sub	sp, #12
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	460b      	mov	r3, r1
 800628a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800628c:	bf00      	nop
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006298:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800629c:	b092      	sub	sp, #72	@ 0x48
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80062a2:	2300      	movs	r3, #0
 80062a4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	689a      	ldr	r2, [r3, #8]
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	691b      	ldr	r3, [r3, #16]
 80062b0:	431a      	orrs	r2, r3
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	695b      	ldr	r3, [r3, #20]
 80062b6:	431a      	orrs	r2, r3
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	69db      	ldr	r3, [r3, #28]
 80062bc:	4313      	orrs	r3, r2
 80062be:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	4bbe      	ldr	r3, [pc, #760]	@ (80065c0 <UART_SetConfig+0x328>)
 80062c8:	4013      	ands	r3, r2
 80062ca:	697a      	ldr	r2, [r7, #20]
 80062cc:	6812      	ldr	r2, [r2, #0]
 80062ce:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80062d0:	430b      	orrs	r3, r1
 80062d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	68da      	ldr	r2, [r3, #12]
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	430a      	orrs	r2, r1
 80062e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	699b      	ldr	r3, [r3, #24]
 80062ee:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4ab3      	ldr	r2, [pc, #716]	@ (80065c4 <UART_SetConfig+0x32c>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d004      	beq.n	8006304 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	6a1b      	ldr	r3, [r3, #32]
 80062fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006300:	4313      	orrs	r3, r2
 8006302:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	689a      	ldr	r2, [r3, #8]
 800630a:	4baf      	ldr	r3, [pc, #700]	@ (80065c8 <UART_SetConfig+0x330>)
 800630c:	4013      	ands	r3, r2
 800630e:	697a      	ldr	r2, [r7, #20]
 8006310:	6812      	ldr	r2, [r2, #0]
 8006312:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006314:	430b      	orrs	r3, r1
 8006316:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800631e:	f023 010f 	bic.w	r1, r3, #15
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	430a      	orrs	r2, r1
 800632c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4aa6      	ldr	r2, [pc, #664]	@ (80065cc <UART_SetConfig+0x334>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d177      	bne.n	8006428 <UART_SetConfig+0x190>
 8006338:	4ba5      	ldr	r3, [pc, #660]	@ (80065d0 <UART_SetConfig+0x338>)
 800633a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800633c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006340:	2b28      	cmp	r3, #40	@ 0x28
 8006342:	d86d      	bhi.n	8006420 <UART_SetConfig+0x188>
 8006344:	a201      	add	r2, pc, #4	@ (adr r2, 800634c <UART_SetConfig+0xb4>)
 8006346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800634a:	bf00      	nop
 800634c:	080063f1 	.word	0x080063f1
 8006350:	08006421 	.word	0x08006421
 8006354:	08006421 	.word	0x08006421
 8006358:	08006421 	.word	0x08006421
 800635c:	08006421 	.word	0x08006421
 8006360:	08006421 	.word	0x08006421
 8006364:	08006421 	.word	0x08006421
 8006368:	08006421 	.word	0x08006421
 800636c:	080063f9 	.word	0x080063f9
 8006370:	08006421 	.word	0x08006421
 8006374:	08006421 	.word	0x08006421
 8006378:	08006421 	.word	0x08006421
 800637c:	08006421 	.word	0x08006421
 8006380:	08006421 	.word	0x08006421
 8006384:	08006421 	.word	0x08006421
 8006388:	08006421 	.word	0x08006421
 800638c:	08006401 	.word	0x08006401
 8006390:	08006421 	.word	0x08006421
 8006394:	08006421 	.word	0x08006421
 8006398:	08006421 	.word	0x08006421
 800639c:	08006421 	.word	0x08006421
 80063a0:	08006421 	.word	0x08006421
 80063a4:	08006421 	.word	0x08006421
 80063a8:	08006421 	.word	0x08006421
 80063ac:	08006409 	.word	0x08006409
 80063b0:	08006421 	.word	0x08006421
 80063b4:	08006421 	.word	0x08006421
 80063b8:	08006421 	.word	0x08006421
 80063bc:	08006421 	.word	0x08006421
 80063c0:	08006421 	.word	0x08006421
 80063c4:	08006421 	.word	0x08006421
 80063c8:	08006421 	.word	0x08006421
 80063cc:	08006411 	.word	0x08006411
 80063d0:	08006421 	.word	0x08006421
 80063d4:	08006421 	.word	0x08006421
 80063d8:	08006421 	.word	0x08006421
 80063dc:	08006421 	.word	0x08006421
 80063e0:	08006421 	.word	0x08006421
 80063e4:	08006421 	.word	0x08006421
 80063e8:	08006421 	.word	0x08006421
 80063ec:	08006419 	.word	0x08006419
 80063f0:	2301      	movs	r3, #1
 80063f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063f6:	e222      	b.n	800683e <UART_SetConfig+0x5a6>
 80063f8:	2304      	movs	r3, #4
 80063fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063fe:	e21e      	b.n	800683e <UART_SetConfig+0x5a6>
 8006400:	2308      	movs	r3, #8
 8006402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006406:	e21a      	b.n	800683e <UART_SetConfig+0x5a6>
 8006408:	2310      	movs	r3, #16
 800640a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800640e:	e216      	b.n	800683e <UART_SetConfig+0x5a6>
 8006410:	2320      	movs	r3, #32
 8006412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006416:	e212      	b.n	800683e <UART_SetConfig+0x5a6>
 8006418:	2340      	movs	r3, #64	@ 0x40
 800641a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800641e:	e20e      	b.n	800683e <UART_SetConfig+0x5a6>
 8006420:	2380      	movs	r3, #128	@ 0x80
 8006422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006426:	e20a      	b.n	800683e <UART_SetConfig+0x5a6>
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a69      	ldr	r2, [pc, #420]	@ (80065d4 <UART_SetConfig+0x33c>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d130      	bne.n	8006494 <UART_SetConfig+0x1fc>
 8006432:	4b67      	ldr	r3, [pc, #412]	@ (80065d0 <UART_SetConfig+0x338>)
 8006434:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006436:	f003 0307 	and.w	r3, r3, #7
 800643a:	2b05      	cmp	r3, #5
 800643c:	d826      	bhi.n	800648c <UART_SetConfig+0x1f4>
 800643e:	a201      	add	r2, pc, #4	@ (adr r2, 8006444 <UART_SetConfig+0x1ac>)
 8006440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006444:	0800645d 	.word	0x0800645d
 8006448:	08006465 	.word	0x08006465
 800644c:	0800646d 	.word	0x0800646d
 8006450:	08006475 	.word	0x08006475
 8006454:	0800647d 	.word	0x0800647d
 8006458:	08006485 	.word	0x08006485
 800645c:	2300      	movs	r3, #0
 800645e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006462:	e1ec      	b.n	800683e <UART_SetConfig+0x5a6>
 8006464:	2304      	movs	r3, #4
 8006466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800646a:	e1e8      	b.n	800683e <UART_SetConfig+0x5a6>
 800646c:	2308      	movs	r3, #8
 800646e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006472:	e1e4      	b.n	800683e <UART_SetConfig+0x5a6>
 8006474:	2310      	movs	r3, #16
 8006476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800647a:	e1e0      	b.n	800683e <UART_SetConfig+0x5a6>
 800647c:	2320      	movs	r3, #32
 800647e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006482:	e1dc      	b.n	800683e <UART_SetConfig+0x5a6>
 8006484:	2340      	movs	r3, #64	@ 0x40
 8006486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800648a:	e1d8      	b.n	800683e <UART_SetConfig+0x5a6>
 800648c:	2380      	movs	r3, #128	@ 0x80
 800648e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006492:	e1d4      	b.n	800683e <UART_SetConfig+0x5a6>
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a4f      	ldr	r2, [pc, #316]	@ (80065d8 <UART_SetConfig+0x340>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d130      	bne.n	8006500 <UART_SetConfig+0x268>
 800649e:	4b4c      	ldr	r3, [pc, #304]	@ (80065d0 <UART_SetConfig+0x338>)
 80064a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064a2:	f003 0307 	and.w	r3, r3, #7
 80064a6:	2b05      	cmp	r3, #5
 80064a8:	d826      	bhi.n	80064f8 <UART_SetConfig+0x260>
 80064aa:	a201      	add	r2, pc, #4	@ (adr r2, 80064b0 <UART_SetConfig+0x218>)
 80064ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064b0:	080064c9 	.word	0x080064c9
 80064b4:	080064d1 	.word	0x080064d1
 80064b8:	080064d9 	.word	0x080064d9
 80064bc:	080064e1 	.word	0x080064e1
 80064c0:	080064e9 	.word	0x080064e9
 80064c4:	080064f1 	.word	0x080064f1
 80064c8:	2300      	movs	r3, #0
 80064ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064ce:	e1b6      	b.n	800683e <UART_SetConfig+0x5a6>
 80064d0:	2304      	movs	r3, #4
 80064d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064d6:	e1b2      	b.n	800683e <UART_SetConfig+0x5a6>
 80064d8:	2308      	movs	r3, #8
 80064da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064de:	e1ae      	b.n	800683e <UART_SetConfig+0x5a6>
 80064e0:	2310      	movs	r3, #16
 80064e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064e6:	e1aa      	b.n	800683e <UART_SetConfig+0x5a6>
 80064e8:	2320      	movs	r3, #32
 80064ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064ee:	e1a6      	b.n	800683e <UART_SetConfig+0x5a6>
 80064f0:	2340      	movs	r3, #64	@ 0x40
 80064f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064f6:	e1a2      	b.n	800683e <UART_SetConfig+0x5a6>
 80064f8:	2380      	movs	r3, #128	@ 0x80
 80064fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064fe:	e19e      	b.n	800683e <UART_SetConfig+0x5a6>
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a35      	ldr	r2, [pc, #212]	@ (80065dc <UART_SetConfig+0x344>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d130      	bne.n	800656c <UART_SetConfig+0x2d4>
 800650a:	4b31      	ldr	r3, [pc, #196]	@ (80065d0 <UART_SetConfig+0x338>)
 800650c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800650e:	f003 0307 	and.w	r3, r3, #7
 8006512:	2b05      	cmp	r3, #5
 8006514:	d826      	bhi.n	8006564 <UART_SetConfig+0x2cc>
 8006516:	a201      	add	r2, pc, #4	@ (adr r2, 800651c <UART_SetConfig+0x284>)
 8006518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800651c:	08006535 	.word	0x08006535
 8006520:	0800653d 	.word	0x0800653d
 8006524:	08006545 	.word	0x08006545
 8006528:	0800654d 	.word	0x0800654d
 800652c:	08006555 	.word	0x08006555
 8006530:	0800655d 	.word	0x0800655d
 8006534:	2300      	movs	r3, #0
 8006536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800653a:	e180      	b.n	800683e <UART_SetConfig+0x5a6>
 800653c:	2304      	movs	r3, #4
 800653e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006542:	e17c      	b.n	800683e <UART_SetConfig+0x5a6>
 8006544:	2308      	movs	r3, #8
 8006546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800654a:	e178      	b.n	800683e <UART_SetConfig+0x5a6>
 800654c:	2310      	movs	r3, #16
 800654e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006552:	e174      	b.n	800683e <UART_SetConfig+0x5a6>
 8006554:	2320      	movs	r3, #32
 8006556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800655a:	e170      	b.n	800683e <UART_SetConfig+0x5a6>
 800655c:	2340      	movs	r3, #64	@ 0x40
 800655e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006562:	e16c      	b.n	800683e <UART_SetConfig+0x5a6>
 8006564:	2380      	movs	r3, #128	@ 0x80
 8006566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800656a:	e168      	b.n	800683e <UART_SetConfig+0x5a6>
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a1b      	ldr	r2, [pc, #108]	@ (80065e0 <UART_SetConfig+0x348>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d142      	bne.n	80065fc <UART_SetConfig+0x364>
 8006576:	4b16      	ldr	r3, [pc, #88]	@ (80065d0 <UART_SetConfig+0x338>)
 8006578:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800657a:	f003 0307 	and.w	r3, r3, #7
 800657e:	2b05      	cmp	r3, #5
 8006580:	d838      	bhi.n	80065f4 <UART_SetConfig+0x35c>
 8006582:	a201      	add	r2, pc, #4	@ (adr r2, 8006588 <UART_SetConfig+0x2f0>)
 8006584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006588:	080065a1 	.word	0x080065a1
 800658c:	080065a9 	.word	0x080065a9
 8006590:	080065b1 	.word	0x080065b1
 8006594:	080065b9 	.word	0x080065b9
 8006598:	080065e5 	.word	0x080065e5
 800659c:	080065ed 	.word	0x080065ed
 80065a0:	2300      	movs	r3, #0
 80065a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065a6:	e14a      	b.n	800683e <UART_SetConfig+0x5a6>
 80065a8:	2304      	movs	r3, #4
 80065aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065ae:	e146      	b.n	800683e <UART_SetConfig+0x5a6>
 80065b0:	2308      	movs	r3, #8
 80065b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065b6:	e142      	b.n	800683e <UART_SetConfig+0x5a6>
 80065b8:	2310      	movs	r3, #16
 80065ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065be:	e13e      	b.n	800683e <UART_SetConfig+0x5a6>
 80065c0:	cfff69f3 	.word	0xcfff69f3
 80065c4:	58000c00 	.word	0x58000c00
 80065c8:	11fff4ff 	.word	0x11fff4ff
 80065cc:	40011000 	.word	0x40011000
 80065d0:	58024400 	.word	0x58024400
 80065d4:	40004400 	.word	0x40004400
 80065d8:	40004800 	.word	0x40004800
 80065dc:	40004c00 	.word	0x40004c00
 80065e0:	40005000 	.word	0x40005000
 80065e4:	2320      	movs	r3, #32
 80065e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065ea:	e128      	b.n	800683e <UART_SetConfig+0x5a6>
 80065ec:	2340      	movs	r3, #64	@ 0x40
 80065ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065f2:	e124      	b.n	800683e <UART_SetConfig+0x5a6>
 80065f4:	2380      	movs	r3, #128	@ 0x80
 80065f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065fa:	e120      	b.n	800683e <UART_SetConfig+0x5a6>
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4acb      	ldr	r2, [pc, #812]	@ (8006930 <UART_SetConfig+0x698>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d176      	bne.n	80066f4 <UART_SetConfig+0x45c>
 8006606:	4bcb      	ldr	r3, [pc, #812]	@ (8006934 <UART_SetConfig+0x69c>)
 8006608:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800660a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800660e:	2b28      	cmp	r3, #40	@ 0x28
 8006610:	d86c      	bhi.n	80066ec <UART_SetConfig+0x454>
 8006612:	a201      	add	r2, pc, #4	@ (adr r2, 8006618 <UART_SetConfig+0x380>)
 8006614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006618:	080066bd 	.word	0x080066bd
 800661c:	080066ed 	.word	0x080066ed
 8006620:	080066ed 	.word	0x080066ed
 8006624:	080066ed 	.word	0x080066ed
 8006628:	080066ed 	.word	0x080066ed
 800662c:	080066ed 	.word	0x080066ed
 8006630:	080066ed 	.word	0x080066ed
 8006634:	080066ed 	.word	0x080066ed
 8006638:	080066c5 	.word	0x080066c5
 800663c:	080066ed 	.word	0x080066ed
 8006640:	080066ed 	.word	0x080066ed
 8006644:	080066ed 	.word	0x080066ed
 8006648:	080066ed 	.word	0x080066ed
 800664c:	080066ed 	.word	0x080066ed
 8006650:	080066ed 	.word	0x080066ed
 8006654:	080066ed 	.word	0x080066ed
 8006658:	080066cd 	.word	0x080066cd
 800665c:	080066ed 	.word	0x080066ed
 8006660:	080066ed 	.word	0x080066ed
 8006664:	080066ed 	.word	0x080066ed
 8006668:	080066ed 	.word	0x080066ed
 800666c:	080066ed 	.word	0x080066ed
 8006670:	080066ed 	.word	0x080066ed
 8006674:	080066ed 	.word	0x080066ed
 8006678:	080066d5 	.word	0x080066d5
 800667c:	080066ed 	.word	0x080066ed
 8006680:	080066ed 	.word	0x080066ed
 8006684:	080066ed 	.word	0x080066ed
 8006688:	080066ed 	.word	0x080066ed
 800668c:	080066ed 	.word	0x080066ed
 8006690:	080066ed 	.word	0x080066ed
 8006694:	080066ed 	.word	0x080066ed
 8006698:	080066dd 	.word	0x080066dd
 800669c:	080066ed 	.word	0x080066ed
 80066a0:	080066ed 	.word	0x080066ed
 80066a4:	080066ed 	.word	0x080066ed
 80066a8:	080066ed 	.word	0x080066ed
 80066ac:	080066ed 	.word	0x080066ed
 80066b0:	080066ed 	.word	0x080066ed
 80066b4:	080066ed 	.word	0x080066ed
 80066b8:	080066e5 	.word	0x080066e5
 80066bc:	2301      	movs	r3, #1
 80066be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066c2:	e0bc      	b.n	800683e <UART_SetConfig+0x5a6>
 80066c4:	2304      	movs	r3, #4
 80066c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066ca:	e0b8      	b.n	800683e <UART_SetConfig+0x5a6>
 80066cc:	2308      	movs	r3, #8
 80066ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066d2:	e0b4      	b.n	800683e <UART_SetConfig+0x5a6>
 80066d4:	2310      	movs	r3, #16
 80066d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066da:	e0b0      	b.n	800683e <UART_SetConfig+0x5a6>
 80066dc:	2320      	movs	r3, #32
 80066de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066e2:	e0ac      	b.n	800683e <UART_SetConfig+0x5a6>
 80066e4:	2340      	movs	r3, #64	@ 0x40
 80066e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066ea:	e0a8      	b.n	800683e <UART_SetConfig+0x5a6>
 80066ec:	2380      	movs	r3, #128	@ 0x80
 80066ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066f2:	e0a4      	b.n	800683e <UART_SetConfig+0x5a6>
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a8f      	ldr	r2, [pc, #572]	@ (8006938 <UART_SetConfig+0x6a0>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d130      	bne.n	8006760 <UART_SetConfig+0x4c8>
 80066fe:	4b8d      	ldr	r3, [pc, #564]	@ (8006934 <UART_SetConfig+0x69c>)
 8006700:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006702:	f003 0307 	and.w	r3, r3, #7
 8006706:	2b05      	cmp	r3, #5
 8006708:	d826      	bhi.n	8006758 <UART_SetConfig+0x4c0>
 800670a:	a201      	add	r2, pc, #4	@ (adr r2, 8006710 <UART_SetConfig+0x478>)
 800670c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006710:	08006729 	.word	0x08006729
 8006714:	08006731 	.word	0x08006731
 8006718:	08006739 	.word	0x08006739
 800671c:	08006741 	.word	0x08006741
 8006720:	08006749 	.word	0x08006749
 8006724:	08006751 	.word	0x08006751
 8006728:	2300      	movs	r3, #0
 800672a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800672e:	e086      	b.n	800683e <UART_SetConfig+0x5a6>
 8006730:	2304      	movs	r3, #4
 8006732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006736:	e082      	b.n	800683e <UART_SetConfig+0x5a6>
 8006738:	2308      	movs	r3, #8
 800673a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800673e:	e07e      	b.n	800683e <UART_SetConfig+0x5a6>
 8006740:	2310      	movs	r3, #16
 8006742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006746:	e07a      	b.n	800683e <UART_SetConfig+0x5a6>
 8006748:	2320      	movs	r3, #32
 800674a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800674e:	e076      	b.n	800683e <UART_SetConfig+0x5a6>
 8006750:	2340      	movs	r3, #64	@ 0x40
 8006752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006756:	e072      	b.n	800683e <UART_SetConfig+0x5a6>
 8006758:	2380      	movs	r3, #128	@ 0x80
 800675a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800675e:	e06e      	b.n	800683e <UART_SetConfig+0x5a6>
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a75      	ldr	r2, [pc, #468]	@ (800693c <UART_SetConfig+0x6a4>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d130      	bne.n	80067cc <UART_SetConfig+0x534>
 800676a:	4b72      	ldr	r3, [pc, #456]	@ (8006934 <UART_SetConfig+0x69c>)
 800676c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800676e:	f003 0307 	and.w	r3, r3, #7
 8006772:	2b05      	cmp	r3, #5
 8006774:	d826      	bhi.n	80067c4 <UART_SetConfig+0x52c>
 8006776:	a201      	add	r2, pc, #4	@ (adr r2, 800677c <UART_SetConfig+0x4e4>)
 8006778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800677c:	08006795 	.word	0x08006795
 8006780:	0800679d 	.word	0x0800679d
 8006784:	080067a5 	.word	0x080067a5
 8006788:	080067ad 	.word	0x080067ad
 800678c:	080067b5 	.word	0x080067b5
 8006790:	080067bd 	.word	0x080067bd
 8006794:	2300      	movs	r3, #0
 8006796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800679a:	e050      	b.n	800683e <UART_SetConfig+0x5a6>
 800679c:	2304      	movs	r3, #4
 800679e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067a2:	e04c      	b.n	800683e <UART_SetConfig+0x5a6>
 80067a4:	2308      	movs	r3, #8
 80067a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067aa:	e048      	b.n	800683e <UART_SetConfig+0x5a6>
 80067ac:	2310      	movs	r3, #16
 80067ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067b2:	e044      	b.n	800683e <UART_SetConfig+0x5a6>
 80067b4:	2320      	movs	r3, #32
 80067b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067ba:	e040      	b.n	800683e <UART_SetConfig+0x5a6>
 80067bc:	2340      	movs	r3, #64	@ 0x40
 80067be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067c2:	e03c      	b.n	800683e <UART_SetConfig+0x5a6>
 80067c4:	2380      	movs	r3, #128	@ 0x80
 80067c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067ca:	e038      	b.n	800683e <UART_SetConfig+0x5a6>
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a5b      	ldr	r2, [pc, #364]	@ (8006940 <UART_SetConfig+0x6a8>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d130      	bne.n	8006838 <UART_SetConfig+0x5a0>
 80067d6:	4b57      	ldr	r3, [pc, #348]	@ (8006934 <UART_SetConfig+0x69c>)
 80067d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067da:	f003 0307 	and.w	r3, r3, #7
 80067de:	2b05      	cmp	r3, #5
 80067e0:	d826      	bhi.n	8006830 <UART_SetConfig+0x598>
 80067e2:	a201      	add	r2, pc, #4	@ (adr r2, 80067e8 <UART_SetConfig+0x550>)
 80067e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067e8:	08006801 	.word	0x08006801
 80067ec:	08006809 	.word	0x08006809
 80067f0:	08006811 	.word	0x08006811
 80067f4:	08006819 	.word	0x08006819
 80067f8:	08006821 	.word	0x08006821
 80067fc:	08006829 	.word	0x08006829
 8006800:	2302      	movs	r3, #2
 8006802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006806:	e01a      	b.n	800683e <UART_SetConfig+0x5a6>
 8006808:	2304      	movs	r3, #4
 800680a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800680e:	e016      	b.n	800683e <UART_SetConfig+0x5a6>
 8006810:	2308      	movs	r3, #8
 8006812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006816:	e012      	b.n	800683e <UART_SetConfig+0x5a6>
 8006818:	2310      	movs	r3, #16
 800681a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800681e:	e00e      	b.n	800683e <UART_SetConfig+0x5a6>
 8006820:	2320      	movs	r3, #32
 8006822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006826:	e00a      	b.n	800683e <UART_SetConfig+0x5a6>
 8006828:	2340      	movs	r3, #64	@ 0x40
 800682a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800682e:	e006      	b.n	800683e <UART_SetConfig+0x5a6>
 8006830:	2380      	movs	r3, #128	@ 0x80
 8006832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006836:	e002      	b.n	800683e <UART_SetConfig+0x5a6>
 8006838:	2380      	movs	r3, #128	@ 0x80
 800683a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a3f      	ldr	r2, [pc, #252]	@ (8006940 <UART_SetConfig+0x6a8>)
 8006844:	4293      	cmp	r3, r2
 8006846:	f040 80f8 	bne.w	8006a3a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800684a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800684e:	2b20      	cmp	r3, #32
 8006850:	dc46      	bgt.n	80068e0 <UART_SetConfig+0x648>
 8006852:	2b02      	cmp	r3, #2
 8006854:	f2c0 8082 	blt.w	800695c <UART_SetConfig+0x6c4>
 8006858:	3b02      	subs	r3, #2
 800685a:	2b1e      	cmp	r3, #30
 800685c:	d87e      	bhi.n	800695c <UART_SetConfig+0x6c4>
 800685e:	a201      	add	r2, pc, #4	@ (adr r2, 8006864 <UART_SetConfig+0x5cc>)
 8006860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006864:	080068e7 	.word	0x080068e7
 8006868:	0800695d 	.word	0x0800695d
 800686c:	080068ef 	.word	0x080068ef
 8006870:	0800695d 	.word	0x0800695d
 8006874:	0800695d 	.word	0x0800695d
 8006878:	0800695d 	.word	0x0800695d
 800687c:	080068ff 	.word	0x080068ff
 8006880:	0800695d 	.word	0x0800695d
 8006884:	0800695d 	.word	0x0800695d
 8006888:	0800695d 	.word	0x0800695d
 800688c:	0800695d 	.word	0x0800695d
 8006890:	0800695d 	.word	0x0800695d
 8006894:	0800695d 	.word	0x0800695d
 8006898:	0800695d 	.word	0x0800695d
 800689c:	0800690f 	.word	0x0800690f
 80068a0:	0800695d 	.word	0x0800695d
 80068a4:	0800695d 	.word	0x0800695d
 80068a8:	0800695d 	.word	0x0800695d
 80068ac:	0800695d 	.word	0x0800695d
 80068b0:	0800695d 	.word	0x0800695d
 80068b4:	0800695d 	.word	0x0800695d
 80068b8:	0800695d 	.word	0x0800695d
 80068bc:	0800695d 	.word	0x0800695d
 80068c0:	0800695d 	.word	0x0800695d
 80068c4:	0800695d 	.word	0x0800695d
 80068c8:	0800695d 	.word	0x0800695d
 80068cc:	0800695d 	.word	0x0800695d
 80068d0:	0800695d 	.word	0x0800695d
 80068d4:	0800695d 	.word	0x0800695d
 80068d8:	0800695d 	.word	0x0800695d
 80068dc:	0800694f 	.word	0x0800694f
 80068e0:	2b40      	cmp	r3, #64	@ 0x40
 80068e2:	d037      	beq.n	8006954 <UART_SetConfig+0x6bc>
 80068e4:	e03a      	b.n	800695c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80068e6:	f7fe fc3f 	bl	8005168 <HAL_RCCEx_GetD3PCLK1Freq>
 80068ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80068ec:	e03c      	b.n	8006968 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80068f2:	4618      	mov	r0, r3
 80068f4:	f7fe fc4e 	bl	8005194 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80068f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068fc:	e034      	b.n	8006968 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068fe:	f107 0318 	add.w	r3, r7, #24
 8006902:	4618      	mov	r0, r3
 8006904:	f7fe fd9a 	bl	800543c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006908:	69fb      	ldr	r3, [r7, #28]
 800690a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800690c:	e02c      	b.n	8006968 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800690e:	4b09      	ldr	r3, [pc, #36]	@ (8006934 <UART_SetConfig+0x69c>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f003 0320 	and.w	r3, r3, #32
 8006916:	2b00      	cmp	r3, #0
 8006918:	d016      	beq.n	8006948 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800691a:	4b06      	ldr	r3, [pc, #24]	@ (8006934 <UART_SetConfig+0x69c>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	08db      	lsrs	r3, r3, #3
 8006920:	f003 0303 	and.w	r3, r3, #3
 8006924:	4a07      	ldr	r2, [pc, #28]	@ (8006944 <UART_SetConfig+0x6ac>)
 8006926:	fa22 f303 	lsr.w	r3, r2, r3
 800692a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800692c:	e01c      	b.n	8006968 <UART_SetConfig+0x6d0>
 800692e:	bf00      	nop
 8006930:	40011400 	.word	0x40011400
 8006934:	58024400 	.word	0x58024400
 8006938:	40007800 	.word	0x40007800
 800693c:	40007c00 	.word	0x40007c00
 8006940:	58000c00 	.word	0x58000c00
 8006944:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006948:	4b9d      	ldr	r3, [pc, #628]	@ (8006bc0 <UART_SetConfig+0x928>)
 800694a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800694c:	e00c      	b.n	8006968 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800694e:	4b9d      	ldr	r3, [pc, #628]	@ (8006bc4 <UART_SetConfig+0x92c>)
 8006950:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006952:	e009      	b.n	8006968 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006954:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006958:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800695a:	e005      	b.n	8006968 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800695c:	2300      	movs	r3, #0
 800695e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006966:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006968:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800696a:	2b00      	cmp	r3, #0
 800696c:	f000 81de 	beq.w	8006d2c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006974:	4a94      	ldr	r2, [pc, #592]	@ (8006bc8 <UART_SetConfig+0x930>)
 8006976:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800697a:	461a      	mov	r2, r3
 800697c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800697e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006982:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	685a      	ldr	r2, [r3, #4]
 8006988:	4613      	mov	r3, r2
 800698a:	005b      	lsls	r3, r3, #1
 800698c:	4413      	add	r3, r2
 800698e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006990:	429a      	cmp	r2, r3
 8006992:	d305      	bcc.n	80069a0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800699a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800699c:	429a      	cmp	r2, r3
 800699e:	d903      	bls.n	80069a8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
 80069a2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80069a6:	e1c1      	b.n	8006d2c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069aa:	2200      	movs	r2, #0
 80069ac:	60bb      	str	r3, [r7, #8]
 80069ae:	60fa      	str	r2, [r7, #12]
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069b4:	4a84      	ldr	r2, [pc, #528]	@ (8006bc8 <UART_SetConfig+0x930>)
 80069b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	2200      	movs	r2, #0
 80069be:	603b      	str	r3, [r7, #0]
 80069c0:	607a      	str	r2, [r7, #4]
 80069c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80069ca:	f7f9 fc85 	bl	80002d8 <__aeabi_uldivmod>
 80069ce:	4602      	mov	r2, r0
 80069d0:	460b      	mov	r3, r1
 80069d2:	4610      	mov	r0, r2
 80069d4:	4619      	mov	r1, r3
 80069d6:	f04f 0200 	mov.w	r2, #0
 80069da:	f04f 0300 	mov.w	r3, #0
 80069de:	020b      	lsls	r3, r1, #8
 80069e0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80069e4:	0202      	lsls	r2, r0, #8
 80069e6:	6979      	ldr	r1, [r7, #20]
 80069e8:	6849      	ldr	r1, [r1, #4]
 80069ea:	0849      	lsrs	r1, r1, #1
 80069ec:	2000      	movs	r0, #0
 80069ee:	460c      	mov	r4, r1
 80069f0:	4605      	mov	r5, r0
 80069f2:	eb12 0804 	adds.w	r8, r2, r4
 80069f6:	eb43 0905 	adc.w	r9, r3, r5
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	2200      	movs	r2, #0
 8006a00:	469a      	mov	sl, r3
 8006a02:	4693      	mov	fp, r2
 8006a04:	4652      	mov	r2, sl
 8006a06:	465b      	mov	r3, fp
 8006a08:	4640      	mov	r0, r8
 8006a0a:	4649      	mov	r1, r9
 8006a0c:	f7f9 fc64 	bl	80002d8 <__aeabi_uldivmod>
 8006a10:	4602      	mov	r2, r0
 8006a12:	460b      	mov	r3, r1
 8006a14:	4613      	mov	r3, r2
 8006a16:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a1e:	d308      	bcc.n	8006a32 <UART_SetConfig+0x79a>
 8006a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a26:	d204      	bcs.n	8006a32 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006a2e:	60da      	str	r2, [r3, #12]
 8006a30:	e17c      	b.n	8006d2c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006a38:	e178      	b.n	8006d2c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	69db      	ldr	r3, [r3, #28]
 8006a3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a42:	f040 80c5 	bne.w	8006bd0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006a46:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006a4a:	2b20      	cmp	r3, #32
 8006a4c:	dc48      	bgt.n	8006ae0 <UART_SetConfig+0x848>
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	db7b      	blt.n	8006b4a <UART_SetConfig+0x8b2>
 8006a52:	2b20      	cmp	r3, #32
 8006a54:	d879      	bhi.n	8006b4a <UART_SetConfig+0x8b2>
 8006a56:	a201      	add	r2, pc, #4	@ (adr r2, 8006a5c <UART_SetConfig+0x7c4>)
 8006a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a5c:	08006ae7 	.word	0x08006ae7
 8006a60:	08006aef 	.word	0x08006aef
 8006a64:	08006b4b 	.word	0x08006b4b
 8006a68:	08006b4b 	.word	0x08006b4b
 8006a6c:	08006af7 	.word	0x08006af7
 8006a70:	08006b4b 	.word	0x08006b4b
 8006a74:	08006b4b 	.word	0x08006b4b
 8006a78:	08006b4b 	.word	0x08006b4b
 8006a7c:	08006b07 	.word	0x08006b07
 8006a80:	08006b4b 	.word	0x08006b4b
 8006a84:	08006b4b 	.word	0x08006b4b
 8006a88:	08006b4b 	.word	0x08006b4b
 8006a8c:	08006b4b 	.word	0x08006b4b
 8006a90:	08006b4b 	.word	0x08006b4b
 8006a94:	08006b4b 	.word	0x08006b4b
 8006a98:	08006b4b 	.word	0x08006b4b
 8006a9c:	08006b17 	.word	0x08006b17
 8006aa0:	08006b4b 	.word	0x08006b4b
 8006aa4:	08006b4b 	.word	0x08006b4b
 8006aa8:	08006b4b 	.word	0x08006b4b
 8006aac:	08006b4b 	.word	0x08006b4b
 8006ab0:	08006b4b 	.word	0x08006b4b
 8006ab4:	08006b4b 	.word	0x08006b4b
 8006ab8:	08006b4b 	.word	0x08006b4b
 8006abc:	08006b4b 	.word	0x08006b4b
 8006ac0:	08006b4b 	.word	0x08006b4b
 8006ac4:	08006b4b 	.word	0x08006b4b
 8006ac8:	08006b4b 	.word	0x08006b4b
 8006acc:	08006b4b 	.word	0x08006b4b
 8006ad0:	08006b4b 	.word	0x08006b4b
 8006ad4:	08006b4b 	.word	0x08006b4b
 8006ad8:	08006b4b 	.word	0x08006b4b
 8006adc:	08006b3d 	.word	0x08006b3d
 8006ae0:	2b40      	cmp	r3, #64	@ 0x40
 8006ae2:	d02e      	beq.n	8006b42 <UART_SetConfig+0x8aa>
 8006ae4:	e031      	b.n	8006b4a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ae6:	f7fd f909 	bl	8003cfc <HAL_RCC_GetPCLK1Freq>
 8006aea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006aec:	e033      	b.n	8006b56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006aee:	f7fd f91b 	bl	8003d28 <HAL_RCC_GetPCLK2Freq>
 8006af2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006af4:	e02f      	b.n	8006b56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006af6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006afa:	4618      	mov	r0, r3
 8006afc:	f7fe fb4a 	bl	8005194 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b04:	e027      	b.n	8006b56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b06:	f107 0318 	add.w	r3, r7, #24
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f7fe fc96 	bl	800543c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b14:	e01f      	b.n	8006b56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b16:	4b2d      	ldr	r3, [pc, #180]	@ (8006bcc <UART_SetConfig+0x934>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f003 0320 	and.w	r3, r3, #32
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d009      	beq.n	8006b36 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006b22:	4b2a      	ldr	r3, [pc, #168]	@ (8006bcc <UART_SetConfig+0x934>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	08db      	lsrs	r3, r3, #3
 8006b28:	f003 0303 	and.w	r3, r3, #3
 8006b2c:	4a24      	ldr	r2, [pc, #144]	@ (8006bc0 <UART_SetConfig+0x928>)
 8006b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8006b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006b34:	e00f      	b.n	8006b56 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006b36:	4b22      	ldr	r3, [pc, #136]	@ (8006bc0 <UART_SetConfig+0x928>)
 8006b38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b3a:	e00c      	b.n	8006b56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006b3c:	4b21      	ldr	r3, [pc, #132]	@ (8006bc4 <UART_SetConfig+0x92c>)
 8006b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b40:	e009      	b.n	8006b56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b48:	e005      	b.n	8006b56 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006b54:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	f000 80e7 	beq.w	8006d2c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b62:	4a19      	ldr	r2, [pc, #100]	@ (8006bc8 <UART_SetConfig+0x930>)
 8006b64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b68:	461a      	mov	r2, r3
 8006b6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b70:	005a      	lsls	r2, r3, #1
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	085b      	lsrs	r3, r3, #1
 8006b78:	441a      	add	r2, r3
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b82:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b86:	2b0f      	cmp	r3, #15
 8006b88:	d916      	bls.n	8006bb8 <UART_SetConfig+0x920>
 8006b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b90:	d212      	bcs.n	8006bb8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	f023 030f 	bic.w	r3, r3, #15
 8006b9a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b9e:	085b      	lsrs	r3, r3, #1
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	f003 0307 	and.w	r3, r3, #7
 8006ba6:	b29a      	uxth	r2, r3
 8006ba8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006baa:	4313      	orrs	r3, r2
 8006bac:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006bb4:	60da      	str	r2, [r3, #12]
 8006bb6:	e0b9      	b.n	8006d2c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006bbe:	e0b5      	b.n	8006d2c <UART_SetConfig+0xa94>
 8006bc0:	03d09000 	.word	0x03d09000
 8006bc4:	003d0900 	.word	0x003d0900
 8006bc8:	0800877c 	.word	0x0800877c
 8006bcc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006bd0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006bd4:	2b20      	cmp	r3, #32
 8006bd6:	dc49      	bgt.n	8006c6c <UART_SetConfig+0x9d4>
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	db7c      	blt.n	8006cd6 <UART_SetConfig+0xa3e>
 8006bdc:	2b20      	cmp	r3, #32
 8006bde:	d87a      	bhi.n	8006cd6 <UART_SetConfig+0xa3e>
 8006be0:	a201      	add	r2, pc, #4	@ (adr r2, 8006be8 <UART_SetConfig+0x950>)
 8006be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be6:	bf00      	nop
 8006be8:	08006c73 	.word	0x08006c73
 8006bec:	08006c7b 	.word	0x08006c7b
 8006bf0:	08006cd7 	.word	0x08006cd7
 8006bf4:	08006cd7 	.word	0x08006cd7
 8006bf8:	08006c83 	.word	0x08006c83
 8006bfc:	08006cd7 	.word	0x08006cd7
 8006c00:	08006cd7 	.word	0x08006cd7
 8006c04:	08006cd7 	.word	0x08006cd7
 8006c08:	08006c93 	.word	0x08006c93
 8006c0c:	08006cd7 	.word	0x08006cd7
 8006c10:	08006cd7 	.word	0x08006cd7
 8006c14:	08006cd7 	.word	0x08006cd7
 8006c18:	08006cd7 	.word	0x08006cd7
 8006c1c:	08006cd7 	.word	0x08006cd7
 8006c20:	08006cd7 	.word	0x08006cd7
 8006c24:	08006cd7 	.word	0x08006cd7
 8006c28:	08006ca3 	.word	0x08006ca3
 8006c2c:	08006cd7 	.word	0x08006cd7
 8006c30:	08006cd7 	.word	0x08006cd7
 8006c34:	08006cd7 	.word	0x08006cd7
 8006c38:	08006cd7 	.word	0x08006cd7
 8006c3c:	08006cd7 	.word	0x08006cd7
 8006c40:	08006cd7 	.word	0x08006cd7
 8006c44:	08006cd7 	.word	0x08006cd7
 8006c48:	08006cd7 	.word	0x08006cd7
 8006c4c:	08006cd7 	.word	0x08006cd7
 8006c50:	08006cd7 	.word	0x08006cd7
 8006c54:	08006cd7 	.word	0x08006cd7
 8006c58:	08006cd7 	.word	0x08006cd7
 8006c5c:	08006cd7 	.word	0x08006cd7
 8006c60:	08006cd7 	.word	0x08006cd7
 8006c64:	08006cd7 	.word	0x08006cd7
 8006c68:	08006cc9 	.word	0x08006cc9
 8006c6c:	2b40      	cmp	r3, #64	@ 0x40
 8006c6e:	d02e      	beq.n	8006cce <UART_SetConfig+0xa36>
 8006c70:	e031      	b.n	8006cd6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c72:	f7fd f843 	bl	8003cfc <HAL_RCC_GetPCLK1Freq>
 8006c76:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006c78:	e033      	b.n	8006ce2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c7a:	f7fd f855 	bl	8003d28 <HAL_RCC_GetPCLK2Freq>
 8006c7e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006c80:	e02f      	b.n	8006ce2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006c86:	4618      	mov	r0, r3
 8006c88:	f7fe fa84 	bl	8005194 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c90:	e027      	b.n	8006ce2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c92:	f107 0318 	add.w	r3, r7, #24
 8006c96:	4618      	mov	r0, r3
 8006c98:	f7fe fbd0 	bl	800543c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ca0:	e01f      	b.n	8006ce2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ca2:	4b2d      	ldr	r3, [pc, #180]	@ (8006d58 <UART_SetConfig+0xac0>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f003 0320 	and.w	r3, r3, #32
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d009      	beq.n	8006cc2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006cae:	4b2a      	ldr	r3, [pc, #168]	@ (8006d58 <UART_SetConfig+0xac0>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	08db      	lsrs	r3, r3, #3
 8006cb4:	f003 0303 	and.w	r3, r3, #3
 8006cb8:	4a28      	ldr	r2, [pc, #160]	@ (8006d5c <UART_SetConfig+0xac4>)
 8006cba:	fa22 f303 	lsr.w	r3, r2, r3
 8006cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006cc0:	e00f      	b.n	8006ce2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006cc2:	4b26      	ldr	r3, [pc, #152]	@ (8006d5c <UART_SetConfig+0xac4>)
 8006cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cc6:	e00c      	b.n	8006ce2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006cc8:	4b25      	ldr	r3, [pc, #148]	@ (8006d60 <UART_SetConfig+0xac8>)
 8006cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ccc:	e009      	b.n	8006ce2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cd4:	e005      	b.n	8006ce2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006ce0:	bf00      	nop
    }

    if (pclk != 0U)
 8006ce2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d021      	beq.n	8006d2c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cec:	4a1d      	ldr	r2, [pc, #116]	@ (8006d64 <UART_SetConfig+0xacc>)
 8006cee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cf6:	fbb3 f2f2 	udiv	r2, r3, r2
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	085b      	lsrs	r3, r3, #1
 8006d00:	441a      	add	r2, r3
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d0a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d0e:	2b0f      	cmp	r3, #15
 8006d10:	d909      	bls.n	8006d26 <UART_SetConfig+0xa8e>
 8006d12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d18:	d205      	bcs.n	8006d26 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d1c:	b29a      	uxth	r2, r3
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	60da      	str	r2, [r3, #12]
 8006d24:	e002      	b.n	8006d2c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	2201      	movs	r2, #1
 8006d38:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	2200      	movs	r2, #0
 8006d46:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006d48:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3748      	adds	r7, #72	@ 0x48
 8006d50:	46bd      	mov	sp, r7
 8006d52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d56:	bf00      	nop
 8006d58:	58024400 	.word	0x58024400
 8006d5c:	03d09000 	.word	0x03d09000
 8006d60:	003d0900 	.word	0x003d0900
 8006d64:	0800877c 	.word	0x0800877c

08006d68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d74:	f003 0308 	and.w	r3, r3, #8
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d00a      	beq.n	8006d92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	430a      	orrs	r2, r1
 8006d90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d96:	f003 0301 	and.w	r3, r3, #1
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d00a      	beq.n	8006db4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	430a      	orrs	r2, r1
 8006db2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006db8:	f003 0302 	and.w	r3, r3, #2
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d00a      	beq.n	8006dd6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	430a      	orrs	r2, r1
 8006dd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dda:	f003 0304 	and.w	r3, r3, #4
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d00a      	beq.n	8006df8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	430a      	orrs	r2, r1
 8006df6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dfc:	f003 0310 	and.w	r3, r3, #16
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d00a      	beq.n	8006e1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	430a      	orrs	r2, r1
 8006e18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e1e:	f003 0320 	and.w	r3, r3, #32
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d00a      	beq.n	8006e3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	430a      	orrs	r2, r1
 8006e3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d01a      	beq.n	8006e7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	430a      	orrs	r2, r1
 8006e5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e66:	d10a      	bne.n	8006e7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	430a      	orrs	r2, r1
 8006e7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d00a      	beq.n	8006ea0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	430a      	orrs	r2, r1
 8006e9e:	605a      	str	r2, [r3, #4]
  }
}
 8006ea0:	bf00      	nop
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b098      	sub	sp, #96	@ 0x60
 8006eb0:	af02      	add	r7, sp, #8
 8006eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ebc:	f7fa f928 	bl	8001110 <HAL_GetTick>
 8006ec0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f003 0308 	and.w	r3, r3, #8
 8006ecc:	2b08      	cmp	r3, #8
 8006ece:	d12f      	bne.n	8006f30 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ed0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006ed4:	9300      	str	r3, [sp, #0]
 8006ed6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ed8:	2200      	movs	r2, #0
 8006eda:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 f88e 	bl	8007000 <UART_WaitOnFlagUntilTimeout>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d022      	beq.n	8006f30 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ef2:	e853 3f00 	ldrex	r3, [r3]
 8006ef6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006ef8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006efa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006efe:	653b      	str	r3, [r7, #80]	@ 0x50
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	461a      	mov	r2, r3
 8006f06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f08:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f0a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f0c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006f0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f10:	e841 2300 	strex	r3, r2, [r1]
 8006f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d1e6      	bne.n	8006eea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2220      	movs	r2, #32
 8006f20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f2c:	2303      	movs	r3, #3
 8006f2e:	e063      	b.n	8006ff8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f003 0304 	and.w	r3, r3, #4
 8006f3a:	2b04      	cmp	r3, #4
 8006f3c:	d149      	bne.n	8006fd2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f3e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006f42:	9300      	str	r3, [sp, #0]
 8006f44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f46:	2200      	movs	r2, #0
 8006f48:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 f857 	bl	8007000 <UART_WaitOnFlagUntilTimeout>
 8006f52:	4603      	mov	r3, r0
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d03c      	beq.n	8006fd2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f60:	e853 3f00 	ldrex	r3, [r3]
 8006f64:	623b      	str	r3, [r7, #32]
   return(result);
 8006f66:	6a3b      	ldr	r3, [r7, #32]
 8006f68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	461a      	mov	r2, r3
 8006f74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f76:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f78:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f7e:	e841 2300 	strex	r3, r2, [r1]
 8006f82:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d1e6      	bne.n	8006f58 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	3308      	adds	r3, #8
 8006f90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	e853 3f00 	ldrex	r3, [r3]
 8006f98:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f023 0301 	bic.w	r3, r3, #1
 8006fa0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	3308      	adds	r3, #8
 8006fa8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006faa:	61fa      	str	r2, [r7, #28]
 8006fac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fae:	69b9      	ldr	r1, [r7, #24]
 8006fb0:	69fa      	ldr	r2, [r7, #28]
 8006fb2:	e841 2300 	strex	r3, r2, [r1]
 8006fb6:	617b      	str	r3, [r7, #20]
   return(result);
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d1e5      	bne.n	8006f8a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2220      	movs	r2, #32
 8006fc2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fce:	2303      	movs	r3, #3
 8006fd0:	e012      	b.n	8006ff8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2220      	movs	r2, #32
 8006fd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2220      	movs	r2, #32
 8006fde:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2200      	movs	r2, #0
 8006fec:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006ff6:	2300      	movs	r3, #0
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3758      	adds	r7, #88	@ 0x58
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}

08007000 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b084      	sub	sp, #16
 8007004:	af00      	add	r7, sp, #0
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	60b9      	str	r1, [r7, #8]
 800700a:	603b      	str	r3, [r7, #0]
 800700c:	4613      	mov	r3, r2
 800700e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007010:	e04f      	b.n	80070b2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007012:	69bb      	ldr	r3, [r7, #24]
 8007014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007018:	d04b      	beq.n	80070b2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800701a:	f7fa f879 	bl	8001110 <HAL_GetTick>
 800701e:	4602      	mov	r2, r0
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	1ad3      	subs	r3, r2, r3
 8007024:	69ba      	ldr	r2, [r7, #24]
 8007026:	429a      	cmp	r2, r3
 8007028:	d302      	bcc.n	8007030 <UART_WaitOnFlagUntilTimeout+0x30>
 800702a:	69bb      	ldr	r3, [r7, #24]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d101      	bne.n	8007034 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007030:	2303      	movs	r3, #3
 8007032:	e04e      	b.n	80070d2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f003 0304 	and.w	r3, r3, #4
 800703e:	2b00      	cmp	r3, #0
 8007040:	d037      	beq.n	80070b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	2b80      	cmp	r3, #128	@ 0x80
 8007046:	d034      	beq.n	80070b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	2b40      	cmp	r3, #64	@ 0x40
 800704c:	d031      	beq.n	80070b2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	69db      	ldr	r3, [r3, #28]
 8007054:	f003 0308 	and.w	r3, r3, #8
 8007058:	2b08      	cmp	r3, #8
 800705a:	d110      	bne.n	800707e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	2208      	movs	r2, #8
 8007062:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007064:	68f8      	ldr	r0, [r7, #12]
 8007066:	f000 f95b 	bl	8007320 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2208      	movs	r2, #8
 800706e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2200      	movs	r2, #0
 8007076:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	e029      	b.n	80070d2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	69db      	ldr	r3, [r3, #28]
 8007084:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007088:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800708c:	d111      	bne.n	80070b2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007096:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007098:	68f8      	ldr	r0, [r7, #12]
 800709a:	f000 f941 	bl	8007320 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2220      	movs	r2, #32
 80070a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2200      	movs	r2, #0
 80070aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80070ae:	2303      	movs	r3, #3
 80070b0:	e00f      	b.n	80070d2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	69da      	ldr	r2, [r3, #28]
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	4013      	ands	r3, r2
 80070bc:	68ba      	ldr	r2, [r7, #8]
 80070be:	429a      	cmp	r2, r3
 80070c0:	bf0c      	ite	eq
 80070c2:	2301      	moveq	r3, #1
 80070c4:	2300      	movne	r3, #0
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	461a      	mov	r2, r3
 80070ca:	79fb      	ldrb	r3, [r7, #7]
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d0a0      	beq.n	8007012 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80070d0:	2300      	movs	r3, #0
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3710      	adds	r7, #16
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
	...

080070dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070dc:	b480      	push	{r7}
 80070de:	b0a3      	sub	sp, #140	@ 0x8c
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	60f8      	str	r0, [r7, #12]
 80070e4:	60b9      	str	r1, [r7, #8]
 80070e6:	4613      	mov	r3, r2
 80070e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	68ba      	ldr	r2, [r7, #8]
 80070ee:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	88fa      	ldrh	r2, [r7, #6]
 80070f4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	88fa      	ldrh	r2, [r7, #6]
 80070fc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2200      	movs	r2, #0
 8007104:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800710e:	d10e      	bne.n	800712e <UART_Start_Receive_IT+0x52>
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	691b      	ldr	r3, [r3, #16]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d105      	bne.n	8007124 <UART_Start_Receive_IT+0x48>
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800711e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007122:	e02d      	b.n	8007180 <UART_Start_Receive_IT+0xa4>
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	22ff      	movs	r2, #255	@ 0xff
 8007128:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800712c:	e028      	b.n	8007180 <UART_Start_Receive_IT+0xa4>
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d10d      	bne.n	8007152 <UART_Start_Receive_IT+0x76>
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	691b      	ldr	r3, [r3, #16]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d104      	bne.n	8007148 <UART_Start_Receive_IT+0x6c>
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	22ff      	movs	r2, #255	@ 0xff
 8007142:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007146:	e01b      	b.n	8007180 <UART_Start_Receive_IT+0xa4>
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	227f      	movs	r2, #127	@ 0x7f
 800714c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007150:	e016      	b.n	8007180 <UART_Start_Receive_IT+0xa4>
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800715a:	d10d      	bne.n	8007178 <UART_Start_Receive_IT+0x9c>
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	691b      	ldr	r3, [r3, #16]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d104      	bne.n	800716e <UART_Start_Receive_IT+0x92>
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	227f      	movs	r2, #127	@ 0x7f
 8007168:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800716c:	e008      	b.n	8007180 <UART_Start_Receive_IT+0xa4>
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	223f      	movs	r2, #63	@ 0x3f
 8007172:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007176:	e003      	b.n	8007180 <UART_Start_Receive_IT+0xa4>
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2200      	movs	r2, #0
 800717c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2200      	movs	r2, #0
 8007184:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2222      	movs	r2, #34	@ 0x22
 800718c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	3308      	adds	r3, #8
 8007196:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007198:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800719a:	e853 3f00 	ldrex	r3, [r3]
 800719e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80071a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80071a2:	f043 0301 	orr.w	r3, r3, #1
 80071a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	3308      	adds	r3, #8
 80071b0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80071b4:	673a      	str	r2, [r7, #112]	@ 0x70
 80071b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b8:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80071ba:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80071bc:	e841 2300 	strex	r3, r2, [r1]
 80071c0:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80071c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d1e3      	bne.n	8007190 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80071d0:	d14f      	bne.n	8007272 <UART_Start_Receive_IT+0x196>
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80071d8:	88fa      	ldrh	r2, [r7, #6]
 80071da:	429a      	cmp	r2, r3
 80071dc:	d349      	bcc.n	8007272 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071e6:	d107      	bne.n	80071f8 <UART_Start_Receive_IT+0x11c>
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	691b      	ldr	r3, [r3, #16]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d103      	bne.n	80071f8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	4a47      	ldr	r2, [pc, #284]	@ (8007310 <UART_Start_Receive_IT+0x234>)
 80071f4:	675a      	str	r2, [r3, #116]	@ 0x74
 80071f6:	e002      	b.n	80071fe <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	4a46      	ldr	r2, [pc, #280]	@ (8007314 <UART_Start_Receive_IT+0x238>)
 80071fc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	691b      	ldr	r3, [r3, #16]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d01a      	beq.n	800723c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800720c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800720e:	e853 3f00 	ldrex	r3, [r3]
 8007212:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007214:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007216:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800721a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	461a      	mov	r2, r3
 8007224:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007228:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800722a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800722c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800722e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007230:	e841 2300 	strex	r3, r2, [r1]
 8007234:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8007236:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007238:	2b00      	cmp	r3, #0
 800723a:	d1e4      	bne.n	8007206 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	3308      	adds	r3, #8
 8007242:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007244:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007246:	e853 3f00 	ldrex	r3, [r3]
 800724a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800724c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800724e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007252:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	3308      	adds	r3, #8
 800725a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800725c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800725e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007260:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007262:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007264:	e841 2300 	strex	r3, r2, [r1]
 8007268:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800726a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800726c:	2b00      	cmp	r3, #0
 800726e:	d1e5      	bne.n	800723c <UART_Start_Receive_IT+0x160>
 8007270:	e046      	b.n	8007300 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800727a:	d107      	bne.n	800728c <UART_Start_Receive_IT+0x1b0>
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	691b      	ldr	r3, [r3, #16]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d103      	bne.n	800728c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	4a24      	ldr	r2, [pc, #144]	@ (8007318 <UART_Start_Receive_IT+0x23c>)
 8007288:	675a      	str	r2, [r3, #116]	@ 0x74
 800728a:	e002      	b.n	8007292 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	4a23      	ldr	r2, [pc, #140]	@ (800731c <UART_Start_Receive_IT+0x240>)
 8007290:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	691b      	ldr	r3, [r3, #16]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d019      	beq.n	80072ce <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072a2:	e853 3f00 	ldrex	r3, [r3]
 80072a6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80072a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072aa:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80072ae:	677b      	str	r3, [r7, #116]	@ 0x74
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	461a      	mov	r2, r3
 80072b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80072b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80072ba:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072bc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80072be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80072c0:	e841 2300 	strex	r3, r2, [r1]
 80072c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80072c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d1e6      	bne.n	800729a <UART_Start_Receive_IT+0x1be>
 80072cc:	e018      	b.n	8007300 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	e853 3f00 	ldrex	r3, [r3]
 80072da:	613b      	str	r3, [r7, #16]
   return(result);
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	f043 0320 	orr.w	r3, r3, #32
 80072e2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	461a      	mov	r2, r3
 80072ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80072ec:	623b      	str	r3, [r7, #32]
 80072ee:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f0:	69f9      	ldr	r1, [r7, #28]
 80072f2:	6a3a      	ldr	r2, [r7, #32]
 80072f4:	e841 2300 	strex	r3, r2, [r1]
 80072f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80072fa:	69bb      	ldr	r3, [r7, #24]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d1e6      	bne.n	80072ce <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007300:	2300      	movs	r3, #0
}
 8007302:	4618      	mov	r0, r3
 8007304:	378c      	adds	r7, #140	@ 0x8c
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr
 800730e:	bf00      	nop
 8007310:	08007b41 	.word	0x08007b41
 8007314:	080077e1 	.word	0x080077e1
 8007318:	08007629 	.word	0x08007629
 800731c:	08007471 	.word	0x08007471

08007320 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007320:	b480      	push	{r7}
 8007322:	b095      	sub	sp, #84	@ 0x54
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800732e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007330:	e853 3f00 	ldrex	r3, [r3]
 8007334:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007338:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800733c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	461a      	mov	r2, r3
 8007344:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007346:	643b      	str	r3, [r7, #64]	@ 0x40
 8007348:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800734a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800734c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800734e:	e841 2300 	strex	r3, r2, [r1]
 8007352:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007356:	2b00      	cmp	r3, #0
 8007358:	d1e6      	bne.n	8007328 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	3308      	adds	r3, #8
 8007360:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007362:	6a3b      	ldr	r3, [r7, #32]
 8007364:	e853 3f00 	ldrex	r3, [r3]
 8007368:	61fb      	str	r3, [r7, #28]
   return(result);
 800736a:	69fa      	ldr	r2, [r7, #28]
 800736c:	4b1e      	ldr	r3, [pc, #120]	@ (80073e8 <UART_EndRxTransfer+0xc8>)
 800736e:	4013      	ands	r3, r2
 8007370:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	3308      	adds	r3, #8
 8007378:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800737a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800737c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800737e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007380:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007382:	e841 2300 	strex	r3, r2, [r1]
 8007386:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800738a:	2b00      	cmp	r3, #0
 800738c:	d1e5      	bne.n	800735a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007392:	2b01      	cmp	r3, #1
 8007394:	d118      	bne.n	80073c8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	e853 3f00 	ldrex	r3, [r3]
 80073a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	f023 0310 	bic.w	r3, r3, #16
 80073aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	461a      	mov	r2, r3
 80073b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073b4:	61bb      	str	r3, [r7, #24]
 80073b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b8:	6979      	ldr	r1, [r7, #20]
 80073ba:	69ba      	ldr	r2, [r7, #24]
 80073bc:	e841 2300 	strex	r3, r2, [r1]
 80073c0:	613b      	str	r3, [r7, #16]
   return(result);
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d1e6      	bne.n	8007396 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2220      	movs	r2, #32
 80073cc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2200      	movs	r2, #0
 80073da:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80073dc:	bf00      	nop
 80073de:	3754      	adds	r7, #84	@ 0x54
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr
 80073e8:	effffffe 	.word	0xeffffffe

080073ec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2200      	movs	r2, #0
 80073fe:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2200      	movs	r2, #0
 8007406:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800740a:	68f8      	ldr	r0, [r7, #12]
 800740c:	f7fe ff2e 	bl	800626c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007410:	bf00      	nop
 8007412:	3710      	adds	r7, #16
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b088      	sub	sp, #32
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	e853 3f00 	ldrex	r3, [r3]
 800742c:	60bb      	str	r3, [r7, #8]
   return(result);
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007434:	61fb      	str	r3, [r7, #28]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	461a      	mov	r2, r3
 800743c:	69fb      	ldr	r3, [r7, #28]
 800743e:	61bb      	str	r3, [r7, #24]
 8007440:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007442:	6979      	ldr	r1, [r7, #20]
 8007444:	69ba      	ldr	r2, [r7, #24]
 8007446:	e841 2300 	strex	r3, r2, [r1]
 800744a:	613b      	str	r3, [r7, #16]
   return(result);
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d1e6      	bne.n	8007420 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2220      	movs	r2, #32
 8007456:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2200      	movs	r2, #0
 800745e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f7fe fef9 	bl	8006258 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007466:	bf00      	nop
 8007468:	3720      	adds	r7, #32
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}
	...

08007470 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b09c      	sub	sp, #112	@ 0x70
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800747e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007488:	2b22      	cmp	r3, #34	@ 0x22
 800748a:	f040 80be 	bne.w	800760a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007494:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007498:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800749c:	b2d9      	uxtb	r1, r3
 800749e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80074a2:	b2da      	uxtb	r2, r3
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074a8:	400a      	ands	r2, r1
 80074aa:	b2d2      	uxtb	r2, r2
 80074ac:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074b2:	1c5a      	adds	r2, r3, #1
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80074be:	b29b      	uxth	r3, r3
 80074c0:	3b01      	subs	r3, #1
 80074c2:	b29a      	uxth	r2, r3
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	f040 80a1 	bne.w	800761a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074e0:	e853 3f00 	ldrex	r3, [r3]
 80074e4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80074e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80074e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80074ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	461a      	mov	r2, r3
 80074f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80074f6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80074f8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074fa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80074fc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80074fe:	e841 2300 	strex	r3, r2, [r1]
 8007502:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007504:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007506:	2b00      	cmp	r3, #0
 8007508:	d1e6      	bne.n	80074d8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	3308      	adds	r3, #8
 8007510:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007514:	e853 3f00 	ldrex	r3, [r3]
 8007518:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800751a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800751c:	f023 0301 	bic.w	r3, r3, #1
 8007520:	667b      	str	r3, [r7, #100]	@ 0x64
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	3308      	adds	r3, #8
 8007528:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800752a:	647a      	str	r2, [r7, #68]	@ 0x44
 800752c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800752e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007530:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007532:	e841 2300 	strex	r3, r2, [r1]
 8007536:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007538:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800753a:	2b00      	cmp	r3, #0
 800753c:	d1e5      	bne.n	800750a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2220      	movs	r2, #32
 8007542:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2200      	movs	r2, #0
 800754a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2200      	movs	r2, #0
 8007550:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a33      	ldr	r2, [pc, #204]	@ (8007624 <UART_RxISR_8BIT+0x1b4>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d01f      	beq.n	800759c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007566:	2b00      	cmp	r3, #0
 8007568:	d018      	beq.n	800759c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007572:	e853 3f00 	ldrex	r3, [r3]
 8007576:	623b      	str	r3, [r7, #32]
   return(result);
 8007578:	6a3b      	ldr	r3, [r7, #32]
 800757a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800757e:	663b      	str	r3, [r7, #96]	@ 0x60
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	461a      	mov	r2, r3
 8007586:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007588:	633b      	str	r3, [r7, #48]	@ 0x30
 800758a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800758c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800758e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007590:	e841 2300 	strex	r3, r2, [r1]
 8007594:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007598:	2b00      	cmp	r3, #0
 800759a:	d1e6      	bne.n	800756a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d12e      	bne.n	8007602 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	e853 3f00 	ldrex	r3, [r3]
 80075b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f023 0310 	bic.w	r3, r3, #16
 80075be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	461a      	mov	r2, r3
 80075c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80075c8:	61fb      	str	r3, [r7, #28]
 80075ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075cc:	69b9      	ldr	r1, [r7, #24]
 80075ce:	69fa      	ldr	r2, [r7, #28]
 80075d0:	e841 2300 	strex	r3, r2, [r1]
 80075d4:	617b      	str	r3, [r7, #20]
   return(result);
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d1e6      	bne.n	80075aa <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	69db      	ldr	r3, [r3, #28]
 80075e2:	f003 0310 	and.w	r3, r3, #16
 80075e6:	2b10      	cmp	r3, #16
 80075e8:	d103      	bne.n	80075f2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	2210      	movs	r2, #16
 80075f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80075f8:	4619      	mov	r1, r3
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f7fe fe40 	bl	8006280 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007600:	e00b      	b.n	800761a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f7f9 fa20 	bl	8000a48 <HAL_UART_RxCpltCallback>
}
 8007608:	e007      	b.n	800761a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	699a      	ldr	r2, [r3, #24]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f042 0208 	orr.w	r2, r2, #8
 8007618:	619a      	str	r2, [r3, #24]
}
 800761a:	bf00      	nop
 800761c:	3770      	adds	r7, #112	@ 0x70
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop
 8007624:	58000c00 	.word	0x58000c00

08007628 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b09c      	sub	sp, #112	@ 0x70
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007636:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007640:	2b22      	cmp	r3, #34	@ 0x22
 8007642:	f040 80be 	bne.w	80077c2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800764c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007654:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007656:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800765a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800765e:	4013      	ands	r3, r2
 8007660:	b29a      	uxth	r2, r3
 8007662:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007664:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800766a:	1c9a      	adds	r2, r3, #2
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007676:	b29b      	uxth	r3, r3
 8007678:	3b01      	subs	r3, #1
 800767a:	b29a      	uxth	r2, r3
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007688:	b29b      	uxth	r3, r3
 800768a:	2b00      	cmp	r3, #0
 800768c:	f040 80a1 	bne.w	80077d2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007696:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007698:	e853 3f00 	ldrex	r3, [r3]
 800769c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800769e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80076a4:	667b      	str	r3, [r7, #100]	@ 0x64
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	461a      	mov	r2, r3
 80076ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80076ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80076b0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80076b4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80076b6:	e841 2300 	strex	r3, r2, [r1]
 80076ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80076bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d1e6      	bne.n	8007690 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	3308      	adds	r3, #8
 80076c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076cc:	e853 3f00 	ldrex	r3, [r3]
 80076d0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80076d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076d4:	f023 0301 	bic.w	r3, r3, #1
 80076d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	3308      	adds	r3, #8
 80076e0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80076e2:	643a      	str	r2, [r7, #64]	@ 0x40
 80076e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80076e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80076ea:	e841 2300 	strex	r3, r2, [r1]
 80076ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80076f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d1e5      	bne.n	80076c2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2220      	movs	r2, #32
 80076fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2200      	movs	r2, #0
 8007702:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2200      	movs	r2, #0
 8007708:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a33      	ldr	r2, [pc, #204]	@ (80077dc <UART_RxISR_16BIT+0x1b4>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d01f      	beq.n	8007754 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800771e:	2b00      	cmp	r3, #0
 8007720:	d018      	beq.n	8007754 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007728:	6a3b      	ldr	r3, [r7, #32]
 800772a:	e853 3f00 	ldrex	r3, [r3]
 800772e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007730:	69fb      	ldr	r3, [r7, #28]
 8007732:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007736:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	461a      	mov	r2, r3
 800773e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007740:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007742:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007744:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007746:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007748:	e841 2300 	strex	r3, r2, [r1]
 800774c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800774e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007750:	2b00      	cmp	r3, #0
 8007752:	d1e6      	bne.n	8007722 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007758:	2b01      	cmp	r3, #1
 800775a:	d12e      	bne.n	80077ba <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	e853 3f00 	ldrex	r3, [r3]
 800776e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	f023 0310 	bic.w	r3, r3, #16
 8007776:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	461a      	mov	r2, r3
 800777e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007780:	61bb      	str	r3, [r7, #24]
 8007782:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007784:	6979      	ldr	r1, [r7, #20]
 8007786:	69ba      	ldr	r2, [r7, #24]
 8007788:	e841 2300 	strex	r3, r2, [r1]
 800778c:	613b      	str	r3, [r7, #16]
   return(result);
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d1e6      	bne.n	8007762 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	69db      	ldr	r3, [r3, #28]
 800779a:	f003 0310 	and.w	r3, r3, #16
 800779e:	2b10      	cmp	r3, #16
 80077a0:	d103      	bne.n	80077aa <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	2210      	movs	r2, #16
 80077a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80077b0:	4619      	mov	r1, r3
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f7fe fd64 	bl	8006280 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80077b8:	e00b      	b.n	80077d2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f7f9 f944 	bl	8000a48 <HAL_UART_RxCpltCallback>
}
 80077c0:	e007      	b.n	80077d2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	699a      	ldr	r2, [r3, #24]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f042 0208 	orr.w	r2, r2, #8
 80077d0:	619a      	str	r2, [r3, #24]
}
 80077d2:	bf00      	nop
 80077d4:	3770      	adds	r7, #112	@ 0x70
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}
 80077da:	bf00      	nop
 80077dc:	58000c00 	.word	0x58000c00

080077e0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b0ac      	sub	sp, #176	@ 0xb0
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80077ee:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	69db      	ldr	r3, [r3, #28]
 80077f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007816:	2b22      	cmp	r3, #34	@ 0x22
 8007818:	f040 8180 	bne.w	8007b1c <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007822:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007826:	e123      	b.n	8007a70 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800782e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007832:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8007836:	b2d9      	uxtb	r1, r3
 8007838:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800783c:	b2da      	uxtb	r2, r3
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007842:	400a      	ands	r2, r1
 8007844:	b2d2      	uxtb	r2, r2
 8007846:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800784c:	1c5a      	adds	r2, r3, #1
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007858:	b29b      	uxth	r3, r3
 800785a:	3b01      	subs	r3, #1
 800785c:	b29a      	uxth	r2, r3
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	69db      	ldr	r3, [r3, #28]
 800786a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800786e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007872:	f003 0307 	and.w	r3, r3, #7
 8007876:	2b00      	cmp	r3, #0
 8007878:	d053      	beq.n	8007922 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800787a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800787e:	f003 0301 	and.w	r3, r3, #1
 8007882:	2b00      	cmp	r3, #0
 8007884:	d011      	beq.n	80078aa <UART_RxISR_8BIT_FIFOEN+0xca>
 8007886:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800788a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800788e:	2b00      	cmp	r3, #0
 8007890:	d00b      	beq.n	80078aa <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	2201      	movs	r2, #1
 8007898:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078a0:	f043 0201 	orr.w	r2, r3, #1
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80078aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078ae:	f003 0302 	and.w	r3, r3, #2
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d011      	beq.n	80078da <UART_RxISR_8BIT_FIFOEN+0xfa>
 80078b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80078ba:	f003 0301 	and.w	r3, r3, #1
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d00b      	beq.n	80078da <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	2202      	movs	r2, #2
 80078c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078d0:	f043 0204 	orr.w	r2, r3, #4
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80078da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078de:	f003 0304 	and.w	r3, r3, #4
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d011      	beq.n	800790a <UART_RxISR_8BIT_FIFOEN+0x12a>
 80078e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80078ea:	f003 0301 	and.w	r3, r3, #1
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d00b      	beq.n	800790a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	2204      	movs	r2, #4
 80078f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007900:	f043 0202 	orr.w	r2, r3, #2
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007910:	2b00      	cmp	r3, #0
 8007912:	d006      	beq.n	8007922 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f7fe fca9 	bl	800626c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2200      	movs	r2, #0
 800791e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007928:	b29b      	uxth	r3, r3
 800792a:	2b00      	cmp	r3, #0
 800792c:	f040 80a0 	bne.w	8007a70 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007936:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007938:	e853 3f00 	ldrex	r3, [r3]
 800793c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800793e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007940:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007944:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	461a      	mov	r2, r3
 800794e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007952:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007954:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007956:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8007958:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800795a:	e841 2300 	strex	r3, r2, [r1]
 800795e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8007960:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007962:	2b00      	cmp	r3, #0
 8007964:	d1e4      	bne.n	8007930 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	3308      	adds	r3, #8
 800796c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800796e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007970:	e853 3f00 	ldrex	r3, [r3]
 8007974:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8007976:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007978:	4b6e      	ldr	r3, [pc, #440]	@ (8007b34 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800797a:	4013      	ands	r3, r2
 800797c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	3308      	adds	r3, #8
 8007986:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800798a:	66ba      	str	r2, [r7, #104]	@ 0x68
 800798c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800798e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8007990:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007992:	e841 2300 	strex	r3, r2, [r1]
 8007996:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007998:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800799a:	2b00      	cmp	r3, #0
 800799c:	d1e3      	bne.n	8007966 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2220      	movs	r2, #32
 80079a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2200      	movs	r2, #0
 80079aa:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2200      	movs	r2, #0
 80079b0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a60      	ldr	r2, [pc, #384]	@ (8007b38 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d021      	beq.n	8007a00 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d01a      	beq.n	8007a00 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80079d2:	e853 3f00 	ldrex	r3, [r3]
 80079d6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80079d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80079da:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80079de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	461a      	mov	r2, r3
 80079e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80079ec:	657b      	str	r3, [r7, #84]	@ 0x54
 80079ee:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80079f2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80079f4:	e841 2300 	strex	r3, r2, [r1]
 80079f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80079fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d1e4      	bne.n	80079ca <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d130      	bne.n	8007a6a <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a16:	e853 3f00 	ldrex	r3, [r3]
 8007a1a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a1e:	f023 0310 	bic.w	r3, r3, #16
 8007a22:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a30:	643b      	str	r3, [r7, #64]	@ 0x40
 8007a32:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a34:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007a36:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007a38:	e841 2300 	strex	r3, r2, [r1]
 8007a3c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d1e4      	bne.n	8007a0e <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	69db      	ldr	r3, [r3, #28]
 8007a4a:	f003 0310 	and.w	r3, r3, #16
 8007a4e:	2b10      	cmp	r3, #16
 8007a50:	d103      	bne.n	8007a5a <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	2210      	movs	r2, #16
 8007a58:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007a60:	4619      	mov	r1, r3
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f7fe fc0c 	bl	8006280 <HAL_UARTEx_RxEventCallback>
 8007a68:	e002      	b.n	8007a70 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f7f8 ffec 	bl	8000a48 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007a70:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d006      	beq.n	8007a86 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8007a78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a7c:	f003 0320 	and.w	r3, r3, #32
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	f47f aed1 	bne.w	8007828 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007a8c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007a90:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d049      	beq.n	8007b2c <UART_RxISR_8BIT_FIFOEN+0x34c>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007a9e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	d242      	bcs.n	8007b2c <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	3308      	adds	r3, #8
 8007aac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aae:	6a3b      	ldr	r3, [r7, #32]
 8007ab0:	e853 3f00 	ldrex	r3, [r3]
 8007ab4:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ab6:	69fb      	ldr	r3, [r7, #28]
 8007ab8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007abc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	3308      	adds	r3, #8
 8007ac6:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007aca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007acc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ace:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007ad0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ad2:	e841 2300 	strex	r3, r2, [r1]
 8007ad6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d1e3      	bne.n	8007aa6 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	4a16      	ldr	r2, [pc, #88]	@ (8007b3c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8007ae2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	e853 3f00 	ldrex	r3, [r3]
 8007af0:	60bb      	str	r3, [r7, #8]
   return(result);
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	f043 0320 	orr.w	r3, r3, #32
 8007af8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	461a      	mov	r2, r3
 8007b02:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007b06:	61bb      	str	r3, [r7, #24]
 8007b08:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b0a:	6979      	ldr	r1, [r7, #20]
 8007b0c:	69ba      	ldr	r2, [r7, #24]
 8007b0e:	e841 2300 	strex	r3, r2, [r1]
 8007b12:	613b      	str	r3, [r7, #16]
   return(result);
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d1e4      	bne.n	8007ae4 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007b1a:	e007      	b.n	8007b2c <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	699a      	ldr	r2, [r3, #24]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f042 0208 	orr.w	r2, r2, #8
 8007b2a:	619a      	str	r2, [r3, #24]
}
 8007b2c:	bf00      	nop
 8007b2e:	37b0      	adds	r7, #176	@ 0xb0
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}
 8007b34:	effffffe 	.word	0xeffffffe
 8007b38:	58000c00 	.word	0x58000c00
 8007b3c:	08007471 	.word	0x08007471

08007b40 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b0ae      	sub	sp, #184	@ 0xb8
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007b4e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	69db      	ldr	r3, [r3, #28]
 8007b58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b76:	2b22      	cmp	r3, #34	@ 0x22
 8007b78:	f040 8184 	bne.w	8007e84 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007b82:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007b86:	e127      	b.n	8007dd8 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b8e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8007b9a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8007b9e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8007ba2:	4013      	ands	r3, r2
 8007ba4:	b29a      	uxth	r2, r3
 8007ba6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007baa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bb0:	1c9a      	adds	r2, r3, #2
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	3b01      	subs	r3, #1
 8007bc0:	b29a      	uxth	r2, r3
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	69db      	ldr	r3, [r3, #28]
 8007bce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007bd2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007bd6:	f003 0307 	and.w	r3, r3, #7
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d053      	beq.n	8007c86 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007bde:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007be2:	f003 0301 	and.w	r3, r3, #1
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d011      	beq.n	8007c0e <UART_RxISR_16BIT_FIFOEN+0xce>
 8007bea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007bee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d00b      	beq.n	8007c0e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c04:	f043 0201 	orr.w	r2, r3, #1
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c0e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007c12:	f003 0302 	and.w	r3, r3, #2
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d011      	beq.n	8007c3e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007c1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007c1e:	f003 0301 	and.w	r3, r3, #1
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d00b      	beq.n	8007c3e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	2202      	movs	r2, #2
 8007c2c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c34:	f043 0204 	orr.w	r2, r3, #4
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007c42:	f003 0304 	and.w	r3, r3, #4
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d011      	beq.n	8007c6e <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007c4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007c4e:	f003 0301 	and.w	r3, r3, #1
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d00b      	beq.n	8007c6e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	2204      	movs	r2, #4
 8007c5c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c64:	f043 0202 	orr.w	r2, r3, #2
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d006      	beq.n	8007c86 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f7fe faf7 	bl	800626c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2200      	movs	r2, #0
 8007c82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	f040 80a2 	bne.w	8007dd8 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007c9c:	e853 3f00 	ldrex	r3, [r3]
 8007ca0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007ca2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007ca4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ca8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007cb6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007cba:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cbc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007cbe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007cc2:	e841 2300 	strex	r3, r2, [r1]
 8007cc6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007cc8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d1e2      	bne.n	8007c94 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	3308      	adds	r3, #8
 8007cd4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007cd8:	e853 3f00 	ldrex	r3, [r3]
 8007cdc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007cde:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007ce0:	4b6e      	ldr	r3, [pc, #440]	@ (8007e9c <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8007ce2:	4013      	ands	r3, r2
 8007ce4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	3308      	adds	r3, #8
 8007cee:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8007cf2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007cf4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007cf8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007cfa:	e841 2300 	strex	r3, r2, [r1]
 8007cfe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007d00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d1e3      	bne.n	8007cce <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2220      	movs	r2, #32
 8007d0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2200      	movs	r2, #0
 8007d12:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2200      	movs	r2, #0
 8007d18:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a60      	ldr	r2, [pc, #384]	@ (8007ea0 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d021      	beq.n	8007d68 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d01a      	beq.n	8007d68 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d3a:	e853 3f00 	ldrex	r3, [r3]
 8007d3e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007d40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d42:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007d46:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	461a      	mov	r2, r3
 8007d50:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007d54:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007d56:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d58:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007d5a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007d5c:	e841 2300 	strex	r3, r2, [r1]
 8007d60:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007d62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d1e4      	bne.n	8007d32 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d130      	bne.n	8007dd2 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2200      	movs	r2, #0
 8007d74:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d7e:	e853 3f00 	ldrex	r3, [r3]
 8007d82:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007d84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d86:	f023 0310 	bic.w	r3, r3, #16
 8007d8a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	461a      	mov	r2, r3
 8007d94:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007d98:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d9a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d9c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007d9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007da0:	e841 2300 	strex	r3, r2, [r1]
 8007da4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007da6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d1e4      	bne.n	8007d76 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	69db      	ldr	r3, [r3, #28]
 8007db2:	f003 0310 	and.w	r3, r3, #16
 8007db6:	2b10      	cmp	r3, #16
 8007db8:	d103      	bne.n	8007dc2 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	2210      	movs	r2, #16
 8007dc0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007dc8:	4619      	mov	r1, r3
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f7fe fa58 	bl	8006280 <HAL_UARTEx_RxEventCallback>
 8007dd0:	e002      	b.n	8007dd8 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f7f8 fe38 	bl	8000a48 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007dd8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d006      	beq.n	8007dee <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8007de0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007de4:	f003 0320 	and.w	r3, r3, #32
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	f47f aecd 	bne.w	8007b88 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007df4:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007df8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d049      	beq.n	8007e94 <UART_RxISR_16BIT_FIFOEN+0x354>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007e06:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d242      	bcs.n	8007e94 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	3308      	adds	r3, #8
 8007e14:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e18:	e853 3f00 	ldrex	r3, [r3]
 8007e1c:	623b      	str	r3, [r7, #32]
   return(result);
 8007e1e:	6a3b      	ldr	r3, [r7, #32]
 8007e20:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007e24:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	3308      	adds	r3, #8
 8007e2e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007e32:	633a      	str	r2, [r7, #48]	@ 0x30
 8007e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007e38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e3a:	e841 2300 	strex	r3, r2, [r1]
 8007e3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d1e3      	bne.n	8007e0e <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	4a16      	ldr	r2, [pc, #88]	@ (8007ea4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8007e4a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	e853 3f00 	ldrex	r3, [r3]
 8007e58:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f043 0320 	orr.w	r3, r3, #32
 8007e60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	461a      	mov	r2, r3
 8007e6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007e6e:	61fb      	str	r3, [r7, #28]
 8007e70:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e72:	69b9      	ldr	r1, [r7, #24]
 8007e74:	69fa      	ldr	r2, [r7, #28]
 8007e76:	e841 2300 	strex	r3, r2, [r1]
 8007e7a:	617b      	str	r3, [r7, #20]
   return(result);
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d1e4      	bne.n	8007e4c <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007e82:	e007      	b.n	8007e94 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	699a      	ldr	r2, [r3, #24]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f042 0208 	orr.w	r2, r2, #8
 8007e92:	619a      	str	r2, [r3, #24]
}
 8007e94:	bf00      	nop
 8007e96:	37b8      	adds	r7, #184	@ 0xb8
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}
 8007e9c:	effffffe 	.word	0xeffffffe
 8007ea0:	58000c00 	.word	0x58000c00
 8007ea4:	08007629 	.word	0x08007629

08007ea8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b083      	sub	sp, #12
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007eb0:	bf00      	nop
 8007eb2:	370c      	adds	r7, #12
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr

08007ebc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b083      	sub	sp, #12
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007ec4:	bf00      	nop
 8007ec6:	370c      	adds	r7, #12
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr

08007ed0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b083      	sub	sp, #12
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007ed8:	bf00      	nop
 8007eda:	370c      	adds	r7, #12
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr

08007ee4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b085      	sub	sp, #20
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007ef2:	2b01      	cmp	r3, #1
 8007ef4:	d101      	bne.n	8007efa <HAL_UARTEx_DisableFifoMode+0x16>
 8007ef6:	2302      	movs	r3, #2
 8007ef8:	e027      	b.n	8007f4a <HAL_UARTEx_DisableFifoMode+0x66>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2201      	movs	r2, #1
 8007efe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2224      	movs	r2, #36	@ 0x24
 8007f06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	681a      	ldr	r2, [r3, #0]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f022 0201 	bic.w	r2, r2, #1
 8007f20:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007f28:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	68fa      	ldr	r2, [r7, #12]
 8007f36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2220      	movs	r2, #32
 8007f3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2200      	movs	r2, #0
 8007f44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007f48:	2300      	movs	r3, #0
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3714      	adds	r7, #20
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f54:	4770      	bx	lr

08007f56 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007f56:	b580      	push	{r7, lr}
 8007f58:	b084      	sub	sp, #16
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	6078      	str	r0, [r7, #4]
 8007f5e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007f66:	2b01      	cmp	r3, #1
 8007f68:	d101      	bne.n	8007f6e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007f6a:	2302      	movs	r3, #2
 8007f6c:	e02d      	b.n	8007fca <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2201      	movs	r2, #1
 8007f72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2224      	movs	r2, #36	@ 0x24
 8007f7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f022 0201 	bic.w	r2, r2, #1
 8007f94:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	689b      	ldr	r3, [r3, #8]
 8007f9c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	683a      	ldr	r2, [r7, #0]
 8007fa6:	430a      	orrs	r2, r1
 8007fa8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 f850 	bl	8008050 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	68fa      	ldr	r2, [r7, #12]
 8007fb6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2220      	movs	r2, #32
 8007fbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007fc8:	2300      	movs	r3, #0
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3710      	adds	r7, #16
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}

08007fd2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007fd2:	b580      	push	{r7, lr}
 8007fd4:	b084      	sub	sp, #16
 8007fd6:	af00      	add	r7, sp, #0
 8007fd8:	6078      	str	r0, [r7, #4]
 8007fda:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	d101      	bne.n	8007fea <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007fe6:	2302      	movs	r3, #2
 8007fe8:	e02d      	b.n	8008046 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2201      	movs	r2, #1
 8007fee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2224      	movs	r2, #36	@ 0x24
 8007ff6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	681a      	ldr	r2, [r3, #0]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f022 0201 	bic.w	r2, r2, #1
 8008010:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	689b      	ldr	r3, [r3, #8]
 8008018:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	683a      	ldr	r2, [r7, #0]
 8008022:	430a      	orrs	r2, r1
 8008024:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f000 f812 	bl	8008050 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	68fa      	ldr	r2, [r7, #12]
 8008032:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2220      	movs	r2, #32
 8008038:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2200      	movs	r2, #0
 8008040:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008044:	2300      	movs	r3, #0
}
 8008046:	4618      	mov	r0, r3
 8008048:	3710      	adds	r7, #16
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}
	...

08008050 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008050:	b480      	push	{r7}
 8008052:	b085      	sub	sp, #20
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800805c:	2b00      	cmp	r3, #0
 800805e:	d108      	bne.n	8008072 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2201      	movs	r2, #1
 8008064:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2201      	movs	r2, #1
 800806c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008070:	e031      	b.n	80080d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008072:	2310      	movs	r3, #16
 8008074:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008076:	2310      	movs	r3, #16
 8008078:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	689b      	ldr	r3, [r3, #8]
 8008080:	0e5b      	lsrs	r3, r3, #25
 8008082:	b2db      	uxtb	r3, r3
 8008084:	f003 0307 	and.w	r3, r3, #7
 8008088:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	689b      	ldr	r3, [r3, #8]
 8008090:	0f5b      	lsrs	r3, r3, #29
 8008092:	b2db      	uxtb	r3, r3
 8008094:	f003 0307 	and.w	r3, r3, #7
 8008098:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800809a:	7bbb      	ldrb	r3, [r7, #14]
 800809c:	7b3a      	ldrb	r2, [r7, #12]
 800809e:	4911      	ldr	r1, [pc, #68]	@ (80080e4 <UARTEx_SetNbDataToProcess+0x94>)
 80080a0:	5c8a      	ldrb	r2, [r1, r2]
 80080a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80080a6:	7b3a      	ldrb	r2, [r7, #12]
 80080a8:	490f      	ldr	r1, [pc, #60]	@ (80080e8 <UARTEx_SetNbDataToProcess+0x98>)
 80080aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80080ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80080b0:	b29a      	uxth	r2, r3
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80080b8:	7bfb      	ldrb	r3, [r7, #15]
 80080ba:	7b7a      	ldrb	r2, [r7, #13]
 80080bc:	4909      	ldr	r1, [pc, #36]	@ (80080e4 <UARTEx_SetNbDataToProcess+0x94>)
 80080be:	5c8a      	ldrb	r2, [r1, r2]
 80080c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80080c4:	7b7a      	ldrb	r2, [r7, #13]
 80080c6:	4908      	ldr	r1, [pc, #32]	@ (80080e8 <UARTEx_SetNbDataToProcess+0x98>)
 80080c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80080ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80080ce:	b29a      	uxth	r2, r3
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80080d6:	bf00      	nop
 80080d8:	3714      	adds	r7, #20
 80080da:	46bd      	mov	sp, r7
 80080dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e0:	4770      	bx	lr
 80080e2:	bf00      	nop
 80080e4:	08008794 	.word	0x08008794
 80080e8:	0800879c 	.word	0x0800879c

080080ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80080ec:	b084      	sub	sp, #16
 80080ee:	b580      	push	{r7, lr}
 80080f0:	b084      	sub	sp, #16
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	6078      	str	r0, [r7, #4]
 80080f6:	f107 001c 	add.w	r0, r7, #28
 80080fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80080fe:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008102:	2b01      	cmp	r3, #1
 8008104:	d121      	bne.n	800814a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800810a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	68da      	ldr	r2, [r3, #12]
 8008116:	4b2c      	ldr	r3, [pc, #176]	@ (80081c8 <USB_CoreInit+0xdc>)
 8008118:	4013      	ands	r3, r2
 800811a:	687a      	ldr	r2, [r7, #4]
 800811c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	68db      	ldr	r3, [r3, #12]
 8008122:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800812a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800812e:	2b01      	cmp	r3, #1
 8008130:	d105      	bne.n	800813e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	68db      	ldr	r3, [r3, #12]
 8008136:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 faaa 	bl	8008698 <USB_CoreReset>
 8008144:	4603      	mov	r3, r0
 8008146:	73fb      	strb	r3, [r7, #15]
 8008148:	e01b      	b.n	8008182 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	68db      	ldr	r3, [r3, #12]
 800814e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 fa9e 	bl	8008698 <USB_CoreReset>
 800815c:	4603      	mov	r3, r0
 800815e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008160:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008164:	2b00      	cmp	r3, #0
 8008166:	d106      	bne.n	8008176 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800816c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	639a      	str	r2, [r3, #56]	@ 0x38
 8008174:	e005      	b.n	8008182 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800817a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008182:	7fbb      	ldrb	r3, [r7, #30]
 8008184:	2b01      	cmp	r3, #1
 8008186:	d116      	bne.n	80081b6 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800818c:	b29a      	uxth	r2, r3
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008196:	4b0d      	ldr	r3, [pc, #52]	@ (80081cc <USB_CoreInit+0xe0>)
 8008198:	4313      	orrs	r3, r2
 800819a:	687a      	ldr	r2, [r7, #4]
 800819c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	689b      	ldr	r3, [r3, #8]
 80081a2:	f043 0206 	orr.w	r2, r3, #6
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	689b      	ldr	r3, [r3, #8]
 80081ae:	f043 0220 	orr.w	r2, r3, #32
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80081b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	3710      	adds	r7, #16
 80081bc:	46bd      	mov	sp, r7
 80081be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80081c2:	b004      	add	sp, #16
 80081c4:	4770      	bx	lr
 80081c6:	bf00      	nop
 80081c8:	ffbdffbf 	.word	0xffbdffbf
 80081cc:	03ee0000 	.word	0x03ee0000

080081d0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b083      	sub	sp, #12
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	f023 0201 	bic.w	r2, r3, #1
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80081e4:	2300      	movs	r3, #0
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	370c      	adds	r7, #12
 80081ea:	46bd      	mov	sp, r7
 80081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f0:	4770      	bx	lr

080081f2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80081f2:	b580      	push	{r7, lr}
 80081f4:	b084      	sub	sp, #16
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	6078      	str	r0, [r7, #4]
 80081fa:	460b      	mov	r3, r1
 80081fc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80081fe:	2300      	movs	r3, #0
 8008200:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	68db      	ldr	r3, [r3, #12]
 8008206:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800820e:	78fb      	ldrb	r3, [r7, #3]
 8008210:	2b01      	cmp	r3, #1
 8008212:	d115      	bne.n	8008240 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	68db      	ldr	r3, [r3, #12]
 8008218:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008220:	200a      	movs	r0, #10
 8008222:	f7f8 ff81 	bl	8001128 <HAL_Delay>
      ms += 10U;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	330a      	adds	r3, #10
 800822a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f000 fa25 	bl	800867c <USB_GetMode>
 8008232:	4603      	mov	r3, r0
 8008234:	2b01      	cmp	r3, #1
 8008236:	d01e      	beq.n	8008276 <USB_SetCurrentMode+0x84>
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2bc7      	cmp	r3, #199	@ 0xc7
 800823c:	d9f0      	bls.n	8008220 <USB_SetCurrentMode+0x2e>
 800823e:	e01a      	b.n	8008276 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008240:	78fb      	ldrb	r3, [r7, #3]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d115      	bne.n	8008272 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	68db      	ldr	r3, [r3, #12]
 800824a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008252:	200a      	movs	r0, #10
 8008254:	f7f8 ff68 	bl	8001128 <HAL_Delay>
      ms += 10U;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	330a      	adds	r3, #10
 800825c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 fa0c 	bl	800867c <USB_GetMode>
 8008264:	4603      	mov	r3, r0
 8008266:	2b00      	cmp	r3, #0
 8008268:	d005      	beq.n	8008276 <USB_SetCurrentMode+0x84>
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2bc7      	cmp	r3, #199	@ 0xc7
 800826e:	d9f0      	bls.n	8008252 <USB_SetCurrentMode+0x60>
 8008270:	e001      	b.n	8008276 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008272:	2301      	movs	r3, #1
 8008274:	e005      	b.n	8008282 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2bc8      	cmp	r3, #200	@ 0xc8
 800827a:	d101      	bne.n	8008280 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800827c:	2301      	movs	r3, #1
 800827e:	e000      	b.n	8008282 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008280:	2300      	movs	r3, #0
}
 8008282:	4618      	mov	r0, r3
 8008284:	3710      	adds	r7, #16
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
	...

0800828c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800828c:	b084      	sub	sp, #16
 800828e:	b580      	push	{r7, lr}
 8008290:	b086      	sub	sp, #24
 8008292:	af00      	add	r7, sp, #0
 8008294:	6078      	str	r0, [r7, #4]
 8008296:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800829a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800829e:	2300      	movs	r3, #0
 80082a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80082a6:	2300      	movs	r3, #0
 80082a8:	613b      	str	r3, [r7, #16]
 80082aa:	e009      	b.n	80082c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80082ac:	687a      	ldr	r2, [r7, #4]
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	3340      	adds	r3, #64	@ 0x40
 80082b2:	009b      	lsls	r3, r3, #2
 80082b4:	4413      	add	r3, r2
 80082b6:	2200      	movs	r2, #0
 80082b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	3301      	adds	r3, #1
 80082be:	613b      	str	r3, [r7, #16]
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	2b0e      	cmp	r3, #14
 80082c4:	d9f2      	bls.n	80082ac <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80082c6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d11c      	bne.n	8008308 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082d4:	685b      	ldr	r3, [r3, #4]
 80082d6:	68fa      	ldr	r2, [r7, #12]
 80082d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80082dc:	f043 0302 	orr.w	r3, r3, #2
 80082e0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082e6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	601a      	str	r2, [r3, #0]
 8008306:	e005      	b.n	8008314 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800830c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800831a:	461a      	mov	r2, r3
 800831c:	2300      	movs	r3, #0
 800831e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008320:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8008324:	2b01      	cmp	r3, #1
 8008326:	d10d      	bne.n	8008344 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008328:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800832c:	2b00      	cmp	r3, #0
 800832e:	d104      	bne.n	800833a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008330:	2100      	movs	r1, #0
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 f968 	bl	8008608 <USB_SetDevSpeed>
 8008338:	e008      	b.n	800834c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800833a:	2101      	movs	r1, #1
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f000 f963 	bl	8008608 <USB_SetDevSpeed>
 8008342:	e003      	b.n	800834c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008344:	2103      	movs	r1, #3
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f000 f95e 	bl	8008608 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800834c:	2110      	movs	r1, #16
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f000 f8fa 	bl	8008548 <USB_FlushTxFifo>
 8008354:	4603      	mov	r3, r0
 8008356:	2b00      	cmp	r3, #0
 8008358:	d001      	beq.n	800835e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800835a:	2301      	movs	r3, #1
 800835c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 f924 	bl	80085ac <USB_FlushRxFifo>
 8008364:	4603      	mov	r3, r0
 8008366:	2b00      	cmp	r3, #0
 8008368:	d001      	beq.n	800836e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800836a:	2301      	movs	r3, #1
 800836c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008374:	461a      	mov	r2, r3
 8008376:	2300      	movs	r3, #0
 8008378:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008380:	461a      	mov	r2, r3
 8008382:	2300      	movs	r3, #0
 8008384:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800838c:	461a      	mov	r2, r3
 800838e:	2300      	movs	r3, #0
 8008390:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008392:	2300      	movs	r3, #0
 8008394:	613b      	str	r3, [r7, #16]
 8008396:	e043      	b.n	8008420 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	015a      	lsls	r2, r3, #5
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	4413      	add	r3, r2
 80083a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80083aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80083ae:	d118      	bne.n	80083e2 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d10a      	bne.n	80083cc <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	015a      	lsls	r2, r3, #5
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	4413      	add	r3, r2
 80083be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083c2:	461a      	mov	r2, r3
 80083c4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80083c8:	6013      	str	r3, [r2, #0]
 80083ca:	e013      	b.n	80083f4 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	015a      	lsls	r2, r3, #5
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	4413      	add	r3, r2
 80083d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083d8:	461a      	mov	r2, r3
 80083da:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80083de:	6013      	str	r3, [r2, #0]
 80083e0:	e008      	b.n	80083f4 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	015a      	lsls	r2, r3, #5
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	4413      	add	r3, r2
 80083ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083ee:	461a      	mov	r2, r3
 80083f0:	2300      	movs	r3, #0
 80083f2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	015a      	lsls	r2, r3, #5
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	4413      	add	r3, r2
 80083fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008400:	461a      	mov	r2, r3
 8008402:	2300      	movs	r3, #0
 8008404:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	015a      	lsls	r2, r3, #5
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	4413      	add	r3, r2
 800840e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008412:	461a      	mov	r2, r3
 8008414:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008418:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	3301      	adds	r3, #1
 800841e:	613b      	str	r3, [r7, #16]
 8008420:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008424:	461a      	mov	r2, r3
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	4293      	cmp	r3, r2
 800842a:	d3b5      	bcc.n	8008398 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800842c:	2300      	movs	r3, #0
 800842e:	613b      	str	r3, [r7, #16]
 8008430:	e043      	b.n	80084ba <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	015a      	lsls	r2, r3, #5
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	4413      	add	r3, r2
 800843a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008444:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008448:	d118      	bne.n	800847c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d10a      	bne.n	8008466 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	015a      	lsls	r2, r3, #5
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	4413      	add	r3, r2
 8008458:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800845c:	461a      	mov	r2, r3
 800845e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008462:	6013      	str	r3, [r2, #0]
 8008464:	e013      	b.n	800848e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	015a      	lsls	r2, r3, #5
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	4413      	add	r3, r2
 800846e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008472:	461a      	mov	r2, r3
 8008474:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008478:	6013      	str	r3, [r2, #0]
 800847a:	e008      	b.n	800848e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	015a      	lsls	r2, r3, #5
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	4413      	add	r3, r2
 8008484:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008488:	461a      	mov	r2, r3
 800848a:	2300      	movs	r3, #0
 800848c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	015a      	lsls	r2, r3, #5
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	4413      	add	r3, r2
 8008496:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800849a:	461a      	mov	r2, r3
 800849c:	2300      	movs	r3, #0
 800849e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	015a      	lsls	r2, r3, #5
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	4413      	add	r3, r2
 80084a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084ac:	461a      	mov	r2, r3
 80084ae:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80084b2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	3301      	adds	r3, #1
 80084b8:	613b      	str	r3, [r7, #16]
 80084ba:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80084be:	461a      	mov	r2, r3
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d3b5      	bcc.n	8008432 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084cc:	691b      	ldr	r3, [r3, #16]
 80084ce:	68fa      	ldr	r2, [r7, #12]
 80084d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80084d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80084d8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2200      	movs	r2, #0
 80084de:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80084e6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80084e8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d105      	bne.n	80084fc <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	699b      	ldr	r3, [r3, #24]
 80084f4:	f043 0210 	orr.w	r2, r3, #16
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	699a      	ldr	r2, [r3, #24]
 8008500:	4b0f      	ldr	r3, [pc, #60]	@ (8008540 <USB_DevInit+0x2b4>)
 8008502:	4313      	orrs	r3, r2
 8008504:	687a      	ldr	r2, [r7, #4]
 8008506:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008508:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800850c:	2b00      	cmp	r3, #0
 800850e:	d005      	beq.n	800851c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	699b      	ldr	r3, [r3, #24]
 8008514:	f043 0208 	orr.w	r2, r3, #8
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800851c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008520:	2b01      	cmp	r3, #1
 8008522:	d105      	bne.n	8008530 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	699a      	ldr	r2, [r3, #24]
 8008528:	4b06      	ldr	r3, [pc, #24]	@ (8008544 <USB_DevInit+0x2b8>)
 800852a:	4313      	orrs	r3, r2
 800852c:	687a      	ldr	r2, [r7, #4]
 800852e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008530:	7dfb      	ldrb	r3, [r7, #23]
}
 8008532:	4618      	mov	r0, r3
 8008534:	3718      	adds	r7, #24
 8008536:	46bd      	mov	sp, r7
 8008538:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800853c:	b004      	add	sp, #16
 800853e:	4770      	bx	lr
 8008540:	803c3800 	.word	0x803c3800
 8008544:	40000004 	.word	0x40000004

08008548 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008548:	b480      	push	{r7}
 800854a:	b085      	sub	sp, #20
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008552:	2300      	movs	r3, #0
 8008554:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	3301      	adds	r3, #1
 800855a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008562:	d901      	bls.n	8008568 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008564:	2303      	movs	r3, #3
 8008566:	e01b      	b.n	80085a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	691b      	ldr	r3, [r3, #16]
 800856c:	2b00      	cmp	r3, #0
 800856e:	daf2      	bge.n	8008556 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008570:	2300      	movs	r3, #0
 8008572:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	019b      	lsls	r3, r3, #6
 8008578:	f043 0220 	orr.w	r2, r3, #32
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	3301      	adds	r3, #1
 8008584:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800858c:	d901      	bls.n	8008592 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800858e:	2303      	movs	r3, #3
 8008590:	e006      	b.n	80085a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	691b      	ldr	r3, [r3, #16]
 8008596:	f003 0320 	and.w	r3, r3, #32
 800859a:	2b20      	cmp	r3, #32
 800859c:	d0f0      	beq.n	8008580 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800859e:	2300      	movs	r3, #0
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3714      	adds	r7, #20
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr

080085ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b085      	sub	sp, #20
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80085b4:	2300      	movs	r3, #0
 80085b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	3301      	adds	r3, #1
 80085bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80085c4:	d901      	bls.n	80085ca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80085c6:	2303      	movs	r3, #3
 80085c8:	e018      	b.n	80085fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	691b      	ldr	r3, [r3, #16]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	daf2      	bge.n	80085b8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80085d2:	2300      	movs	r3, #0
 80085d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2210      	movs	r2, #16
 80085da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	3301      	adds	r3, #1
 80085e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80085e8:	d901      	bls.n	80085ee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80085ea:	2303      	movs	r3, #3
 80085ec:	e006      	b.n	80085fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	691b      	ldr	r3, [r3, #16]
 80085f2:	f003 0310 	and.w	r3, r3, #16
 80085f6:	2b10      	cmp	r3, #16
 80085f8:	d0f0      	beq.n	80085dc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80085fa:	2300      	movs	r3, #0
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3714      	adds	r7, #20
 8008600:	46bd      	mov	sp, r7
 8008602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008606:	4770      	bx	lr

08008608 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008608:	b480      	push	{r7}
 800860a:	b085      	sub	sp, #20
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	460b      	mov	r3, r1
 8008612:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800861e:	681a      	ldr	r2, [r3, #0]
 8008620:	78fb      	ldrb	r3, [r7, #3]
 8008622:	68f9      	ldr	r1, [r7, #12]
 8008624:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008628:	4313      	orrs	r3, r2
 800862a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800862c:	2300      	movs	r3, #0
}
 800862e:	4618      	mov	r0, r3
 8008630:	3714      	adds	r7, #20
 8008632:	46bd      	mov	sp, r7
 8008634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008638:	4770      	bx	lr

0800863a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800863a:	b480      	push	{r7}
 800863c:	b085      	sub	sp, #20
 800863e:	af00      	add	r7, sp, #0
 8008640:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	68fa      	ldr	r2, [r7, #12]
 8008650:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008654:	f023 0303 	bic.w	r3, r3, #3
 8008658:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	68fa      	ldr	r2, [r7, #12]
 8008664:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008668:	f043 0302 	orr.w	r3, r3, #2
 800866c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800866e:	2300      	movs	r3, #0
}
 8008670:	4618      	mov	r0, r3
 8008672:	3714      	adds	r7, #20
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr

0800867c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800867c:	b480      	push	{r7}
 800867e:	b083      	sub	sp, #12
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	695b      	ldr	r3, [r3, #20]
 8008688:	f003 0301 	and.w	r3, r3, #1
}
 800868c:	4618      	mov	r0, r3
 800868e:	370c      	adds	r7, #12
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr

08008698 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008698:	b480      	push	{r7}
 800869a:	b085      	sub	sp, #20
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80086a0:	2300      	movs	r3, #0
 80086a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	3301      	adds	r3, #1
 80086a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80086b0:	d901      	bls.n	80086b6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80086b2:	2303      	movs	r3, #3
 80086b4:	e01b      	b.n	80086ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	691b      	ldr	r3, [r3, #16]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	daf2      	bge.n	80086a4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80086be:	2300      	movs	r3, #0
 80086c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	691b      	ldr	r3, [r3, #16]
 80086c6:	f043 0201 	orr.w	r2, r3, #1
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	3301      	adds	r3, #1
 80086d2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80086da:	d901      	bls.n	80086e0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80086dc:	2303      	movs	r3, #3
 80086de:	e006      	b.n	80086ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	691b      	ldr	r3, [r3, #16]
 80086e4:	f003 0301 	and.w	r3, r3, #1
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d0f0      	beq.n	80086ce <USB_CoreReset+0x36>

  return HAL_OK;
 80086ec:	2300      	movs	r3, #0
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3714      	adds	r7, #20
 80086f2:	46bd      	mov	sp, r7
 80086f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f8:	4770      	bx	lr

080086fa <memset>:
 80086fa:	4402      	add	r2, r0
 80086fc:	4603      	mov	r3, r0
 80086fe:	4293      	cmp	r3, r2
 8008700:	d100      	bne.n	8008704 <memset+0xa>
 8008702:	4770      	bx	lr
 8008704:	f803 1b01 	strb.w	r1, [r3], #1
 8008708:	e7f9      	b.n	80086fe <memset+0x4>
	...

0800870c <__libc_init_array>:
 800870c:	b570      	push	{r4, r5, r6, lr}
 800870e:	4d0d      	ldr	r5, [pc, #52]	@ (8008744 <__libc_init_array+0x38>)
 8008710:	4c0d      	ldr	r4, [pc, #52]	@ (8008748 <__libc_init_array+0x3c>)
 8008712:	1b64      	subs	r4, r4, r5
 8008714:	10a4      	asrs	r4, r4, #2
 8008716:	2600      	movs	r6, #0
 8008718:	42a6      	cmp	r6, r4
 800871a:	d109      	bne.n	8008730 <__libc_init_array+0x24>
 800871c:	4d0b      	ldr	r5, [pc, #44]	@ (800874c <__libc_init_array+0x40>)
 800871e:	4c0c      	ldr	r4, [pc, #48]	@ (8008750 <__libc_init_array+0x44>)
 8008720:	f000 f818 	bl	8008754 <_init>
 8008724:	1b64      	subs	r4, r4, r5
 8008726:	10a4      	asrs	r4, r4, #2
 8008728:	2600      	movs	r6, #0
 800872a:	42a6      	cmp	r6, r4
 800872c:	d105      	bne.n	800873a <__libc_init_array+0x2e>
 800872e:	bd70      	pop	{r4, r5, r6, pc}
 8008730:	f855 3b04 	ldr.w	r3, [r5], #4
 8008734:	4798      	blx	r3
 8008736:	3601      	adds	r6, #1
 8008738:	e7ee      	b.n	8008718 <__libc_init_array+0xc>
 800873a:	f855 3b04 	ldr.w	r3, [r5], #4
 800873e:	4798      	blx	r3
 8008740:	3601      	adds	r6, #1
 8008742:	e7f2      	b.n	800872a <__libc_init_array+0x1e>
 8008744:	080087ac 	.word	0x080087ac
 8008748:	080087ac 	.word	0x080087ac
 800874c:	080087ac 	.word	0x080087ac
 8008750:	080087b0 	.word	0x080087b0

08008754 <_init>:
 8008754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008756:	bf00      	nop
 8008758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800875a:	bc08      	pop	{r3}
 800875c:	469e      	mov	lr, r3
 800875e:	4770      	bx	lr

08008760 <_fini>:
 8008760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008762:	bf00      	nop
 8008764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008766:	bc08      	pop	{r3}
 8008768:	469e      	mov	lr, r3
 800876a:	4770      	bx	lr
